
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000706c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  08007220  08007220  00017220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007528  08007528  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007528  08007528  00017528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007530  08007530  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007530  08007530  00017530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007534  08007534  00017534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  200001dc  08007714  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08007714  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116ad  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024ab  00000000  00000000  000318b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fc8  00000000  00000000  00033d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ec8  00000000  00000000  00034d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027c96  00000000  00000000  00035bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c81b  00000000  00000000  0005d88e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e85e7  00000000  00000000  0006a0a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00152690  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fd8  00000000  00000000  0015270c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007204 	.word	0x08007204

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	08007204 	.word	0x08007204

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b972 	b.w	8000ec4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	4688      	mov	r8, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14b      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4615      	mov	r5, r2
 8000c0a:	d967      	bls.n	8000cdc <__udivmoddi4+0xe4>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0720 	rsb	r7, r2, #32
 8000c16:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c1e:	4095      	lsls	r5, r2
 8000c20:	ea47 0803 	orr.w	r8, r7, r3
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2a:	0c23      	lsrs	r3, r4, #16
 8000c2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c30:	fa1f fc85 	uxth.w	ip, r5
 8000c34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d909      	bls.n	8000c58 <__udivmoddi4+0x60>
 8000c44:	18eb      	adds	r3, r5, r3
 8000c46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c4a:	f080 811b 	bcs.w	8000e84 <__udivmoddi4+0x28c>
 8000c4e:	4299      	cmp	r1, r3
 8000c50:	f240 8118 	bls.w	8000e84 <__udivmoddi4+0x28c>
 8000c54:	3f02      	subs	r7, #2
 8000c56:	442b      	add	r3, r5
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6c:	45a4      	cmp	ip, r4
 8000c6e:	d909      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c70:	192c      	adds	r4, r5, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8107 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	f240 8104 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c80:	3802      	subs	r0, #2
 8000c82:	442c      	add	r4, r5
 8000c84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c88:	eba4 040c 	sub.w	r4, r4, ip
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	b11e      	cbz	r6, 8000c98 <__udivmoddi4+0xa0>
 8000c90:	40d4      	lsrs	r4, r2
 8000c92:	2300      	movs	r3, #0
 8000c94:	e9c6 4300 	strd	r4, r3, [r6]
 8000c98:	4639      	mov	r1, r7
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0xbe>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80eb 	beq.w	8000e7e <__udivmoddi4+0x286>
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e9c6 0100 	strd	r0, r1, [r6]
 8000cae:	4638      	mov	r0, r7
 8000cb0:	4639      	mov	r1, r7
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f783 	clz	r7, r3
 8000cba:	2f00      	cmp	r7, #0
 8000cbc:	d147      	bne.n	8000d4e <__udivmoddi4+0x156>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xd0>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80fa 	bhi.w	8000ebc <__udivmoddi4+0x2c4>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb61 0303 	sbc.w	r3, r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	4698      	mov	r8, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d0e0      	beq.n	8000c98 <__udivmoddi4+0xa0>
 8000cd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cda:	e7dd      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000cdc:	b902      	cbnz	r2, 8000ce0 <__udivmoddi4+0xe8>
 8000cde:	deff      	udf	#255	; 0xff
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f040 808f 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000cea:	1b49      	subs	r1, r1, r5
 8000cec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf0:	fa1f f885 	uxth.w	r8, r5
 8000cf4:	2701      	movs	r7, #1
 8000cf6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d04:	fb08 f10c 	mul.w	r1, r8, ip
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0c:	18eb      	adds	r3, r5, r3
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4299      	cmp	r1, r3
 8000d16:	f200 80cd 	bhi.w	8000eb4 <__udivmoddi4+0x2bc>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x14c>
 8000d34:	192c      	adds	r4, r5, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x14a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80b6 	bhi.w	8000eae <__udivmoddi4+0x2b6>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e79f      	b.n	8000c8e <__udivmoddi4+0x96>
 8000d4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d52:	40bb      	lsls	r3, r7
 8000d54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d6c:	4325      	orrs	r5, r4
 8000d6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d72:	0c2c      	lsrs	r4, r5, #16
 8000d74:	fb08 3319 	mls	r3, r8, r9, r3
 8000d78:	fa1f fa8e 	uxth.w	sl, lr
 8000d7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d80:	fb09 f40a 	mul.w	r4, r9, sl
 8000d84:	429c      	cmp	r4, r3
 8000d86:	fa02 f207 	lsl.w	r2, r2, r7
 8000d8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1e 0303 	adds.w	r3, lr, r3
 8000d94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d98:	f080 8087 	bcs.w	8000eaa <__udivmoddi4+0x2b2>
 8000d9c:	429c      	cmp	r4, r3
 8000d9e:	f240 8084 	bls.w	8000eaa <__udivmoddi4+0x2b2>
 8000da2:	f1a9 0902 	sub.w	r9, r9, #2
 8000da6:	4473      	add	r3, lr
 8000da8:	1b1b      	subs	r3, r3, r4
 8000daa:	b2ad      	uxth	r5, r5
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000db8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dbc:	45a2      	cmp	sl, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1e 0404 	adds.w	r4, lr, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	d26b      	bcs.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dca:	45a2      	cmp	sl, r4
 8000dcc:	d969      	bls.n	8000ea2 <__udivmoddi4+0x2aa>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4474      	add	r4, lr
 8000dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dda:	eba4 040a 	sub.w	r4, r4, sl
 8000dde:	454c      	cmp	r4, r9
 8000de0:	46c2      	mov	sl, r8
 8000de2:	464b      	mov	r3, r9
 8000de4:	d354      	bcc.n	8000e90 <__udivmoddi4+0x298>
 8000de6:	d051      	beq.n	8000e8c <__udivmoddi4+0x294>
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d069      	beq.n	8000ec0 <__udivmoddi4+0x2c8>
 8000dec:	ebb1 050a 	subs.w	r5, r1, sl
 8000df0:	eb64 0403 	sbc.w	r4, r4, r3
 8000df4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df8:	40fd      	lsrs	r5, r7
 8000dfa:	40fc      	lsrs	r4, r7
 8000dfc:	ea4c 0505 	orr.w	r5, ip, r5
 8000e00:	e9c6 5400 	strd	r5, r4, [r6]
 8000e04:	2700      	movs	r7, #0
 8000e06:	e747      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e08:	f1c2 0320 	rsb	r3, r2, #32
 8000e0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e10:	4095      	lsls	r5, r2
 8000e12:	fa01 f002 	lsl.w	r0, r1, r2
 8000e16:	fa21 f303 	lsr.w	r3, r1, r3
 8000e1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e1e:	4338      	orrs	r0, r7
 8000e20:	0c01      	lsrs	r1, r0, #16
 8000e22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e26:	fa1f f885 	uxth.w	r8, r5
 8000e2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb07 f308 	mul.w	r3, r7, r8
 8000e36:	428b      	cmp	r3, r1
 8000e38:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x256>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e44:	d22f      	bcs.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d92d      	bls.n	8000ea6 <__udivmoddi4+0x2ae>
 8000e4a:	3f02      	subs	r7, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1acb      	subs	r3, r1, r3
 8000e50:	b281      	uxth	r1, r0
 8000e52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5e:	fb00 f308 	mul.w	r3, r0, r8
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x27e>
 8000e66:	1869      	adds	r1, r5, r1
 8000e68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e6c:	d217      	bcs.n	8000e9e <__udivmoddi4+0x2a6>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d915      	bls.n	8000e9e <__udivmoddi4+0x2a6>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4429      	add	r1, r5
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e7c:	e73b      	b.n	8000cf6 <__udivmoddi4+0xfe>
 8000e7e:	4637      	mov	r7, r6
 8000e80:	4630      	mov	r0, r6
 8000e82:	e709      	b.n	8000c98 <__udivmoddi4+0xa0>
 8000e84:	4607      	mov	r7, r0
 8000e86:	e6e7      	b.n	8000c58 <__udivmoddi4+0x60>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6fb      	b.n	8000c84 <__udivmoddi4+0x8c>
 8000e8c:	4541      	cmp	r1, r8
 8000e8e:	d2ab      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e94:	eb69 020e 	sbc.w	r2, r9, lr
 8000e98:	3801      	subs	r0, #1
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	e7a4      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000e9e:	4660      	mov	r0, ip
 8000ea0:	e7e9      	b.n	8000e76 <__udivmoddi4+0x27e>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	e795      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea6:	4667      	mov	r7, ip
 8000ea8:	e7d1      	b.n	8000e4e <__udivmoddi4+0x256>
 8000eaa:	4681      	mov	r9, r0
 8000eac:	e77c      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	442c      	add	r4, r5
 8000eb2:	e747      	b.n	8000d44 <__udivmoddi4+0x14c>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	442b      	add	r3, r5
 8000eba:	e72f      	b.n	8000d1c <__udivmoddi4+0x124>
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	e708      	b.n	8000cd2 <__udivmoddi4+0xda>
 8000ec0:	4637      	mov	r7, r6
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0xa0>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <MPU6050_Init>:
#include "MPU6050.h"
/* Raw value */
float Accel_X_RAW,Accel_Y_RAW,Accel_Z_RAW;
float Gyro_X_RAW,Gyro_Y_RAW,Gyro_Z_RAW;
void MPU6050_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af04      	add	r7, sp, #16
	uint8_t check, Data;
	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1 , &check, 1, 1000);
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	9302      	str	r3, [sp, #8]
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	1dfb      	adds	r3, r7, #7
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2301      	movs	r3, #1
 8000ede:	2275      	movs	r2, #117	; 0x75
 8000ee0:	21d0      	movs	r1, #208	; 0xd0
 8000ee2:	4814      	ldr	r0, [pc, #80]	; (8000f34 <MPU6050_Init+0x6c>)
 8000ee4:	f001 fae2 	bl	80024ac <HAL_I2C_Mem_Read>

	if (check == 104)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	2b68      	cmp	r3, #104	; 0x68
 8000eec:	d11d      	bne.n	8000f2a <MPU6050_Init+0x62>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	9302      	str	r3, [sp, #8]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	1dbb      	adds	r3, r7, #6
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	2301      	movs	r3, #1
 8000f02:	226b      	movs	r2, #107	; 0x6b
 8000f04:	21d0      	movs	r1, #208	; 0xd0
 8000f06:	480b      	ldr	r0, [pc, #44]	; (8000f34 <MPU6050_Init+0x6c>)
 8000f08:	f001 f9d6 	bl	80022b8 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 8000f0c:	2307      	movs	r3, #7
 8000f0e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8000f10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f14:	9302      	str	r3, [sp, #8]
 8000f16:	2301      	movs	r3, #1
 8000f18:	9301      	str	r3, [sp, #4]
 8000f1a:	1dbb      	adds	r3, r7, #6
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2301      	movs	r3, #1
 8000f20:	2219      	movs	r2, #25
 8000f22:	21d0      	movs	r1, #208	; 0xd0
 8000f24:	4803      	ldr	r0, [pc, #12]	; (8000f34 <MPU6050_Init+0x6c>)
 8000f26:	f001 f9c7 	bl	80022b8 <HAL_I2C_Mem_Write>
	}
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	2000020c 	.word	0x2000020c

08000f38 <MPU6050_Read_Gyro>:
	Accel->y = Accel_Y_RAW/16384.0;
	Accel->z = Accel_Z_RAW/16384.0;

}
void MPU6050_Read_Gyro(MPU6050 *Gyro)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af04      	add	r7, sp, #16
 8000f3e:	6078      	str	r0, [r7, #4]
	uint8_t Rec_Data[6];
	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8000f40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f44:	9302      	str	r3, [sp, #8]
 8000f46:	2306      	movs	r3, #6
 8000f48:	9301      	str	r3, [sp, #4]
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2301      	movs	r3, #1
 8000f52:	2243      	movs	r2, #67	; 0x43
 8000f54:	21d0      	movs	r1, #208	; 0xd0
 8000f56:	4827      	ldr	r0, [pc, #156]	; (8000ff4 <MPU6050_Read_Gyro+0xbc>)
 8000f58:	f001 faa8 	bl	80024ac <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8000f5c:	7a3b      	ldrb	r3, [r7, #8]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	7a7b      	ldrb	r3, [r7, #9]
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b21b      	sxth	r3, r3
 8000f6a:	ee07 3a90 	vmov	s15, r3
 8000f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f72:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <MPU6050_Read_Gyro+0xc0>)
 8000f74:	edc3 7a00 	vstr	s15, [r3]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8000f78:	7abb      	ldrb	r3, [r7, #10]
 8000f7a:	021b      	lsls	r3, r3, #8
 8000f7c:	b21a      	sxth	r2, r3
 8000f7e:	7afb      	ldrb	r3, [r7, #11]
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	4313      	orrs	r3, r2
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	ee07 3a90 	vmov	s15, r3
 8000f8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <MPU6050_Read_Gyro+0xc4>)
 8000f90:	edc3 7a00 	vstr	s15, [r3]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8000f94:	7b3b      	ldrb	r3, [r7, #12]
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	7b7b      	ldrb	r3, [r7, #13]
 8000f9c:	b21b      	sxth	r3, r3
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	ee07 3a90 	vmov	s15, r3
 8000fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <MPU6050_Read_Gyro+0xc8>)
 8000fac:	edc3 7a00 	vstr	s15, [r3]
	/*** convert the RAW values into dps (°/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gyro->x = Gyro_X_RAW/131.0;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MPU6050_Read_Gyro+0xc0>)
 8000fb2:	ed93 7a00 	vldr	s14, [r3]
 8000fb6:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001004 <MPU6050_Read_Gyro+0xcc>
 8000fba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	edc3 7a00 	vstr	s15, [r3]
	Gyro->y = Gyro_Y_RAW/131.0;
 8000fc4:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <MPU6050_Read_Gyro+0xc4>)
 8000fc6:	ed93 7a00 	vldr	s14, [r3]
 8000fca:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001004 <MPU6050_Read_Gyro+0xcc>
 8000fce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	edc3 7a01 	vstr	s15, [r3, #4]
	Gyro->z = Gyro_Z_RAW/131.0;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <MPU6050_Read_Gyro+0xc8>)
 8000fda:	ed93 7a00 	vldr	s14, [r3]
 8000fde:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001004 <MPU6050_Read_Gyro+0xcc>
 8000fe2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8000fec:	bf00      	nop
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	2000020c 	.word	0x2000020c
 8000ff8:	20000260 	.word	0x20000260
 8000ffc:	20000270 	.word	0x20000270
 8001000:	2000026c 	.word	0x2000026c
 8001004:	43030000 	.word	0x43030000

08001008 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	60da      	str	r2, [r3, #12]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	615a      	str	r2, [r3, #20]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001064:	2b40      	cmp	r3, #64	; 0x40
 8001066:	bf0c      	ite	eq
 8001068:	2301      	moveq	r3, #1
 800106a:	2300      	movne	r3, #0
 800106c:	b2db      	uxtb	r3, r3
}
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	460b      	mov	r3, r1
 8001084:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001086:	78fa      	ldrb	r2, [r7, #3]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	605a      	str	r2, [r3, #4]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010a4:	4907      	ldr	r1, [pc, #28]	; (80010c4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4013      	ands	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010b6:	68fb      	ldr	r3, [r7, #12]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	40023800 	.word	0x40023800

080010c8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80010d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010d4:	4907      	ldr	r1, [pc, #28]	; (80010f4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4313      	orrs	r3, r2
 80010da:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80010de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4013      	ands	r3, r2
 80010e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010e6:	68fb      	ldr	r3, [r7, #12]
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	40023800 	.word	0x40023800

080010f8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	while (LL_USART_IsActiveFlag_TC(USART1)==0)
 8001100:	bf00      	nop
 8001102:	4808      	ldr	r0, [pc, #32]	; (8001124 <__io_putchar+0x2c>)
 8001104:	f7ff ffa6 	bl	8001054 <LL_USART_IsActiveFlag_TC>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f9      	beq.n	8001102 <__io_putchar+0xa>
	{}
	LL_USART_TransmitData8(USART1,(uint8_t)ch);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	4619      	mov	r1, r3
 8001114:	4803      	ldr	r0, [pc, #12]	; (8001124 <__io_putchar+0x2c>)
 8001116:	f7ff ffb0 	bl	800107a <LL_USART_TransmitData8>

  	return ch;
 800111a:	687b      	ldr	r3, [r7, #4]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40011000 	.word	0x40011000

08001128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001128:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800112c:	b084      	sub	sp, #16
 800112e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001130:	f000 fc28 	bl	8001984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001134:	f000 f844 	bl	80011c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001138:	f000 f9ce 	bl	80014d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800113c:	f000 f97c 	bl	8001438 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001140:	f000 f89e 	bl	8001280 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001144:	f000 f8dc 	bl	8001300 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001148:	f000 f928 	bl	800139c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 800114c:	f7ff febc 	bl	8000ec8 <MPU6050_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8001150:	4816      	ldr	r0, [pc, #88]	; (80011ac <main+0x84>)
 8001152:	f002 fbfa 	bl	800394a <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001156:	4816      	ldr	r0, [pc, #88]	; (80011b0 <main+0x88>)
 8001158:	f002 fbf7 	bl	800394a <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(flag == 1)
 800115c:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <main+0x8c>)
 800115e:	f993 3000 	ldrsb.w	r3, [r3]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d1fa      	bne.n	800115c <main+0x34>
	  {
		  MPU6050_Read_Gyro(&Gyro);
 8001166:	4814      	ldr	r0, [pc, #80]	; (80011b8 <main+0x90>)
 8001168:	f7ff fee6 	bl	8000f38 <MPU6050_Read_Gyro>
		  printf("Gia tri Gyroscope: x = %f, y = %f, z = %f \n",Gyro.x,Gyro.y,Gyro.z);
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <main+0x90>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f9f9 	bl	8000568 <__aeabi_f2d>
 8001176:	4680      	mov	r8, r0
 8001178:	4689      	mov	r9, r1
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <main+0x90>)
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f9f2 	bl	8000568 <__aeabi_f2d>
 8001184:	4604      	mov	r4, r0
 8001186:	460d      	mov	r5, r1
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <main+0x90>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f9eb 	bl	8000568 <__aeabi_f2d>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800119a:	e9cd 4500 	strd	r4, r5, [sp]
 800119e:	4642      	mov	r2, r8
 80011a0:	464b      	mov	r3, r9
 80011a2:	4806      	ldr	r0, [pc, #24]	; (80011bc <main+0x94>)
 80011a4:	f004 f962 	bl	800546c <iprintf>
	  if(flag == 1)
 80011a8:	e7d8      	b.n	800115c <main+0x34>
 80011aa:	bf00      	nop
 80011ac:	200002b4 	.word	0x200002b4
 80011b0:	20000274 	.word	0x20000274
 80011b4:	200001f9 	.word	0x200001f9
 80011b8:	200002f4 	.word	0x200002f4
 80011bc:	08007220 	.word	0x08007220

080011c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b094      	sub	sp, #80	; 0x50
 80011c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c6:	f107 0320 	add.w	r3, r7, #32
 80011ca:	2230      	movs	r2, #48	; 0x30
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f003 fce8 	bl	8004ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	4b23      	ldr	r3, [pc, #140]	; (8001278 <SystemClock_Config+0xb8>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	4a22      	ldr	r2, [pc, #136]	; (8001278 <SystemClock_Config+0xb8>)
 80011ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f2:	6413      	str	r3, [r2, #64]	; 0x40
 80011f4:	4b20      	ldr	r3, [pc, #128]	; (8001278 <SystemClock_Config+0xb8>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001200:	2300      	movs	r3, #0
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <SystemClock_Config+0xbc>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800120c:	4a1b      	ldr	r2, [pc, #108]	; (800127c <SystemClock_Config+0xbc>)
 800120e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b19      	ldr	r3, [pc, #100]	; (800127c <SystemClock_Config+0xbc>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001220:	2302      	movs	r3, #2
 8001222:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001224:	2301      	movs	r3, #1
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001228:	2310      	movs	r3, #16
 800122a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800122c:	2300      	movs	r3, #0
 800122e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001230:	f107 0320 	add.w	r3, r7, #32
 8001234:	4618      	mov	r0, r3
 8001236:	f001 ff35 	bl	80030a4 <HAL_RCC_OscConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001240:	f000 f99c 	bl	800157c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001244:	230f      	movs	r3, #15
 8001246:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001248:	2300      	movs	r3, #0
 800124a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001250:	2300      	movs	r3, #0
 8001252:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f002 f990 	bl	8003584 <HAL_RCC_ClockConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800126a:	f000 f987 	bl	800157c <Error_Handler>
  }
}
 800126e:	bf00      	nop
 8001270:	3750      	adds	r7, #80	; 0x50
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800
 800127c:	40007000 	.word	0x40007000

08001280 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <MX_I2C1_Init+0x74>)
 8001286:	4a1c      	ldr	r2, [pc, #112]	; (80012f8 <MX_I2C1_Init+0x78>)
 8001288:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800128a:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <MX_I2C1_Init+0x74>)
 800128c:	4a1b      	ldr	r2, [pc, #108]	; (80012fc <MX_I2C1_Init+0x7c>)
 800128e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001290:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <MX_I2C1_Init+0x74>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <MX_I2C1_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800129c:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <MX_I2C1_Init+0x74>)
 800129e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <MX_I2C1_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <MX_I2C1_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012b0:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <MX_I2C1_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <MX_I2C1_Init+0x74>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012bc:	480d      	ldr	r0, [pc, #52]	; (80012f4 <MX_I2C1_Init+0x74>)
 80012be:	f000 fec3 	bl	8002048 <HAL_I2C_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012c8:	f000 f958 	bl	800157c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012cc:	2100      	movs	r1, #0
 80012ce:	4809      	ldr	r0, [pc, #36]	; (80012f4 <MX_I2C1_Init+0x74>)
 80012d0:	f001 fe6d 	bl	8002fae <HAL_I2CEx_ConfigAnalogFilter>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80012da:	f000 f94f 	bl	800157c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012de:	2100      	movs	r1, #0
 80012e0:	4804      	ldr	r0, [pc, #16]	; (80012f4 <MX_I2C1_Init+0x74>)
 80012e2:	f001 fea0 	bl	8003026 <HAL_I2CEx_ConfigDigitalFilter>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80012ec:	f000 f946 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	2000020c 	.word	0x2000020c
 80012f8:	40005400 	.word	0x40005400
 80012fc:	000186a0 	.word	0x000186a0

08001300 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001306:	f107 0308 	add.w	r3, r7, #8
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001314:	463b      	mov	r3, r7
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800131c:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <MX_TIM3_Init+0x94>)
 800131e:	4a1e      	ldr	r2, [pc, #120]	; (8001398 <MX_TIM3_Init+0x98>)
 8001320:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800-1;
 8001322:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <MX_TIM3_Init+0x94>)
 8001324:	f240 321f 	movw	r2, #799	; 0x31f
 8001328:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132a:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <MX_TIM3_Init+0x94>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001330:	4b18      	ldr	r3, [pc, #96]	; (8001394 <MX_TIM3_Init+0x94>)
 8001332:	f242 720f 	movw	r2, #9999	; 0x270f
 8001336:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001338:	4b16      	ldr	r3, [pc, #88]	; (8001394 <MX_TIM3_Init+0x94>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <MX_TIM3_Init+0x94>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001344:	4813      	ldr	r0, [pc, #76]	; (8001394 <MX_TIM3_Init+0x94>)
 8001346:	f002 fad5 	bl	80038f4 <HAL_TIM_Base_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001350:	f000 f914 	bl	800157c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001358:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800135a:	f107 0308 	add.w	r3, r7, #8
 800135e:	4619      	mov	r1, r3
 8001360:	480c      	ldr	r0, [pc, #48]	; (8001394 <MX_TIM3_Init+0x94>)
 8001362:	f002 fc1e 	bl	8003ba2 <HAL_TIM_ConfigClockSource>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800136c:	f000 f906 	bl	800157c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001370:	2300      	movs	r3, #0
 8001372:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001378:	463b      	mov	r3, r7
 800137a:	4619      	mov	r1, r3
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_TIM3_Init+0x94>)
 800137e:	f002 fe33 	bl	8003fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001388:	f000 f8f8 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200002b4 	.word	0x200002b4
 8001398:	40000400 	.word	0x40000400

0800139c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b0:	463b      	mov	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013b8:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <MX_TIM4_Init+0x94>)
 80013ba:	4a1e      	ldr	r2, [pc, #120]	; (8001434 <MX_TIM4_Init+0x98>)
 80013bc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 80013be:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <MX_TIM4_Init+0x94>)
 80013c0:	220f      	movs	r2, #15
 80013c2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c4:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <MX_TIM4_Init+0x94>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 80013ca:	4b19      	ldr	r3, [pc, #100]	; (8001430 <MX_TIM4_Init+0x94>)
 80013cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80013d0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <MX_TIM4_Init+0x94>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d8:	4b15      	ldr	r3, [pc, #84]	; (8001430 <MX_TIM4_Init+0x94>)
 80013da:	2200      	movs	r2, #0
 80013dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013de:	4814      	ldr	r0, [pc, #80]	; (8001430 <MX_TIM4_Init+0x94>)
 80013e0:	f002 fa88 	bl	80038f4 <HAL_TIM_Base_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80013ea:	f000 f8c7 	bl	800157c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013f4:	f107 0308 	add.w	r3, r7, #8
 80013f8:	4619      	mov	r1, r3
 80013fa:	480d      	ldr	r0, [pc, #52]	; (8001430 <MX_TIM4_Init+0x94>)
 80013fc:	f002 fbd1 	bl	8003ba2 <HAL_TIM_ConfigClockSource>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001406:	f000 f8b9 	bl	800157c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001412:	463b      	mov	r3, r7
 8001414:	4619      	mov	r1, r3
 8001416:	4806      	ldr	r0, [pc, #24]	; (8001430 <MX_TIM4_Init+0x94>)
 8001418:	f002 fde6 	bl	8003fe8 <HAL_TIMEx_MasterConfigSynchronization>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001422:	f000 f8ab 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000274 	.word	0x20000274
 8001434:	40000800 	.word	0x40000800

08001438 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08e      	sub	sp, #56	; 0x38
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]
 800144e:	615a      	str	r2, [r3, #20]
 8001450:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
 8001460:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001462:	2010      	movs	r0, #16
 8001464:	f7ff fe30 	bl	80010c8 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001468:	2001      	movs	r0, #1
 800146a:	f7ff fe15 	bl	8001098 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 800146e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001472:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001474:	2302      	movs	r3, #2
 8001476:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001484:	2307      	movs	r3, #7
 8001486:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	4619      	mov	r1, r3
 800148c:	4810      	ldr	r0, [pc, #64]	; (80014d0 <MX_USART1_UART_Init+0x98>)
 800148e:	f002 ff40 	bl	8004312 <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001492:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001496:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001498:	2300      	movs	r3, #0
 800149a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800149c:	2300      	movs	r3, #0
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80014a4:	230c      	movs	r3, #12
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80014ac:	2300      	movs	r3, #0
 80014ae:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	4619      	mov	r1, r3
 80014b6:	4807      	ldr	r0, [pc, #28]	; (80014d4 <MX_USART1_UART_Init+0x9c>)
 80014b8:	f003 fab8 	bl	8004a2c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80014bc:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_USART1_UART_Init+0x9c>)
 80014be:	f7ff fdb3 	bl	8001028 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80014c2:	4804      	ldr	r0, [pc, #16]	; (80014d4 <MX_USART1_UART_Init+0x9c>)
 80014c4:	f7ff fda0 	bl	8001008 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014c8:	bf00      	nop
 80014ca:	3738      	adds	r7, #56	; 0x38
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40020000 	.word	0x40020000
 80014d4:	40011000 	.word	0x40011000

080014d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	4b20      	ldr	r3, [pc, #128]	; (8001574 <MX_GPIO_Init+0x9c>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a1f      	ldr	r2, [pc, #124]	; (8001574 <MX_GPIO_Init+0x9c>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <MX_GPIO_Init+0x9c>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
 800150e:	4b19      	ldr	r3, [pc, #100]	; (8001574 <MX_GPIO_Init+0x9c>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a18      	ldr	r2, [pc, #96]	; (8001574 <MX_GPIO_Init+0x9c>)
 8001514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <MX_GPIO_Init+0x9c>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	4b12      	ldr	r3, [pc, #72]	; (8001574 <MX_GPIO_Init+0x9c>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a11      	ldr	r2, [pc, #68]	; (8001574 <MX_GPIO_Init+0x9c>)
 8001530:	f043 0302 	orr.w	r3, r3, #2
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <MX_GPIO_Init+0x9c>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001548:	480b      	ldr	r0, [pc, #44]	; (8001578 <MX_GPIO_Init+0xa0>)
 800154a:	f000 fd49 	bl	8001fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800154e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001552:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001554:	2301      	movs	r3, #1
 8001556:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	4619      	mov	r1, r3
 8001566:	4804      	ldr	r0, [pc, #16]	; (8001578 <MX_GPIO_Init+0xa0>)
 8001568:	f000 fb90 	bl	8001c8c <HAL_GPIO_Init>

}
 800156c:	bf00      	nop
 800156e:	3720      	adds	r7, #32
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40023800 	.word	0x40023800
 8001578:	40021800 	.word	0x40021800

0800157c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001580:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001582:	e7fe      	b.n	8001582 <Error_Handler+0x6>

08001584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <HAL_MspInit+0x4c>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	4a0f      	ldr	r2, [pc, #60]	; (80015d0 <HAL_MspInit+0x4c>)
 8001594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001598:	6453      	str	r3, [r2, #68]	; 0x44
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <HAL_MspInit+0x4c>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <HAL_MspInit+0x4c>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <HAL_MspInit+0x4c>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_MspInit+0x4c>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800

080015d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a19      	ldr	r2, [pc, #100]	; (8001658 <HAL_I2C_MspInit+0x84>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d12b      	bne.n	800164e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_I2C_MspInit+0x88>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a17      	ldr	r2, [pc, #92]	; (800165c <HAL_I2C_MspInit+0x88>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_I2C_MspInit+0x88>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001612:	23c0      	movs	r3, #192	; 0xc0
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001616:	2312      	movs	r3, #18
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800161a:	2301      	movs	r3, #1
 800161c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001622:	2304      	movs	r3, #4
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	480c      	ldr	r0, [pc, #48]	; (8001660 <HAL_I2C_MspInit+0x8c>)
 800162e:	f000 fb2d 	bl	8001c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <HAL_I2C_MspInit+0x88>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	4a08      	ldr	r2, [pc, #32]	; (800165c <HAL_I2C_MspInit+0x88>)
 800163c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001640:	6413      	str	r3, [r2, #64]	; 0x40
 8001642:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_I2C_MspInit+0x88>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800164e:	bf00      	nop
 8001650:	3728      	adds	r7, #40	; 0x28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40005400 	.word	0x40005400
 800165c:	40023800 	.word	0x40023800
 8001660:	40020400 	.word	0x40020400

08001664 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a1c      	ldr	r2, [pc, #112]	; (80016e4 <HAL_TIM_Base_MspInit+0x80>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d116      	bne.n	80016a4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <HAL_TIM_Base_MspInit+0x84>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	4a1a      	ldr	r2, [pc, #104]	; (80016e8 <HAL_TIM_Base_MspInit+0x84>)
 8001680:	f043 0302 	orr.w	r3, r3, #2
 8001684:	6413      	str	r3, [r2, #64]	; 0x40
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <HAL_TIM_Base_MspInit+0x84>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001692:	2200      	movs	r2, #0
 8001694:	2100      	movs	r1, #0
 8001696:	201d      	movs	r0, #29
 8001698:	f000 fac1 	bl	8001c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800169c:	201d      	movs	r0, #29
 800169e:	f000 fada 	bl	8001c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80016a2:	e01a      	b.n	80016da <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a10      	ldr	r2, [pc, #64]	; (80016ec <HAL_TIM_Base_MspInit+0x88>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d115      	bne.n	80016da <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <HAL_TIM_Base_MspInit+0x84>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	4a0c      	ldr	r2, [pc, #48]	; (80016e8 <HAL_TIM_Base_MspInit+0x84>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	6413      	str	r3, [r2, #64]	; 0x40
 80016be:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <HAL_TIM_Base_MspInit+0x84>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2100      	movs	r1, #0
 80016ce:	201e      	movs	r0, #30
 80016d0:	f000 faa5 	bl	8001c1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016d4:	201e      	movs	r0, #30
 80016d6:	f000 fabe 	bl	8001c56 <HAL_NVIC_EnableIRQ>
}
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40000400 	.word	0x40000400
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40000800 	.word	0x40000800

080016f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <NMI_Handler+0x4>

080016f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fa:	e7fe      	b.n	80016fa <HardFault_Handler+0x4>

080016fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <MemManage_Handler+0x4>

08001702 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <BusFault_Handler+0x4>

08001708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <UsageFault_Handler+0x4>

0800170e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800173c:	f000 f974 	bl	8001a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}

08001744 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001748:	4804      	ldr	r0, [pc, #16]	; (800175c <TIM3_IRQHandler+0x18>)
 800174a:	f002 f922 	bl	8003992 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 800174e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001752:	4803      	ldr	r0, [pc, #12]	; (8001760 <TIM3_IRQHandler+0x1c>)
 8001754:	f000 fc5d 	bl	8002012 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}
 800175c:	200002b4 	.word	0x200002b4
 8001760:	40021800 	.word	0x40021800

08001764 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001768:	4810      	ldr	r0, [pc, #64]	; (80017ac <TIM4_IRQHandler+0x48>)
 800176a:	f002 f912 	bl	8003992 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 800176e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001772:	480f      	ldr	r0, [pc, #60]	; (80017b0 <TIM4_IRQHandler+0x4c>)
 8001774:	f000 fc4d 	bl	8002012 <HAL_GPIO_TogglePin>
  count++;
 8001778:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <TIM4_IRQHandler+0x50>)
 800177a:	f993 3000 	ldrsb.w	r3, [r3]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	3301      	adds	r3, #1
 8001782:	b2db      	uxtb	r3, r3
 8001784:	b25a      	sxtb	r2, r3
 8001786:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <TIM4_IRQHandler+0x50>)
 8001788:	701a      	strb	r2, [r3, #0]
  flag = 0;
 800178a:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <TIM4_IRQHandler+0x54>)
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
  if(count == 10)
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <TIM4_IRQHandler+0x50>)
 8001792:	f993 3000 	ldrsb.w	r3, [r3]
 8001796:	2b0a      	cmp	r3, #10
 8001798:	d105      	bne.n	80017a6 <TIM4_IRQHandler+0x42>
  {
	  count = 0;
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <TIM4_IRQHandler+0x50>)
 800179c:	2200      	movs	r2, #0
 800179e:	701a      	strb	r2, [r3, #0]
	  flag = 1;
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <TIM4_IRQHandler+0x54>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END TIM4_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000274 	.word	0x20000274
 80017b0:	40021800 	.word	0x40021800
 80017b4:	200001f8 	.word	0x200001f8
 80017b8:	200001f9 	.word	0x200001f9

080017bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	e00a      	b.n	80017e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017ce:	f3af 8000 	nop.w
 80017d2:	4601      	mov	r1, r0
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	60ba      	str	r2, [r7, #8]
 80017da:	b2ca      	uxtb	r2, r1
 80017dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	3301      	adds	r3, #1
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	dbf0      	blt.n	80017ce <_read+0x12>
	}

return len;
 80017ec:	687b      	ldr	r3, [r7, #4]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b086      	sub	sp, #24
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	60f8      	str	r0, [r7, #12]
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	e009      	b.n	800181c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	60ba      	str	r2, [r7, #8]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fc71 	bl	80010f8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3301      	adds	r3, #1
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	429a      	cmp	r2, r3
 8001822:	dbf1      	blt.n	8001808 <_write+0x12>
	}
	return len;
 8001824:	687b      	ldr	r3, [r7, #4]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <_close>:

int _close(int file)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
	return -1;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001856:	605a      	str	r2, [r3, #4]
	return 0;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <_isatty>:

int _isatty(int file)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
	return 1;
 800186e:	2301      	movs	r3, #1
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
	return 0;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a0:	4a14      	ldr	r2, [pc, #80]	; (80018f4 <_sbrk+0x5c>)
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <_sbrk+0x60>)
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <_sbrk+0x64>)
 80018b6:	4a12      	ldr	r2, [pc, #72]	; (8001900 <_sbrk+0x68>)
 80018b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d207      	bcs.n	80018d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c8:	f003 f942 	bl	8004b50 <__errno>
 80018cc:	4602      	mov	r2, r0
 80018ce:	230c      	movs	r3, #12
 80018d0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
 80018d6:	e009      	b.n	80018ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <_sbrk+0x64>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018de:	4b07      	ldr	r3, [pc, #28]	; (80018fc <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	4a05      	ldr	r2, [pc, #20]	; (80018fc <_sbrk+0x64>)
 80018e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ea:	68fb      	ldr	r3, [r7, #12]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20030000 	.word	0x20030000
 80018f8:	00000400 	.word	0x00000400
 80018fc:	200001fc 	.word	0x200001fc
 8001900:	20000308 	.word	0x20000308

08001904 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <SystemInit+0x28>)
 800190a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800190e:	4a07      	ldr	r2, [pc, #28]	; (800192c <SystemInit+0x28>)
 8001910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <SystemInit+0x28>)
 800191a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800191e:	609a      	str	r2, [r3, #8]
#endif
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001968 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001934:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001936:	e003      	b.n	8001940 <LoopCopyDataInit>

08001938 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800193a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800193c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800193e:	3104      	adds	r1, #4

08001940 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001940:	480b      	ldr	r0, [pc, #44]	; (8001970 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001944:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001946:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001948:	d3f6      	bcc.n	8001938 <CopyDataInit>
  ldr  r2, =_sbss
 800194a:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800194c:	e002      	b.n	8001954 <LoopFillZerobss>

0800194e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800194e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001950:	f842 3b04 	str.w	r3, [r2], #4

08001954 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001956:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001958:	d3f9      	bcc.n	800194e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800195a:	f7ff ffd3 	bl	8001904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800195e:	f003 f8fd 	bl	8004b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001962:	f7ff fbe1 	bl	8001128 <main>
  bx  lr    
 8001966:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001968:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800196c:	08007538 	.word	0x08007538
  ldr  r0, =_sdata
 8001970:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001974:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001978:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 800197c:	20000308 	.word	0x20000308

08001980 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001980:	e7fe      	b.n	8001980 <ADC_IRQHandler>
	...

08001984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001988:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <HAL_Init+0x40>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0d      	ldr	r2, [pc, #52]	; (80019c4 <HAL_Init+0x40>)
 800198e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001992:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_Init+0x40>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <HAL_Init+0x40>)
 800199a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800199e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <HAL_Init+0x40>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <HAL_Init+0x40>)
 80019a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ac:	2003      	movs	r0, #3
 80019ae:	f000 f92b 	bl	8001c08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b2:	2000      	movs	r0, #0
 80019b4:	f000 f808 	bl	80019c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b8:	f7ff fde4 	bl	8001584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023c00 	.word	0x40023c00

080019c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_InitTick+0x54>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_InitTick+0x58>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4619      	mov	r1, r3
 80019da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019de:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 f943 	bl	8001c72 <HAL_SYSTICK_Config>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e00e      	b.n	8001a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b0f      	cmp	r3, #15
 80019fa:	d80a      	bhi.n	8001a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019fc:	2200      	movs	r2, #0
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295
 8001a04:	f000 f90b 	bl	8001c1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a08:	4a06      	ldr	r2, [pc, #24]	; (8001a24 <HAL_InitTick+0x5c>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e000      	b.n	8001a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	20000008 	.word	0x20000008
 8001a24:	20000004 	.word	0x20000004

08001a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_IncTick+0x20>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_IncTick+0x24>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <HAL_IncTick+0x24>)
 8001a3a:	6013      	str	r3, [r2, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000008 	.word	0x20000008
 8001a4c:	20000300 	.word	0x20000300

08001a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return uwTick;
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <HAL_GetTick+0x14>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20000300 	.word	0x20000300

08001a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a84:	4013      	ands	r3, r2
 8001a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9a:	4a04      	ldr	r2, [pc, #16]	; (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	60d3      	str	r3, [r2, #12]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	f003 0307 	and.w	r3, r3, #7
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	db0b      	blt.n	8001af6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	4907      	ldr	r1, [pc, #28]	; (8001b04 <__NVIC_EnableIRQ+0x38>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	095b      	lsrs	r3, r3, #5
 8001aec:	2001      	movs	r0, #1
 8001aee:	fa00 f202 	lsl.w	r2, r0, r2
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000e100 	.word	0xe000e100

08001b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	db0a      	blt.n	8001b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	b2da      	uxtb	r2, r3
 8001b20:	490c      	ldr	r1, [pc, #48]	; (8001b54 <__NVIC_SetPriority+0x4c>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	0112      	lsls	r2, r2, #4
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b30:	e00a      	b.n	8001b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4908      	ldr	r1, [pc, #32]	; (8001b58 <__NVIC_SetPriority+0x50>)
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	3b04      	subs	r3, #4
 8001b40:	0112      	lsls	r2, r2, #4
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	440b      	add	r3, r1
 8001b46:	761a      	strb	r2, [r3, #24]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000e100 	.word	0xe000e100
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b089      	sub	sp, #36	; 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f1c3 0307 	rsb	r3, r3, #7
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	bf28      	it	cs
 8001b7a:	2304      	movcs	r3, #4
 8001b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3304      	adds	r3, #4
 8001b82:	2b06      	cmp	r3, #6
 8001b84:	d902      	bls.n	8001b8c <NVIC_EncodePriority+0x30>
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3b03      	subs	r3, #3
 8001b8a:	e000      	b.n	8001b8e <NVIC_EncodePriority+0x32>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	f04f 32ff 	mov.w	r2, #4294967295
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43da      	mvns	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bae:	43d9      	mvns	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	4313      	orrs	r3, r2
         );
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3724      	adds	r7, #36	; 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd4:	d301      	bcc.n	8001bda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e00f      	b.n	8001bfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bda:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <SysTick_Config+0x40>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001be2:	210f      	movs	r1, #15
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f7ff ff8e 	bl	8001b08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <SysTick_Config+0x40>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bf2:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <SysTick_Config+0x40>)
 8001bf4:	2207      	movs	r2, #7
 8001bf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	e000e010 	.word	0xe000e010

08001c08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ff29 	bl	8001a68 <__NVIC_SetPriorityGrouping>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c30:	f7ff ff3e 	bl	8001ab0 <__NVIC_GetPriorityGrouping>
 8001c34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68b9      	ldr	r1, [r7, #8]
 8001c3a:	6978      	ldr	r0, [r7, #20]
 8001c3c:	f7ff ff8e 	bl	8001b5c <NVIC_EncodePriority>
 8001c40:	4602      	mov	r2, r0
 8001c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff5d 	bl	8001b08 <__NVIC_SetPriority>
}
 8001c4e:	bf00      	nop
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff31 	bl	8001acc <__NVIC_EnableIRQ>
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff ffa2 	bl	8001bc4 <SysTick_Config>
 8001c80:	4603      	mov	r3, r0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b089      	sub	sp, #36	; 0x24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	e177      	b.n	8001f98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ca8:	2201      	movs	r2, #1
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	f040 8166 	bne.w	8001f92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d00b      	beq.n	8001ce6 <HAL_GPIO_Init+0x5a>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d007      	beq.n	8001ce6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cda:	2b11      	cmp	r3, #17
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b12      	cmp	r3, #18
 8001ce4:	d130      	bne.n	8001d48 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	091b      	lsrs	r3, r3, #4
 8001d32:	f003 0201 	and.w	r2, r3, #1
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	2203      	movs	r2, #3
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0xfc>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b12      	cmp	r3, #18
 8001d86:	d123      	bne.n	8001dd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	08da      	lsrs	r2, r3, #3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3208      	adds	r2, #8
 8001d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	220f      	movs	r2, #15
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	691a      	ldr	r2, [r3, #16]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	08da      	lsrs	r2, r3, #3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3208      	adds	r2, #8
 8001dca:	69b9      	ldr	r1, [r7, #24]
 8001dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2203      	movs	r2, #3
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0203 	and.w	r2, r3, #3
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 80c0 	beq.w	8001f92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b65      	ldr	r3, [pc, #404]	; (8001fac <HAL_GPIO_Init+0x320>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	4a64      	ldr	r2, [pc, #400]	; (8001fac <HAL_GPIO_Init+0x320>)
 8001e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e20:	6453      	str	r3, [r2, #68]	; 0x44
 8001e22:	4b62      	ldr	r3, [pc, #392]	; (8001fac <HAL_GPIO_Init+0x320>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e2e:	4a60      	ldr	r2, [pc, #384]	; (8001fb0 <HAL_GPIO_Init+0x324>)
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	089b      	lsrs	r3, r3, #2
 8001e34:	3302      	adds	r3, #2
 8001e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	220f      	movs	r2, #15
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a57      	ldr	r2, [pc, #348]	; (8001fb4 <HAL_GPIO_Init+0x328>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d037      	beq.n	8001eca <HAL_GPIO_Init+0x23e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a56      	ldr	r2, [pc, #344]	; (8001fb8 <HAL_GPIO_Init+0x32c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d031      	beq.n	8001ec6 <HAL_GPIO_Init+0x23a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a55      	ldr	r2, [pc, #340]	; (8001fbc <HAL_GPIO_Init+0x330>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d02b      	beq.n	8001ec2 <HAL_GPIO_Init+0x236>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a54      	ldr	r2, [pc, #336]	; (8001fc0 <HAL_GPIO_Init+0x334>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d025      	beq.n	8001ebe <HAL_GPIO_Init+0x232>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a53      	ldr	r2, [pc, #332]	; (8001fc4 <HAL_GPIO_Init+0x338>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d01f      	beq.n	8001eba <HAL_GPIO_Init+0x22e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a52      	ldr	r2, [pc, #328]	; (8001fc8 <HAL_GPIO_Init+0x33c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d019      	beq.n	8001eb6 <HAL_GPIO_Init+0x22a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a51      	ldr	r2, [pc, #324]	; (8001fcc <HAL_GPIO_Init+0x340>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d013      	beq.n	8001eb2 <HAL_GPIO_Init+0x226>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a50      	ldr	r2, [pc, #320]	; (8001fd0 <HAL_GPIO_Init+0x344>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d00d      	beq.n	8001eae <HAL_GPIO_Init+0x222>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a4f      	ldr	r2, [pc, #316]	; (8001fd4 <HAL_GPIO_Init+0x348>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d007      	beq.n	8001eaa <HAL_GPIO_Init+0x21e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4e      	ldr	r2, [pc, #312]	; (8001fd8 <HAL_GPIO_Init+0x34c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d101      	bne.n	8001ea6 <HAL_GPIO_Init+0x21a>
 8001ea2:	2309      	movs	r3, #9
 8001ea4:	e012      	b.n	8001ecc <HAL_GPIO_Init+0x240>
 8001ea6:	230a      	movs	r3, #10
 8001ea8:	e010      	b.n	8001ecc <HAL_GPIO_Init+0x240>
 8001eaa:	2308      	movs	r3, #8
 8001eac:	e00e      	b.n	8001ecc <HAL_GPIO_Init+0x240>
 8001eae:	2307      	movs	r3, #7
 8001eb0:	e00c      	b.n	8001ecc <HAL_GPIO_Init+0x240>
 8001eb2:	2306      	movs	r3, #6
 8001eb4:	e00a      	b.n	8001ecc <HAL_GPIO_Init+0x240>
 8001eb6:	2305      	movs	r3, #5
 8001eb8:	e008      	b.n	8001ecc <HAL_GPIO_Init+0x240>
 8001eba:	2304      	movs	r3, #4
 8001ebc:	e006      	b.n	8001ecc <HAL_GPIO_Init+0x240>
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e004      	b.n	8001ecc <HAL_GPIO_Init+0x240>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e002      	b.n	8001ecc <HAL_GPIO_Init+0x240>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <HAL_GPIO_Init+0x240>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	69fa      	ldr	r2, [r7, #28]
 8001ece:	f002 0203 	and.w	r2, r2, #3
 8001ed2:	0092      	lsls	r2, r2, #2
 8001ed4:	4093      	lsls	r3, r2
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001edc:	4934      	ldr	r1, [pc, #208]	; (8001fb0 <HAL_GPIO_Init+0x324>)
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eea:	4b3c      	ldr	r3, [pc, #240]	; (8001fdc <HAL_GPIO_Init+0x350>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f0e:	4a33      	ldr	r2, [pc, #204]	; (8001fdc <HAL_GPIO_Init+0x350>)
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f14:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <HAL_GPIO_Init+0x350>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f38:	4a28      	ldr	r2, [pc, #160]	; (8001fdc <HAL_GPIO_Init+0x350>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f3e:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <HAL_GPIO_Init+0x350>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f62:	4a1e      	ldr	r2, [pc, #120]	; (8001fdc <HAL_GPIO_Init+0x350>)
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f68:	4b1c      	ldr	r3, [pc, #112]	; (8001fdc <HAL_GPIO_Init+0x350>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f8c:	4a13      	ldr	r2, [pc, #76]	; (8001fdc <HAL_GPIO_Init+0x350>)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	3301      	adds	r3, #1
 8001f96:	61fb      	str	r3, [r7, #28]
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	2b0f      	cmp	r3, #15
 8001f9c:	f67f ae84 	bls.w	8001ca8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fa0:	bf00      	nop
 8001fa2:	3724      	adds	r7, #36	; 0x24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40013800 	.word	0x40013800
 8001fb4:	40020000 	.word	0x40020000
 8001fb8:	40020400 	.word	0x40020400
 8001fbc:	40020800 	.word	0x40020800
 8001fc0:	40020c00 	.word	0x40020c00
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40021400 	.word	0x40021400
 8001fcc:	40021800 	.word	0x40021800
 8001fd0:	40021c00 	.word	0x40021c00
 8001fd4:	40022000 	.word	0x40022000
 8001fd8:	40022400 	.word	0x40022400
 8001fdc:	40013c00 	.word	0x40013c00

08001fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	807b      	strh	r3, [r7, #2]
 8001fec:	4613      	mov	r3, r2
 8001fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ff0:	787b      	ldrb	r3, [r7, #1]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ff6:	887a      	ldrh	r2, [r7, #2]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ffc:	e003      	b.n	8002006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ffe:	887b      	ldrh	r3, [r7, #2]
 8002000:	041a      	lsls	r2, r3, #16
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	619a      	str	r2, [r3, #24]
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	460b      	mov	r3, r1
 800201c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695a      	ldr	r2, [r3, #20]
 8002022:	887b      	ldrh	r3, [r7, #2]
 8002024:	401a      	ands	r2, r3
 8002026:	887b      	ldrh	r3, [r7, #2]
 8002028:	429a      	cmp	r2, r3
 800202a:	d104      	bne.n	8002036 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800202c:	887b      	ldrh	r3, [r7, #2]
 800202e:	041a      	lsls	r2, r3, #16
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002034:	e002      	b.n	800203c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002036:	887a      	ldrh	r2, [r7, #2]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	619a      	str	r2, [r3, #24]
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e11f      	b.n	800229a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff fab0 	bl	80015d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2224      	movs	r2, #36	; 0x24
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0201 	bic.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800209a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020ac:	f001 fc0e 	bl	80038cc <HAL_RCC_GetPCLK1Freq>
 80020b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4a7b      	ldr	r2, [pc, #492]	; (80022a4 <HAL_I2C_Init+0x25c>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d807      	bhi.n	80020cc <HAL_I2C_Init+0x84>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4a7a      	ldr	r2, [pc, #488]	; (80022a8 <HAL_I2C_Init+0x260>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	bf94      	ite	ls
 80020c4:	2301      	movls	r3, #1
 80020c6:	2300      	movhi	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	e006      	b.n	80020da <HAL_I2C_Init+0x92>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4a77      	ldr	r2, [pc, #476]	; (80022ac <HAL_I2C_Init+0x264>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	bf94      	ite	ls
 80020d4:	2301      	movls	r3, #1
 80020d6:	2300      	movhi	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e0db      	b.n	800229a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	4a72      	ldr	r2, [pc, #456]	; (80022b0 <HAL_I2C_Init+0x268>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	0c9b      	lsrs	r3, r3, #18
 80020ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68ba      	ldr	r2, [r7, #8]
 80020fe:	430a      	orrs	r2, r1
 8002100:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4a64      	ldr	r2, [pc, #400]	; (80022a4 <HAL_I2C_Init+0x25c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d802      	bhi.n	800211c <HAL_I2C_Init+0xd4>
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	3301      	adds	r3, #1
 800211a:	e009      	b.n	8002130 <HAL_I2C_Init+0xe8>
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	4a63      	ldr	r2, [pc, #396]	; (80022b4 <HAL_I2C_Init+0x26c>)
 8002128:	fba2 2303 	umull	r2, r3, r2, r3
 800212c:	099b      	lsrs	r3, r3, #6
 800212e:	3301      	adds	r3, #1
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	430b      	orrs	r3, r1
 8002136:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002142:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	4956      	ldr	r1, [pc, #344]	; (80022a4 <HAL_I2C_Init+0x25c>)
 800214c:	428b      	cmp	r3, r1
 800214e:	d80d      	bhi.n	800216c <HAL_I2C_Init+0x124>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1e59      	subs	r1, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	fbb1 f3f3 	udiv	r3, r1, r3
 800215e:	3301      	adds	r3, #1
 8002160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002164:	2b04      	cmp	r3, #4
 8002166:	bf38      	it	cc
 8002168:	2304      	movcc	r3, #4
 800216a:	e04f      	b.n	800220c <HAL_I2C_Init+0x1c4>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d111      	bne.n	8002198 <HAL_I2C_Init+0x150>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	1e58      	subs	r0, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6859      	ldr	r1, [r3, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	440b      	add	r3, r1
 8002182:	fbb0 f3f3 	udiv	r3, r0, r3
 8002186:	3301      	adds	r3, #1
 8002188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf0c      	ite	eq
 8002190:	2301      	moveq	r3, #1
 8002192:	2300      	movne	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	e012      	b.n	80021be <HAL_I2C_Init+0x176>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1e58      	subs	r0, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6859      	ldr	r1, [r3, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	0099      	lsls	r1, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ae:	3301      	adds	r3, #1
 80021b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	bf0c      	ite	eq
 80021b8:	2301      	moveq	r3, #1
 80021ba:	2300      	movne	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_I2C_Init+0x17e>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e022      	b.n	800220c <HAL_I2C_Init+0x1c4>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10e      	bne.n	80021ec <HAL_I2C_Init+0x1a4>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1e58      	subs	r0, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6859      	ldr	r1, [r3, #4]
 80021d6:	460b      	mov	r3, r1
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	440b      	add	r3, r1
 80021dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e0:	3301      	adds	r3, #1
 80021e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ea:	e00f      	b.n	800220c <HAL_I2C_Init+0x1c4>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1e58      	subs	r0, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6859      	ldr	r1, [r3, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	0099      	lsls	r1, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002202:	3301      	adds	r3, #1
 8002204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002208:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	6809      	ldr	r1, [r1, #0]
 8002210:	4313      	orrs	r3, r2
 8002212:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69da      	ldr	r2, [r3, #28]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	431a      	orrs	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800223a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6911      	ldr	r1, [r2, #16]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	68d2      	ldr	r2, [r2, #12]
 8002246:	4311      	orrs	r1, r2
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	430b      	orrs	r3, r1
 800224e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695a      	ldr	r2, [r3, #20]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2220      	movs	r2, #32
 8002286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	000186a0 	.word	0x000186a0
 80022a8:	001e847f 	.word	0x001e847f
 80022ac:	003d08ff 	.word	0x003d08ff
 80022b0:	431bde83 	.word	0x431bde83
 80022b4:	10624dd3 	.word	0x10624dd3

080022b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af02      	add	r7, sp, #8
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	4608      	mov	r0, r1
 80022c2:	4611      	mov	r1, r2
 80022c4:	461a      	mov	r2, r3
 80022c6:	4603      	mov	r3, r0
 80022c8:	817b      	strh	r3, [r7, #10]
 80022ca:	460b      	mov	r3, r1
 80022cc:	813b      	strh	r3, [r7, #8]
 80022ce:	4613      	mov	r3, r2
 80022d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022d2:	f7ff fbbd 	bl	8001a50 <HAL_GetTick>
 80022d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b20      	cmp	r3, #32
 80022e2:	f040 80d9 	bne.w	8002498 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	2319      	movs	r3, #25
 80022ec:	2201      	movs	r2, #1
 80022ee:	496d      	ldr	r1, [pc, #436]	; (80024a4 <HAL_I2C_Mem_Write+0x1ec>)
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 fc7f 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80022fc:	2302      	movs	r3, #2
 80022fe:	e0cc      	b.n	800249a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <HAL_I2C_Mem_Write+0x56>
 800230a:	2302      	movs	r3, #2
 800230c:	e0c5      	b.n	800249a <HAL_I2C_Mem_Write+0x1e2>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b01      	cmp	r3, #1
 8002322:	d007      	beq.n	8002334 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002342:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2221      	movs	r2, #33	; 0x21
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2240      	movs	r2, #64	; 0x40
 8002350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a3a      	ldr	r2, [r7, #32]
 800235e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002364:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236a:	b29a      	uxth	r2, r3
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4a4d      	ldr	r2, [pc, #308]	; (80024a8 <HAL_I2C_Mem_Write+0x1f0>)
 8002374:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002376:	88f8      	ldrh	r0, [r7, #6]
 8002378:	893a      	ldrh	r2, [r7, #8]
 800237a:	8979      	ldrh	r1, [r7, #10]
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	9301      	str	r3, [sp, #4]
 8002380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	4603      	mov	r3, r0
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 fab6 	bl	80028f8 <I2C_RequestMemoryWrite>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d052      	beq.n	8002438 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e081      	b.n	800249a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 fd00 	bl	8002da0 <I2C_WaitOnTXEFlagUntilTimeout>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00d      	beq.n	80023c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d107      	bne.n	80023be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e06b      	b.n	800249a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	781a      	ldrb	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	d11b      	bne.n	8002438 <HAL_I2C_Mem_Write+0x180>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002404:	2b00      	cmp	r3, #0
 8002406:	d017      	beq.n	8002438 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	781a      	ldrb	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242e:	b29b      	uxth	r3, r3
 8002430:	3b01      	subs	r3, #1
 8002432:	b29a      	uxth	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1aa      	bne.n	8002396 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 fcec 	bl	8002e22 <I2C_WaitOnBTFFlagUntilTimeout>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00d      	beq.n	800246c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	2b04      	cmp	r3, #4
 8002456:	d107      	bne.n	8002468 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002466:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e016      	b.n	800249a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800247a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2220      	movs	r2, #32
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	e000      	b.n	800249a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002498:	2302      	movs	r3, #2
  }
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	00100002 	.word	0x00100002
 80024a8:	ffff0000 	.word	0xffff0000

080024ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08c      	sub	sp, #48	; 0x30
 80024b0:	af02      	add	r7, sp, #8
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	4608      	mov	r0, r1
 80024b6:	4611      	mov	r1, r2
 80024b8:	461a      	mov	r2, r3
 80024ba:	4603      	mov	r3, r0
 80024bc:	817b      	strh	r3, [r7, #10]
 80024be:	460b      	mov	r3, r1
 80024c0:	813b      	strh	r3, [r7, #8]
 80024c2:	4613      	mov	r3, r2
 80024c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024c6:	f7ff fac3 	bl	8001a50 <HAL_GetTick>
 80024ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	f040 8208 	bne.w	80028ea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	2319      	movs	r3, #25
 80024e0:	2201      	movs	r2, #1
 80024e2:	497b      	ldr	r1, [pc, #492]	; (80026d0 <HAL_I2C_Mem_Read+0x224>)
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f000 fb85 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80024f0:	2302      	movs	r3, #2
 80024f2:	e1fb      	b.n	80028ec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_I2C_Mem_Read+0x56>
 80024fe:	2302      	movs	r3, #2
 8002500:	e1f4      	b.n	80028ec <HAL_I2C_Mem_Read+0x440>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b01      	cmp	r3, #1
 8002516:	d007      	beq.n	8002528 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0201 	orr.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002536:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2222      	movs	r2, #34	; 0x22
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2240      	movs	r2, #64	; 0x40
 8002544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002552:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002558:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4a5b      	ldr	r2, [pc, #364]	; (80026d4 <HAL_I2C_Mem_Read+0x228>)
 8002568:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800256a:	88f8      	ldrh	r0, [r7, #6]
 800256c:	893a      	ldrh	r2, [r7, #8]
 800256e:	8979      	ldrh	r1, [r7, #10]
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	4603      	mov	r3, r0
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 fa52 	bl	8002a24 <I2C_RequestMemoryRead>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e1b0      	b.n	80028ec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258e:	2b00      	cmp	r3, #0
 8002590:	d113      	bne.n	80025ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002592:	2300      	movs	r3, #0
 8002594:	623b      	str	r3, [r7, #32]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	623b      	str	r3, [r7, #32]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	623b      	str	r3, [r7, #32]
 80025a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	e184      	b.n	80028c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d11b      	bne.n	80025fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	e164      	b.n	80028c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d11b      	bne.n	800263a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002610:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002620:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	61bb      	str	r3, [r7, #24]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	61bb      	str	r3, [r7, #24]
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	e144      	b.n	80028c4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002650:	e138      	b.n	80028c4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002656:	2b03      	cmp	r3, #3
 8002658:	f200 80f1 	bhi.w	800283e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002660:	2b01      	cmp	r3, #1
 8002662:	d123      	bne.n	80026ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002666:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 fc1b 	bl	8002ea4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e139      	b.n	80028ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026aa:	e10b      	b.n	80028c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d14e      	bne.n	8002752 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ba:	2200      	movs	r2, #0
 80026bc:	4906      	ldr	r1, [pc, #24]	; (80026d8 <HAL_I2C_Mem_Read+0x22c>)
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 fa98 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d008      	beq.n	80026dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e10e      	b.n	80028ec <HAL_I2C_Mem_Read+0x440>
 80026ce:	bf00      	nop
 80026d0:	00100002 	.word	0x00100002
 80026d4:	ffff0000 	.word	0xffff0000
 80026d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691a      	ldr	r2, [r3, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002714:	b29b      	uxth	r3, r3
 8002716:	3b01      	subs	r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002746:	b29b      	uxth	r3, r3
 8002748:	3b01      	subs	r3, #1
 800274a:	b29a      	uxth	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002750:	e0b8      	b.n	80028c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002758:	2200      	movs	r2, #0
 800275a:	4966      	ldr	r1, [pc, #408]	; (80028f4 <HAL_I2C_Mem_Read+0x448>)
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 fa49 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0bf      	b.n	80028ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800277a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691a      	ldr	r2, [r3, #16]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b4:	2200      	movs	r2, #0
 80027b6:	494f      	ldr	r1, [pc, #316]	; (80028f4 <HAL_I2C_Mem_Read+0x448>)
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 fa1b 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e091      	b.n	80028ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691a      	ldr	r2, [r3, #16]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	1c5a      	adds	r2, r3, #1
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002800:	b29b      	uxth	r3, r3
 8002802:	3b01      	subs	r3, #1
 8002804:	b29a      	uxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002826:	3b01      	subs	r3, #1
 8002828:	b29a      	uxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002832:	b29b      	uxth	r3, r3
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800283c:	e042      	b.n	80028c4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800283e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002840:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 fb2e 	bl	8002ea4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e04c      	b.n	80028ec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287a:	b29b      	uxth	r3, r3
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	2b04      	cmp	r3, #4
 8002890:	d118      	bne.n	80028c4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	1c5a      	adds	r2, r3, #1
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	3b01      	subs	r3, #1
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f47f aec2 	bne.w	8002652 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2220      	movs	r2, #32
 80028d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	e000      	b.n	80028ec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80028ea:	2302      	movs	r3, #2
  }
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3728      	adds	r7, #40	; 0x28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	00010004 	.word	0x00010004

080028f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	4608      	mov	r0, r1
 8002902:	4611      	mov	r1, r2
 8002904:	461a      	mov	r2, r3
 8002906:	4603      	mov	r3, r0
 8002908:	817b      	strh	r3, [r7, #10]
 800290a:	460b      	mov	r3, r1
 800290c:	813b      	strh	r3, [r7, #8]
 800290e:	4613      	mov	r3, r2
 8002910:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002920:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	2200      	movs	r2, #0
 800292a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 f960 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00d      	beq.n	8002956 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002944:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002948:	d103      	bne.n	8002952 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002950:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e05f      	b.n	8002a16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002956:	897b      	ldrh	r3, [r7, #10]
 8002958:	b2db      	uxtb	r3, r3
 800295a:	461a      	mov	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002964:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	6a3a      	ldr	r2, [r7, #32]
 800296a:	492d      	ldr	r1, [pc, #180]	; (8002a20 <I2C_RequestMemoryWrite+0x128>)
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 f998 	bl	8002ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e04c      	b.n	8002a16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002994:	6a39      	ldr	r1, [r7, #32]
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 fa02 	bl	8002da0 <I2C_WaitOnTXEFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00d      	beq.n	80029be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d107      	bne.n	80029ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e02b      	b.n	8002a16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029be:	88fb      	ldrh	r3, [r7, #6]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d105      	bne.n	80029d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029c4:	893b      	ldrh	r3, [r7, #8]
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	611a      	str	r2, [r3, #16]
 80029ce:	e021      	b.n	8002a14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029d0:	893b      	ldrh	r3, [r7, #8]
 80029d2:	0a1b      	lsrs	r3, r3, #8
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e0:	6a39      	ldr	r1, [r7, #32]
 80029e2:	68f8      	ldr	r0, [r7, #12]
 80029e4:	f000 f9dc 	bl	8002da0 <I2C_WaitOnTXEFlagUntilTimeout>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00d      	beq.n	8002a0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d107      	bne.n	8002a06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e005      	b.n	8002a16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a0a:	893b      	ldrh	r3, [r7, #8]
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	00010002 	.word	0x00010002

08002a24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af02      	add	r7, sp, #8
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	4608      	mov	r0, r1
 8002a2e:	4611      	mov	r1, r2
 8002a30:	461a      	mov	r2, r3
 8002a32:	4603      	mov	r3, r0
 8002a34:	817b      	strh	r3, [r7, #10]
 8002a36:	460b      	mov	r3, r1
 8002a38:	813b      	strh	r3, [r7, #8]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 f8c2 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00d      	beq.n	8002a92 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a84:	d103      	bne.n	8002a8e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e0aa      	b.n	8002be8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a92:	897b      	ldrh	r3, [r7, #10]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	461a      	mov	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002aa0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	6a3a      	ldr	r2, [r7, #32]
 8002aa6:	4952      	ldr	r1, [pc, #328]	; (8002bf0 <I2C_RequestMemoryRead+0x1cc>)
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 f8fa 	bl	8002ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e097      	b.n	8002be8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad0:	6a39      	ldr	r1, [r7, #32]
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 f964 	bl	8002da0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00d      	beq.n	8002afa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d107      	bne.n	8002af6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e076      	b.n	8002be8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002afa:	88fb      	ldrh	r3, [r7, #6]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d105      	bne.n	8002b0c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b00:	893b      	ldrh	r3, [r7, #8]
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	611a      	str	r2, [r3, #16]
 8002b0a:	e021      	b.n	8002b50 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b0c:	893b      	ldrh	r3, [r7, #8]
 8002b0e:	0a1b      	lsrs	r3, r3, #8
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1c:	6a39      	ldr	r1, [r7, #32]
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f93e 	bl	8002da0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00d      	beq.n	8002b46 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d107      	bne.n	8002b42 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e050      	b.n	8002be8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b46:	893b      	ldrh	r3, [r7, #8]
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b52:	6a39      	ldr	r1, [r7, #32]
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f923 	bl	8002da0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00d      	beq.n	8002b7c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d107      	bne.n	8002b78 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e035      	b.n	8002be8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b8a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f82b 	bl	8002bf4 <I2C_WaitOnFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00d      	beq.n	8002bc0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb2:	d103      	bne.n	8002bbc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e013      	b.n	8002be8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bc0:	897b      	ldrh	r3, [r7, #10]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	6a3a      	ldr	r2, [r7, #32]
 8002bd4:	4906      	ldr	r1, [pc, #24]	; (8002bf0 <I2C_RequestMemoryRead+0x1cc>)
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 f863 	bl	8002ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	00010002 	.word	0x00010002

08002bf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	4613      	mov	r3, r2
 8002c02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c04:	e025      	b.n	8002c52 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d021      	beq.n	8002c52 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c0e:	f7fe ff1f 	bl	8001a50 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d302      	bcc.n	8002c24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d116      	bne.n	8002c52 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f043 0220 	orr.w	r2, r3, #32
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e023      	b.n	8002c9a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d10d      	bne.n	8002c78 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	43da      	mvns	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	4013      	ands	r3, r2
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	bf0c      	ite	eq
 8002c6e:	2301      	moveq	r3, #1
 8002c70:	2300      	movne	r3, #0
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	461a      	mov	r2, r3
 8002c76:	e00c      	b.n	8002c92 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	43da      	mvns	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4013      	ands	r3, r2
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	bf0c      	ite	eq
 8002c8a:	2301      	moveq	r3, #1
 8002c8c:	2300      	movne	r3, #0
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d0b6      	beq.n	8002c06 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	60f8      	str	r0, [r7, #12]
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cb0:	e051      	b.n	8002d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc0:	d123      	bne.n	8002d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cda:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f043 0204 	orr.w	r2, r3, #4
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e046      	b.n	8002d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d10:	d021      	beq.n	8002d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d12:	f7fe fe9d 	bl	8001a50 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d302      	bcc.n	8002d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d116      	bne.n	8002d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2220      	movs	r2, #32
 8002d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	f043 0220 	orr.w	r2, r3, #32
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e020      	b.n	8002d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d10c      	bne.n	8002d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	43da      	mvns	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	bf14      	ite	ne
 8002d72:	2301      	movne	r3, #1
 8002d74:	2300      	moveq	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	e00b      	b.n	8002d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	43da      	mvns	r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	4013      	ands	r3, r2
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bf14      	ite	ne
 8002d8c:	2301      	movne	r3, #1
 8002d8e:	2300      	moveq	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d18d      	bne.n	8002cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dac:	e02d      	b.n	8002e0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 f8ce 	bl	8002f50 <I2C_IsAcknowledgeFailed>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e02d      	b.n	8002e1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc4:	d021      	beq.n	8002e0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc6:	f7fe fe43 	bl	8001a50 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d302      	bcc.n	8002ddc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d116      	bne.n	8002e0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	f043 0220 	orr.w	r2, r3, #32
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e007      	b.n	8002e1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e14:	2b80      	cmp	r3, #128	; 0x80
 8002e16:	d1ca      	bne.n	8002dae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b084      	sub	sp, #16
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e2e:	e02d      	b.n	8002e8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f000 f88d 	bl	8002f50 <I2C_IsAcknowledgeFailed>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e02d      	b.n	8002e9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e46:	d021      	beq.n	8002e8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e48:	f7fe fe02 	bl	8001a50 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d302      	bcc.n	8002e5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d116      	bne.n	8002e8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	f043 0220 	orr.w	r2, r3, #32
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e007      	b.n	8002e9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	d1ca      	bne.n	8002e30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002eb0:	e042      	b.n	8002f38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	f003 0310 	and.w	r3, r3, #16
 8002ebc:	2b10      	cmp	r3, #16
 8002ebe:	d119      	bne.n	8002ef4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f06f 0210 	mvn.w	r2, #16
 8002ec8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e029      	b.n	8002f48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef4:	f7fe fdac 	bl	8001a50 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d302      	bcc.n	8002f0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d116      	bne.n	8002f38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f24:	f043 0220 	orr.w	r2, r3, #32
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e007      	b.n	8002f48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f42:	2b40      	cmp	r3, #64	; 0x40
 8002f44:	d1b5      	bne.n	8002eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f66:	d11b      	bne.n	8002fa0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	f043 0204 	orr.w	r2, r3, #4
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e000      	b.n	8002fa2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b20      	cmp	r3, #32
 8002fc2:	d129      	bne.n	8003018 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2224      	movs	r2, #36	; 0x24
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0201 	bic.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0210 	bic.w	r2, r2, #16
 8002fea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	e000      	b.n	800301a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003018:	2302      	movs	r3, #2
  }
}
 800301a:	4618      	mov	r0, r3
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003026:	b480      	push	{r7}
 8003028:	b085      	sub	sp, #20
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
 800302e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003030:	2300      	movs	r3, #0
 8003032:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b20      	cmp	r3, #32
 800303e:	d12a      	bne.n	8003096 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2224      	movs	r2, #36	; 0x24
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0201 	bic.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003060:	89fb      	ldrh	r3, [r7, #14]
 8003062:	f023 030f 	bic.w	r3, r3, #15
 8003066:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	b29a      	uxth	r2, r3
 800306c:	89fb      	ldrh	r3, [r7, #14]
 800306e:	4313      	orrs	r3, r2
 8003070:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	89fa      	ldrh	r2, [r7, #14]
 8003078:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0201 	orr.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	e000      	b.n	8003098 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003096:	2302      	movs	r3, #2
  }
}
 8003098:	4618      	mov	r0, r3
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e25b      	b.n	800356e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d075      	beq.n	80031ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030c2:	4ba3      	ldr	r3, [pc, #652]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d00c      	beq.n	80030e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ce:	4ba0      	ldr	r3, [pc, #640]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d112      	bne.n	8003100 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030da:	4b9d      	ldr	r3, [pc, #628]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030e6:	d10b      	bne.n	8003100 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e8:	4b99      	ldr	r3, [pc, #612]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d05b      	beq.n	80031ac <HAL_RCC_OscConfig+0x108>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d157      	bne.n	80031ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e236      	b.n	800356e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003108:	d106      	bne.n	8003118 <HAL_RCC_OscConfig+0x74>
 800310a:	4b91      	ldr	r3, [pc, #580]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a90      	ldr	r2, [pc, #576]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	e01d      	b.n	8003154 <HAL_RCC_OscConfig+0xb0>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003120:	d10c      	bne.n	800313c <HAL_RCC_OscConfig+0x98>
 8003122:	4b8b      	ldr	r3, [pc, #556]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a8a      	ldr	r2, [pc, #552]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 8003128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	4b88      	ldr	r3, [pc, #544]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a87      	ldr	r2, [pc, #540]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 8003134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	e00b      	b.n	8003154 <HAL_RCC_OscConfig+0xb0>
 800313c:	4b84      	ldr	r3, [pc, #528]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a83      	ldr	r2, [pc, #524]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 8003142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	4b81      	ldr	r3, [pc, #516]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a80      	ldr	r2, [pc, #512]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 800314e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d013      	beq.n	8003184 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7fe fc78 	bl	8001a50 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003164:	f7fe fc74 	bl	8001a50 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	; 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e1fb      	b.n	800356e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	4b76      	ldr	r3, [pc, #472]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0xc0>
 8003182:	e014      	b.n	80031ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7fe fc64 	bl	8001a50 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800318c:	f7fe fc60 	bl	8001a50 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	; 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e1e7      	b.n	800356e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319e:	4b6c      	ldr	r3, [pc, #432]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0xe8>
 80031aa:	e000      	b.n	80031ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d063      	beq.n	8003282 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ba:	4b65      	ldr	r3, [pc, #404]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00b      	beq.n	80031de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031c6:	4b62      	ldr	r3, [pc, #392]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d11c      	bne.n	800320c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031d2:	4b5f      	ldr	r3, [pc, #380]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d116      	bne.n	800320c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031de:	4b5c      	ldr	r3, [pc, #368]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_RCC_OscConfig+0x152>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d001      	beq.n	80031f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e1bb      	b.n	800356e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f6:	4b56      	ldr	r3, [pc, #344]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4952      	ldr	r1, [pc, #328]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320a:	e03a      	b.n	8003282 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d020      	beq.n	8003256 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003214:	4b4f      	ldr	r3, [pc, #316]	; (8003354 <HAL_RCC_OscConfig+0x2b0>)
 8003216:	2201      	movs	r2, #1
 8003218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321a:	f7fe fc19 	bl	8001a50 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003222:	f7fe fc15 	bl	8001a50 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e19c      	b.n	800356e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003234:	4b46      	ldr	r3, [pc, #280]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003240:	4b43      	ldr	r3, [pc, #268]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4940      	ldr	r1, [pc, #256]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 8003250:	4313      	orrs	r3, r2
 8003252:	600b      	str	r3, [r1, #0]
 8003254:	e015      	b.n	8003282 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003256:	4b3f      	ldr	r3, [pc, #252]	; (8003354 <HAL_RCC_OscConfig+0x2b0>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fe fbf8 	bl	8001a50 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003264:	f7fe fbf4 	bl	8001a50 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e17b      	b.n	800356e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003276:	4b36      	ldr	r3, [pc, #216]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d030      	beq.n	80032f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d016      	beq.n	80032c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003296:	4b30      	ldr	r3, [pc, #192]	; (8003358 <HAL_RCC_OscConfig+0x2b4>)
 8003298:	2201      	movs	r2, #1
 800329a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329c:	f7fe fbd8 	bl	8001a50 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032a4:	f7fe fbd4 	bl	8001a50 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e15b      	b.n	800356e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b6:	4b26      	ldr	r3, [pc, #152]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 80032b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0x200>
 80032c2:	e015      	b.n	80032f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c4:	4b24      	ldr	r3, [pc, #144]	; (8003358 <HAL_RCC_OscConfig+0x2b4>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ca:	f7fe fbc1 	bl	8001a50 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d2:	f7fe fbbd 	bl	8001a50 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e144      	b.n	800356e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e4:	4b1a      	ldr	r3, [pc, #104]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 80032e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1f0      	bne.n	80032d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 80a0 	beq.w	800343e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032fe:	2300      	movs	r3, #0
 8003300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003302:	4b13      	ldr	r3, [pc, #76]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10f      	bne.n	800332e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800330e:	2300      	movs	r3, #0
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	4a0e      	ldr	r2, [pc, #56]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 8003318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331c:	6413      	str	r3, [r2, #64]	; 0x40
 800331e:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <HAL_RCC_OscConfig+0x2ac>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332a:	2301      	movs	r3, #1
 800332c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332e:	4b0b      	ldr	r3, [pc, #44]	; (800335c <HAL_RCC_OscConfig+0x2b8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003336:	2b00      	cmp	r3, #0
 8003338:	d121      	bne.n	800337e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800333a:	4b08      	ldr	r3, [pc, #32]	; (800335c <HAL_RCC_OscConfig+0x2b8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a07      	ldr	r2, [pc, #28]	; (800335c <HAL_RCC_OscConfig+0x2b8>)
 8003340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003346:	f7fe fb83 	bl	8001a50 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334c:	e011      	b.n	8003372 <HAL_RCC_OscConfig+0x2ce>
 800334e:	bf00      	nop
 8003350:	40023800 	.word	0x40023800
 8003354:	42470000 	.word	0x42470000
 8003358:	42470e80 	.word	0x42470e80
 800335c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003360:	f7fe fb76 	bl	8001a50 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e0fd      	b.n	800356e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003372:	4b81      	ldr	r3, [pc, #516]	; (8003578 <HAL_RCC_OscConfig+0x4d4>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d106      	bne.n	8003394 <HAL_RCC_OscConfig+0x2f0>
 8003386:	4b7d      	ldr	r3, [pc, #500]	; (800357c <HAL_RCC_OscConfig+0x4d8>)
 8003388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338a:	4a7c      	ldr	r2, [pc, #496]	; (800357c <HAL_RCC_OscConfig+0x4d8>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	6713      	str	r3, [r2, #112]	; 0x70
 8003392:	e01c      	b.n	80033ce <HAL_RCC_OscConfig+0x32a>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b05      	cmp	r3, #5
 800339a:	d10c      	bne.n	80033b6 <HAL_RCC_OscConfig+0x312>
 800339c:	4b77      	ldr	r3, [pc, #476]	; (800357c <HAL_RCC_OscConfig+0x4d8>)
 800339e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a0:	4a76      	ldr	r2, [pc, #472]	; (800357c <HAL_RCC_OscConfig+0x4d8>)
 80033a2:	f043 0304 	orr.w	r3, r3, #4
 80033a6:	6713      	str	r3, [r2, #112]	; 0x70
 80033a8:	4b74      	ldr	r3, [pc, #464]	; (800357c <HAL_RCC_OscConfig+0x4d8>)
 80033aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ac:	4a73      	ldr	r2, [pc, #460]	; (800357c <HAL_RCC_OscConfig+0x4d8>)
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	6713      	str	r3, [r2, #112]	; 0x70
 80033b4:	e00b      	b.n	80033ce <HAL_RCC_OscConfig+0x32a>
 80033b6:	4b71      	ldr	r3, [pc, #452]	; (800357c <HAL_RCC_OscConfig+0x4d8>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ba:	4a70      	ldr	r2, [pc, #448]	; (800357c <HAL_RCC_OscConfig+0x4d8>)
 80033bc:	f023 0301 	bic.w	r3, r3, #1
 80033c0:	6713      	str	r3, [r2, #112]	; 0x70
 80033c2:	4b6e      	ldr	r3, [pc, #440]	; (800357c <HAL_RCC_OscConfig+0x4d8>)
 80033c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c6:	4a6d      	ldr	r2, [pc, #436]	; (800357c <HAL_RCC_OscConfig+0x4d8>)
 80033c8:	f023 0304 	bic.w	r3, r3, #4
 80033cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d015      	beq.n	8003402 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d6:	f7fe fb3b 	bl	8001a50 <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033dc:	e00a      	b.n	80033f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033de:	f7fe fb37 	bl	8001a50 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e0bc      	b.n	800356e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f4:	4b61      	ldr	r3, [pc, #388]	; (800357c <HAL_RCC_OscConfig+0x4d8>)
 80033f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0ee      	beq.n	80033de <HAL_RCC_OscConfig+0x33a>
 8003400:	e014      	b.n	800342c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003402:	f7fe fb25 	bl	8001a50 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003408:	e00a      	b.n	8003420 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800340a:	f7fe fb21 	bl	8001a50 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	f241 3288 	movw	r2, #5000	; 0x1388
 8003418:	4293      	cmp	r3, r2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e0a6      	b.n	800356e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003420:	4b56      	ldr	r3, [pc, #344]	; (800357c <HAL_RCC_OscConfig+0x4d8>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1ee      	bne.n	800340a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800342c:	7dfb      	ldrb	r3, [r7, #23]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d105      	bne.n	800343e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003432:	4b52      	ldr	r3, [pc, #328]	; (800357c <HAL_RCC_OscConfig+0x4d8>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	4a51      	ldr	r2, [pc, #324]	; (800357c <HAL_RCC_OscConfig+0x4d8>)
 8003438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800343c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 8092 	beq.w	800356c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003448:	4b4c      	ldr	r3, [pc, #304]	; (800357c <HAL_RCC_OscConfig+0x4d8>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 030c 	and.w	r3, r3, #12
 8003450:	2b08      	cmp	r3, #8
 8003452:	d05c      	beq.n	800350e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	2b02      	cmp	r3, #2
 800345a:	d141      	bne.n	80034e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800345c:	4b48      	ldr	r3, [pc, #288]	; (8003580 <HAL_RCC_OscConfig+0x4dc>)
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003462:	f7fe faf5 	bl	8001a50 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800346a:	f7fe faf1 	bl	8001a50 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e078      	b.n	800356e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800347c:	4b3f      	ldr	r3, [pc, #252]	; (800357c <HAL_RCC_OscConfig+0x4d8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1f0      	bne.n	800346a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69da      	ldr	r2, [r3, #28]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	019b      	lsls	r3, r3, #6
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	085b      	lsrs	r3, r3, #1
 80034a0:	3b01      	subs	r3, #1
 80034a2:	041b      	lsls	r3, r3, #16
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034aa:	061b      	lsls	r3, r3, #24
 80034ac:	4933      	ldr	r1, [pc, #204]	; (800357c <HAL_RCC_OscConfig+0x4d8>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b2:	4b33      	ldr	r3, [pc, #204]	; (8003580 <HAL_RCC_OscConfig+0x4dc>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b8:	f7fe faca 	bl	8001a50 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c0:	f7fe fac6 	bl	8001a50 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e04d      	b.n	800356e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d2:	4b2a      	ldr	r3, [pc, #168]	; (800357c <HAL_RCC_OscConfig+0x4d8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0x41c>
 80034de:	e045      	b.n	800356c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e0:	4b27      	ldr	r3, [pc, #156]	; (8003580 <HAL_RCC_OscConfig+0x4dc>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e6:	f7fe fab3 	bl	8001a50 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ee:	f7fe faaf 	bl	8001a50 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e036      	b.n	800356e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003500:	4b1e      	ldr	r3, [pc, #120]	; (800357c <HAL_RCC_OscConfig+0x4d8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1f0      	bne.n	80034ee <HAL_RCC_OscConfig+0x44a>
 800350c:	e02e      	b.n	800356c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d101      	bne.n	800351a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e029      	b.n	800356e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800351a:	4b18      	ldr	r3, [pc, #96]	; (800357c <HAL_RCC_OscConfig+0x4d8>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	429a      	cmp	r2, r3
 800352c:	d11c      	bne.n	8003568 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003538:	429a      	cmp	r2, r3
 800353a:	d115      	bne.n	8003568 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003542:	4013      	ands	r3, r2
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003548:	4293      	cmp	r3, r2
 800354a:	d10d      	bne.n	8003568 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003556:	429a      	cmp	r2, r3
 8003558:	d106      	bne.n	8003568 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003564:	429a      	cmp	r2, r3
 8003566:	d001      	beq.n	800356c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e000      	b.n	800356e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40007000 	.word	0x40007000
 800357c:	40023800 	.word	0x40023800
 8003580:	42470060 	.word	0x42470060

08003584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0cc      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003598:	4b68      	ldr	r3, [pc, #416]	; (800373c <HAL_RCC_ClockConfig+0x1b8>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d90c      	bls.n	80035c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a6:	4b65      	ldr	r3, [pc, #404]	; (800373c <HAL_RCC_ClockConfig+0x1b8>)
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ae:	4b63      	ldr	r3, [pc, #396]	; (800373c <HAL_RCC_ClockConfig+0x1b8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d001      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e0b8      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d020      	beq.n	800360e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035d8:	4b59      	ldr	r3, [pc, #356]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	4a58      	ldr	r2, [pc, #352]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035f0:	4b53      	ldr	r3, [pc, #332]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	4a52      	ldr	r2, [pc, #328]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035fc:	4b50      	ldr	r3, [pc, #320]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	494d      	ldr	r1, [pc, #308]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	4313      	orrs	r3, r2
 800360c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d044      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d107      	bne.n	8003632 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003622:	4b47      	ldr	r3, [pc, #284]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d119      	bne.n	8003662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e07f      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d003      	beq.n	8003642 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800363e:	2b03      	cmp	r3, #3
 8003640:	d107      	bne.n	8003652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003642:	4b3f      	ldr	r3, [pc, #252]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d109      	bne.n	8003662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e06f      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003652:	4b3b      	ldr	r3, [pc, #236]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e067      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003662:	4b37      	ldr	r3, [pc, #220]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f023 0203 	bic.w	r2, r3, #3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	4934      	ldr	r1, [pc, #208]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	4313      	orrs	r3, r2
 8003672:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003674:	f7fe f9ec 	bl	8001a50 <HAL_GetTick>
 8003678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367a:	e00a      	b.n	8003692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800367c:	f7fe f9e8 	bl	8001a50 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	f241 3288 	movw	r2, #5000	; 0x1388
 800368a:	4293      	cmp	r3, r2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e04f      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003692:	4b2b      	ldr	r3, [pc, #172]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 020c 	and.w	r2, r3, #12
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d1eb      	bne.n	800367c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036a4:	4b25      	ldr	r3, [pc, #148]	; (800373c <HAL_RCC_ClockConfig+0x1b8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 030f 	and.w	r3, r3, #15
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d20c      	bcs.n	80036cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b2:	4b22      	ldr	r3, [pc, #136]	; (800373c <HAL_RCC_ClockConfig+0x1b8>)
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ba:	4b20      	ldr	r3, [pc, #128]	; (800373c <HAL_RCC_ClockConfig+0x1b8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d001      	beq.n	80036cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e032      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d8:	4b19      	ldr	r3, [pc, #100]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	4916      	ldr	r1, [pc, #88]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d009      	beq.n	800370a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036f6:	4b12      	ldr	r3, [pc, #72]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	490e      	ldr	r1, [pc, #56]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	4313      	orrs	r3, r2
 8003708:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800370a:	f000 f821 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 800370e:	4601      	mov	r1, r0
 8003710:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	091b      	lsrs	r3, r3, #4
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	4a0a      	ldr	r2, [pc, #40]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 800371c:	5cd3      	ldrb	r3, [r2, r3]
 800371e:	fa21 f303 	lsr.w	r3, r1, r3
 8003722:	4a09      	ldr	r2, [pc, #36]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003726:	4b09      	ldr	r3, [pc, #36]	; (800374c <HAL_RCC_ClockConfig+0x1c8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f7fe f94c 	bl	80019c8 <HAL_InitTick>

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40023c00 	.word	0x40023c00
 8003740:	40023800 	.word	0x40023800
 8003744:	0800724c 	.word	0x0800724c
 8003748:	20000000 	.word	0x20000000
 800374c:	20000004 	.word	0x20000004

08003750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003756:	2300      	movs	r3, #0
 8003758:	607b      	str	r3, [r7, #4]
 800375a:	2300      	movs	r3, #0
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	2300      	movs	r3, #0
 8003760:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003766:	4b50      	ldr	r3, [pc, #320]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
 800376e:	2b04      	cmp	r3, #4
 8003770:	d007      	beq.n	8003782 <HAL_RCC_GetSysClockFreq+0x32>
 8003772:	2b08      	cmp	r3, #8
 8003774:	d008      	beq.n	8003788 <HAL_RCC_GetSysClockFreq+0x38>
 8003776:	2b00      	cmp	r3, #0
 8003778:	f040 808d 	bne.w	8003896 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800377c:	4b4b      	ldr	r3, [pc, #300]	; (80038ac <HAL_RCC_GetSysClockFreq+0x15c>)
 800377e:	60bb      	str	r3, [r7, #8]
       break;
 8003780:	e08c      	b.n	800389c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003782:	4b4b      	ldr	r3, [pc, #300]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003784:	60bb      	str	r3, [r7, #8]
      break;
 8003786:	e089      	b.n	800389c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003788:	4b47      	ldr	r3, [pc, #284]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003790:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003792:	4b45      	ldr	r3, [pc, #276]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d023      	beq.n	80037e6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800379e:	4b42      	ldr	r3, [pc, #264]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x158>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	099b      	lsrs	r3, r3, #6
 80037a4:	f04f 0400 	mov.w	r4, #0
 80037a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	ea03 0501 	and.w	r5, r3, r1
 80037b4:	ea04 0602 	and.w	r6, r4, r2
 80037b8:	4a3d      	ldr	r2, [pc, #244]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80037ba:	fb02 f106 	mul.w	r1, r2, r6
 80037be:	2200      	movs	r2, #0
 80037c0:	fb02 f205 	mul.w	r2, r2, r5
 80037c4:	440a      	add	r2, r1
 80037c6:	493a      	ldr	r1, [pc, #232]	; (80038b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80037c8:	fba5 0101 	umull	r0, r1, r5, r1
 80037cc:	1853      	adds	r3, r2, r1
 80037ce:	4619      	mov	r1, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f04f 0400 	mov.w	r4, #0
 80037d6:	461a      	mov	r2, r3
 80037d8:	4623      	mov	r3, r4
 80037da:	f7fd f9f5 	bl	8000bc8 <__aeabi_uldivmod>
 80037de:	4603      	mov	r3, r0
 80037e0:	460c      	mov	r4, r1
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	e049      	b.n	800387a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e6:	4b30      	ldr	r3, [pc, #192]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x158>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	099b      	lsrs	r3, r3, #6
 80037ec:	f04f 0400 	mov.w	r4, #0
 80037f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	ea03 0501 	and.w	r5, r3, r1
 80037fc:	ea04 0602 	and.w	r6, r4, r2
 8003800:	4629      	mov	r1, r5
 8003802:	4632      	mov	r2, r6
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	f04f 0400 	mov.w	r4, #0
 800380c:	0154      	lsls	r4, r2, #5
 800380e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003812:	014b      	lsls	r3, r1, #5
 8003814:	4619      	mov	r1, r3
 8003816:	4622      	mov	r2, r4
 8003818:	1b49      	subs	r1, r1, r5
 800381a:	eb62 0206 	sbc.w	r2, r2, r6
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	f04f 0400 	mov.w	r4, #0
 8003826:	0194      	lsls	r4, r2, #6
 8003828:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800382c:	018b      	lsls	r3, r1, #6
 800382e:	1a5b      	subs	r3, r3, r1
 8003830:	eb64 0402 	sbc.w	r4, r4, r2
 8003834:	f04f 0100 	mov.w	r1, #0
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	00e2      	lsls	r2, r4, #3
 800383e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003842:	00d9      	lsls	r1, r3, #3
 8003844:	460b      	mov	r3, r1
 8003846:	4614      	mov	r4, r2
 8003848:	195b      	adds	r3, r3, r5
 800384a:	eb44 0406 	adc.w	r4, r4, r6
 800384e:	f04f 0100 	mov.w	r1, #0
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	02a2      	lsls	r2, r4, #10
 8003858:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800385c:	0299      	lsls	r1, r3, #10
 800385e:	460b      	mov	r3, r1
 8003860:	4614      	mov	r4, r2
 8003862:	4618      	mov	r0, r3
 8003864:	4621      	mov	r1, r4
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f04f 0400 	mov.w	r4, #0
 800386c:	461a      	mov	r2, r3
 800386e:	4623      	mov	r3, r4
 8003870:	f7fd f9aa 	bl	8000bc8 <__aeabi_uldivmod>
 8003874:	4603      	mov	r3, r0
 8003876:	460c      	mov	r4, r1
 8003878:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800387a:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	0c1b      	lsrs	r3, r3, #16
 8003880:	f003 0303 	and.w	r3, r3, #3
 8003884:	3301      	adds	r3, #1
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003892:	60bb      	str	r3, [r7, #8]
      break;
 8003894:	e002      	b.n	800389c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003896:	4b05      	ldr	r3, [pc, #20]	; (80038ac <HAL_RCC_GetSysClockFreq+0x15c>)
 8003898:	60bb      	str	r3, [r7, #8]
      break;
 800389a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800389c:	68bb      	ldr	r3, [r7, #8]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40023800 	.word	0x40023800
 80038ac:	00f42400 	.word	0x00f42400
 80038b0:	017d7840 	.word	0x017d7840

080038b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038b8:	4b03      	ldr	r3, [pc, #12]	; (80038c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80038ba:	681b      	ldr	r3, [r3, #0]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	20000000 	.word	0x20000000

080038cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038d0:	f7ff fff0 	bl	80038b4 <HAL_RCC_GetHCLKFreq>
 80038d4:	4601      	mov	r1, r0
 80038d6:	4b05      	ldr	r3, [pc, #20]	; (80038ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	0a9b      	lsrs	r3, r3, #10
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	4a03      	ldr	r2, [pc, #12]	; (80038f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038e2:	5cd3      	ldrb	r3, [r2, r3]
 80038e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40023800 	.word	0x40023800
 80038f0:	0800725c 	.word	0x0800725c

080038f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e01d      	b.n	8003942 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d106      	bne.n	8003920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7fd fea2 	bl	8001664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3304      	adds	r3, #4
 8003930:	4619      	mov	r1, r3
 8003932:	4610      	mov	r0, r2
 8003934:	f000 fa1e 	bl	8003d74 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800394a:	b480      	push	{r7}
 800394c:	b085      	sub	sp, #20
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f042 0201 	orr.w	r2, r2, #1
 8003960:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2b06      	cmp	r3, #6
 8003972:	d007      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b082      	sub	sp, #8
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d122      	bne.n	80039ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d11b      	bne.n	80039ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f06f 0202 	mvn.w	r2, #2
 80039be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f9af 	bl	8003d38 <HAL_TIM_IC_CaptureCallback>
 80039da:	e005      	b.n	80039e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f9a1 	bl	8003d24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f9b2 	bl	8003d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d122      	bne.n	8003a42 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f003 0304 	and.w	r3, r3, #4
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d11b      	bne.n	8003a42 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f06f 0204 	mvn.w	r2, #4
 8003a12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f985 	bl	8003d38 <HAL_TIM_IC_CaptureCallback>
 8003a2e:	e005      	b.n	8003a3c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f977 	bl	8003d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f988 	bl	8003d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d122      	bne.n	8003a96 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d11b      	bne.n	8003a96 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f06f 0208 	mvn.w	r2, #8
 8003a66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2204      	movs	r2, #4
 8003a6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f95b 	bl	8003d38 <HAL_TIM_IC_CaptureCallback>
 8003a82:	e005      	b.n	8003a90 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f94d 	bl	8003d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f95e 	bl	8003d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	2b10      	cmp	r3, #16
 8003aa2:	d122      	bne.n	8003aea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f003 0310 	and.w	r3, r3, #16
 8003aae:	2b10      	cmp	r3, #16
 8003ab0:	d11b      	bne.n	8003aea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f06f 0210 	mvn.w	r2, #16
 8003aba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2208      	movs	r2, #8
 8003ac0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f931 	bl	8003d38 <HAL_TIM_IC_CaptureCallback>
 8003ad6:	e005      	b.n	8003ae4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f923 	bl	8003d24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f934 	bl	8003d4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d10e      	bne.n	8003b16 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d107      	bne.n	8003b16 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f06f 0201 	mvn.w	r2, #1
 8003b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f8fd 	bl	8003d10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b20:	2b80      	cmp	r3, #128	; 0x80
 8003b22:	d10e      	bne.n	8003b42 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2e:	2b80      	cmp	r3, #128	; 0x80
 8003b30:	d107      	bne.n	8003b42 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 fad9 	bl	80040f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4c:	2b40      	cmp	r3, #64	; 0x40
 8003b4e:	d10e      	bne.n	8003b6e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5a:	2b40      	cmp	r3, #64	; 0x40
 8003b5c:	d107      	bne.n	8003b6e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f8f9 	bl	8003d60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	f003 0320 	and.w	r3, r3, #32
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d10e      	bne.n	8003b9a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f003 0320 	and.w	r3, r3, #32
 8003b86:	2b20      	cmp	r3, #32
 8003b88:	d107      	bne.n	8003b9a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f06f 0220 	mvn.w	r2, #32
 8003b92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 faa3 	bl	80040e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b9a:	bf00      	nop
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b084      	sub	sp, #16
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d101      	bne.n	8003bba <HAL_TIM_ConfigClockSource+0x18>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e0a6      	b.n	8003d08 <HAL_TIM_ConfigClockSource+0x166>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bd8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003be0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b40      	cmp	r3, #64	; 0x40
 8003bf0:	d067      	beq.n	8003cc2 <HAL_TIM_ConfigClockSource+0x120>
 8003bf2:	2b40      	cmp	r3, #64	; 0x40
 8003bf4:	d80b      	bhi.n	8003c0e <HAL_TIM_ConfigClockSource+0x6c>
 8003bf6:	2b10      	cmp	r3, #16
 8003bf8:	d073      	beq.n	8003ce2 <HAL_TIM_ConfigClockSource+0x140>
 8003bfa:	2b10      	cmp	r3, #16
 8003bfc:	d802      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x62>
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d06f      	beq.n	8003ce2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003c02:	e078      	b.n	8003cf6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d06c      	beq.n	8003ce2 <HAL_TIM_ConfigClockSource+0x140>
 8003c08:	2b30      	cmp	r3, #48	; 0x30
 8003c0a:	d06a      	beq.n	8003ce2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003c0c:	e073      	b.n	8003cf6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c0e:	2b70      	cmp	r3, #112	; 0x70
 8003c10:	d00d      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0x8c>
 8003c12:	2b70      	cmp	r3, #112	; 0x70
 8003c14:	d804      	bhi.n	8003c20 <HAL_TIM_ConfigClockSource+0x7e>
 8003c16:	2b50      	cmp	r3, #80	; 0x50
 8003c18:	d033      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0xe0>
 8003c1a:	2b60      	cmp	r3, #96	; 0x60
 8003c1c:	d041      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003c1e:	e06a      	b.n	8003cf6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c24:	d066      	beq.n	8003cf4 <HAL_TIM_ConfigClockSource+0x152>
 8003c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c2a:	d017      	beq.n	8003c5c <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003c2c:	e063      	b.n	8003cf6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	6899      	ldr	r1, [r3, #8]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f000 f9b3 	bl	8003fa8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c50:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	609a      	str	r2, [r3, #8]
      break;
 8003c5a:	e04c      	b.n	8003cf6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6818      	ldr	r0, [r3, #0]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	6899      	ldr	r1, [r3, #8]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f000 f99c 	bl	8003fa8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c7e:	609a      	str	r2, [r3, #8]
      break;
 8003c80:	e039      	b.n	8003cf6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6859      	ldr	r1, [r3, #4]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f000 f910 	bl	8003eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2150      	movs	r1, #80	; 0x50
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 f969 	bl	8003f72 <TIM_ITRx_SetConfig>
      break;
 8003ca0:	e029      	b.n	8003cf6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	6859      	ldr	r1, [r3, #4]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f000 f92f 	bl	8003f12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2160      	movs	r1, #96	; 0x60
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 f959 	bl	8003f72 <TIM_ITRx_SetConfig>
      break;
 8003cc0:	e019      	b.n	8003cf6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	6859      	ldr	r1, [r3, #4]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f000 f8f0 	bl	8003eb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2140      	movs	r1, #64	; 0x40
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f000 f949 	bl	8003f72 <TIM_ITRx_SetConfig>
      break;
 8003ce0:	e009      	b.n	8003cf6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4619      	mov	r1, r3
 8003cec:	4610      	mov	r0, r2
 8003cee:	f000 f940 	bl	8003f72 <TIM_ITRx_SetConfig>
      break;
 8003cf2:	e000      	b.n	8003cf6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003cf4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a40      	ldr	r2, [pc, #256]	; (8003e88 <TIM_Base_SetConfig+0x114>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d013      	beq.n	8003db4 <TIM_Base_SetConfig+0x40>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d92:	d00f      	beq.n	8003db4 <TIM_Base_SetConfig+0x40>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a3d      	ldr	r2, [pc, #244]	; (8003e8c <TIM_Base_SetConfig+0x118>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d00b      	beq.n	8003db4 <TIM_Base_SetConfig+0x40>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a3c      	ldr	r2, [pc, #240]	; (8003e90 <TIM_Base_SetConfig+0x11c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d007      	beq.n	8003db4 <TIM_Base_SetConfig+0x40>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a3b      	ldr	r2, [pc, #236]	; (8003e94 <TIM_Base_SetConfig+0x120>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d003      	beq.n	8003db4 <TIM_Base_SetConfig+0x40>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a3a      	ldr	r2, [pc, #232]	; (8003e98 <TIM_Base_SetConfig+0x124>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d108      	bne.n	8003dc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a2f      	ldr	r2, [pc, #188]	; (8003e88 <TIM_Base_SetConfig+0x114>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d02b      	beq.n	8003e26 <TIM_Base_SetConfig+0xb2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd4:	d027      	beq.n	8003e26 <TIM_Base_SetConfig+0xb2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a2c      	ldr	r2, [pc, #176]	; (8003e8c <TIM_Base_SetConfig+0x118>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d023      	beq.n	8003e26 <TIM_Base_SetConfig+0xb2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a2b      	ldr	r2, [pc, #172]	; (8003e90 <TIM_Base_SetConfig+0x11c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d01f      	beq.n	8003e26 <TIM_Base_SetConfig+0xb2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a2a      	ldr	r2, [pc, #168]	; (8003e94 <TIM_Base_SetConfig+0x120>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d01b      	beq.n	8003e26 <TIM_Base_SetConfig+0xb2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a29      	ldr	r2, [pc, #164]	; (8003e98 <TIM_Base_SetConfig+0x124>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d017      	beq.n	8003e26 <TIM_Base_SetConfig+0xb2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a28      	ldr	r2, [pc, #160]	; (8003e9c <TIM_Base_SetConfig+0x128>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d013      	beq.n	8003e26 <TIM_Base_SetConfig+0xb2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a27      	ldr	r2, [pc, #156]	; (8003ea0 <TIM_Base_SetConfig+0x12c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00f      	beq.n	8003e26 <TIM_Base_SetConfig+0xb2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a26      	ldr	r2, [pc, #152]	; (8003ea4 <TIM_Base_SetConfig+0x130>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00b      	beq.n	8003e26 <TIM_Base_SetConfig+0xb2>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a25      	ldr	r2, [pc, #148]	; (8003ea8 <TIM_Base_SetConfig+0x134>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d007      	beq.n	8003e26 <TIM_Base_SetConfig+0xb2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a24      	ldr	r2, [pc, #144]	; (8003eac <TIM_Base_SetConfig+0x138>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d003      	beq.n	8003e26 <TIM_Base_SetConfig+0xb2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a23      	ldr	r2, [pc, #140]	; (8003eb0 <TIM_Base_SetConfig+0x13c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d108      	bne.n	8003e38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a0a      	ldr	r2, [pc, #40]	; (8003e88 <TIM_Base_SetConfig+0x114>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d003      	beq.n	8003e6c <TIM_Base_SetConfig+0xf8>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a0c      	ldr	r2, [pc, #48]	; (8003e98 <TIM_Base_SetConfig+0x124>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d103      	bne.n	8003e74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	615a      	str	r2, [r3, #20]
}
 8003e7a:	bf00      	nop
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	40010000 	.word	0x40010000
 8003e8c:	40000400 	.word	0x40000400
 8003e90:	40000800 	.word	0x40000800
 8003e94:	40000c00 	.word	0x40000c00
 8003e98:	40010400 	.word	0x40010400
 8003e9c:	40014000 	.word	0x40014000
 8003ea0:	40014400 	.word	0x40014400
 8003ea4:	40014800 	.word	0x40014800
 8003ea8:	40001800 	.word	0x40001800
 8003eac:	40001c00 	.word	0x40001c00
 8003eb0:	40002000 	.word	0x40002000

08003eb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	f023 0201 	bic.w	r2, r3, #1
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ede:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f023 030a 	bic.w	r3, r3, #10
 8003ef0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	621a      	str	r2, [r3, #32]
}
 8003f06:	bf00      	nop
 8003f08:	371c      	adds	r7, #28
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b087      	sub	sp, #28
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	60f8      	str	r0, [r7, #12]
 8003f1a:	60b9      	str	r1, [r7, #8]
 8003f1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	f023 0210 	bic.w	r2, r3, #16
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	031b      	lsls	r3, r3, #12
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	621a      	str	r2, [r3, #32]
}
 8003f66:	bf00      	nop
 8003f68:	371c      	adds	r7, #28
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b085      	sub	sp, #20
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f043 0307 	orr.w	r3, r3, #7
 8003f94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	609a      	str	r2, [r3, #8]
}
 8003f9c:	bf00      	nop
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	021a      	lsls	r2, r3, #8
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	609a      	str	r2, [r3, #8]
}
 8003fdc:	bf00      	nop
 8003fde:	371c      	adds	r7, #28
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d101      	bne.n	8004000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e05a      	b.n	80040b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004026:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	4313      	orrs	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a21      	ldr	r2, [pc, #132]	; (80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d022      	beq.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800404c:	d01d      	beq.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a1d      	ldr	r2, [pc, #116]	; (80040c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d018      	beq.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a1b      	ldr	r2, [pc, #108]	; (80040cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d013      	beq.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a1a      	ldr	r2, [pc, #104]	; (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d00e      	beq.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a18      	ldr	r2, [pc, #96]	; (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d009      	beq.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a17      	ldr	r2, [pc, #92]	; (80040d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d004      	beq.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a15      	ldr	r2, [pc, #84]	; (80040dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d10c      	bne.n	80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004090:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	4313      	orrs	r3, r2
 800409a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	40010000 	.word	0x40010000
 80040c8:	40000400 	.word	0x40000400
 80040cc:	40000800 	.word	0x40000800
 80040d0:	40000c00 	.word	0x40000c00
 80040d4:	40010400 	.word	0x40010400
 80040d8:	40014000 	.word	0x40014000
 80040dc:	40001800 	.word	0x40001800

080040e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004108:	b480      	push	{r7}
 800410a:	b089      	sub	sp, #36	; 0x24
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	fa93 f3a3 	rbit	r3, r3
 8004122:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	fab3 f383 	clz	r3, r3
 800412a:	b2db      	uxtb	r3, r3
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	2103      	movs	r1, #3
 8004130:	fa01 f303 	lsl.w	r3, r1, r3
 8004134:	43db      	mvns	r3, r3
 8004136:	401a      	ands	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	fa93 f3a3 	rbit	r3, r3
 8004142:	61bb      	str	r3, [r7, #24]
  return result;
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	fab3 f383 	clz	r3, r3
 800414a:	b2db      	uxtb	r3, r3
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	fa01 f303 	lsl.w	r3, r1, r3
 8004154:	431a      	orrs	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	601a      	str	r2, [r3, #0]
}
 800415a:	bf00      	nop
 800415c:	3724      	adds	r7, #36	; 0x24
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8004166:	b480      	push	{r7}
 8004168:	b085      	sub	sp, #20
 800416a:	af00      	add	r7, sp, #0
 800416c:	60f8      	str	r0, [r7, #12]
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	43db      	mvns	r3, r3
 800417a:	401a      	ands	r2, r3
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	fb01 f303 	mul.w	r3, r1, r3
 8004184:	431a      	orrs	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	605a      	str	r2, [r3, #4]
}
 800418a:	bf00      	nop
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8004196:	b480      	push	{r7}
 8004198:	b089      	sub	sp, #36	; 0x24
 800419a:	af00      	add	r7, sp, #0
 800419c:	60f8      	str	r0, [r7, #12]
 800419e:	60b9      	str	r1, [r7, #8]
 80041a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	689a      	ldr	r2, [r3, #8]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	fa93 f3a3 	rbit	r3, r3
 80041b0:	613b      	str	r3, [r7, #16]
  return result;
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	fab3 f383 	clz	r3, r3
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	2103      	movs	r1, #3
 80041be:	fa01 f303 	lsl.w	r3, r1, r3
 80041c2:	43db      	mvns	r3, r3
 80041c4:	401a      	ands	r2, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	fa93 f3a3 	rbit	r3, r3
 80041d0:	61bb      	str	r3, [r7, #24]
  return result;
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	fab3 f383 	clz	r3, r3
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	fa01 f303 	lsl.w	r3, r1, r3
 80041e2:	431a      	orrs	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80041e8:	bf00      	nop
 80041ea:	3724      	adds	r7, #36	; 0x24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b089      	sub	sp, #36	; 0x24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	fa93 f3a3 	rbit	r3, r3
 800420e:	613b      	str	r3, [r7, #16]
  return result;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	fab3 f383 	clz	r3, r3
 8004216:	b2db      	uxtb	r3, r3
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	2103      	movs	r1, #3
 800421c:	fa01 f303 	lsl.w	r3, r1, r3
 8004220:	43db      	mvns	r3, r3
 8004222:	401a      	ands	r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	fa93 f3a3 	rbit	r3, r3
 800422e:	61bb      	str	r3, [r7, #24]
  return result;
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	fab3 f383 	clz	r3, r3
 8004236:	b2db      	uxtb	r3, r3
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	fa01 f303 	lsl.w	r3, r1, r3
 8004240:	431a      	orrs	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	60da      	str	r2, [r3, #12]
}
 8004246:	bf00      	nop
 8004248:	3724      	adds	r7, #36	; 0x24
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004252:	b480      	push	{r7}
 8004254:	b089      	sub	sp, #36	; 0x24
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a1a      	ldr	r2, [r3, #32]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	fa93 f3a3 	rbit	r3, r3
 800426c:	613b      	str	r3, [r7, #16]
  return result;
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	fab3 f383 	clz	r3, r3
 8004274:	b2db      	uxtb	r3, r3
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	210f      	movs	r1, #15
 800427a:	fa01 f303 	lsl.w	r3, r1, r3
 800427e:	43db      	mvns	r3, r3
 8004280:	401a      	ands	r2, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	fa93 f3a3 	rbit	r3, r3
 800428c:	61bb      	str	r3, [r7, #24]
  return result;
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	fab3 f383 	clz	r3, r3
 8004294:	b2db      	uxtb	r3, r3
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	fa01 f303 	lsl.w	r3, r1, r3
 800429e:	431a      	orrs	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80042a4:	bf00      	nop
 80042a6:	3724      	adds	r7, #36	; 0x24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b089      	sub	sp, #36	; 0x24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	0a1b      	lsrs	r3, r3, #8
 80042c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	fa93 f3a3 	rbit	r3, r3
 80042cc:	613b      	str	r3, [r7, #16]
  return result;
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	fab3 f383 	clz	r3, r3
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	210f      	movs	r1, #15
 80042da:	fa01 f303 	lsl.w	r3, r1, r3
 80042de:	43db      	mvns	r3, r3
 80042e0:	401a      	ands	r2, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	0a1b      	lsrs	r3, r3, #8
 80042e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	fa93 f3a3 	rbit	r3, r3
 80042ee:	61bb      	str	r3, [r7, #24]
  return result;
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	fab3 f383 	clz	r3, r3
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004300:	431a      	orrs	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8004306:	bf00      	nop
 8004308:	3724      	adds	r7, #36	; 0x24
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b088      	sub	sp, #32
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800431c:	2300      	movs	r3, #0
 800431e:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8004320:	2300      	movs	r3, #0
 8004322:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	fa93 f3a3 	rbit	r3, r3
 8004330:	613b      	str	r3, [r7, #16]
  return result;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	fab3 f383 	clz	r3, r3
 8004338:	b2db      	uxtb	r3, r3
 800433a:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800433c:	e050      	b.n	80043e0 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	2101      	movs	r1, #1
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	fa01 f303 	lsl.w	r3, r1, r3
 800434a:	4013      	ands	r3, r2
 800434c:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d042      	beq.n	80043da <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d003      	beq.n	8004364 <LL_GPIO_Init+0x52>
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2b02      	cmp	r3, #2
 8004362:	d10d      	bne.n	8004380 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	461a      	mov	r2, r3
 800436a:	69b9      	ldr	r1, [r7, #24]
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7ff ff12 	bl	8004196 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	461a      	mov	r2, r3
 8004378:	69b9      	ldr	r1, [r7, #24]
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7ff fef3 	bl	8004166 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	461a      	mov	r2, r3
 8004386:	69b9      	ldr	r1, [r7, #24]
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7ff ff33 	bl	80041f4 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b02      	cmp	r3, #2
 8004394:	d11a      	bne.n	80043cc <LL_GPIO_Init+0xba>
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	fa93 f3a3 	rbit	r3, r3
 80043a0:	60bb      	str	r3, [r7, #8]
  return result;
 80043a2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80043a4:	fab3 f383 	clz	r3, r3
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b07      	cmp	r3, #7
 80043ac:	d807      	bhi.n	80043be <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	461a      	mov	r2, r3
 80043b4:	69b9      	ldr	r1, [r7, #24]
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7ff ff4b 	bl	8004252 <LL_GPIO_SetAFPin_0_7>
 80043bc:	e006      	b.n	80043cc <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	461a      	mov	r2, r3
 80043c4:	69b9      	ldr	r1, [r7, #24]
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff ff72 	bl	80042b0 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	461a      	mov	r2, r3
 80043d2:	69b9      	ldr	r1, [r7, #24]
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f7ff fe97 	bl	8004108 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	3301      	adds	r3, #1
 80043de:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	fa22 f303 	lsr.w	r3, r2, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1a7      	bne.n	800433e <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3720      	adds	r7, #32
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80043fc:	4b04      	ldr	r3, [pc, #16]	; (8004410 <LL_RCC_GetSysClkSource+0x18>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f003 030c 	and.w	r3, r3, #12
}
 8004404:	4618      	mov	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	40023800 	.word	0x40023800

08004414 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004418:	4b04      	ldr	r3, [pc, #16]	; (800442c <LL_RCC_GetAHBPrescaler+0x18>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004420:	4618      	mov	r0, r3
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	40023800 	.word	0x40023800

08004430 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004434:	4b04      	ldr	r3, [pc, #16]	; (8004448 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 800443c:	4618      	mov	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	40023800 	.word	0x40023800

0800444c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004450:	4b04      	ldr	r3, [pc, #16]	; (8004464 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004458:	4618      	mov	r0, r3
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	40023800 	.word	0x40023800

08004468 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800446c:	4b04      	ldr	r3, [pc, #16]	; (8004480 <LL_RCC_PLL_GetMainSource+0x18>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8004474:	4618      	mov	r0, r3
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	40023800 	.word	0x40023800

08004484 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004488:	4b04      	ldr	r3, [pc, #16]	; (800449c <LL_RCC_PLL_GetN+0x18>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	099b      	lsrs	r3, r3, #6
 800448e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004492:	4618      	mov	r0, r3
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	40023800 	.word	0x40023800

080044a0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80044a4:	4b04      	ldr	r3, [pc, #16]	; (80044b8 <LL_RCC_PLL_GetP+0x18>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40023800 	.word	0x40023800

080044bc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80044c0:	4b04      	ldr	r3, [pc, #16]	; (80044d4 <LL_RCC_PLL_GetDivider+0x18>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	40023800 	.word	0x40023800

080044d8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80044e0:	f000 f820 	bl	8004524 <RCC_GetSystemClockFreq>
 80044e4:	4602      	mov	r2, r0
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 f83e 	bl	8004570 <RCC_GetHCLKClockFreq>
 80044f4:	4602      	mov	r2, r0
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 f84c 	bl	800459c <RCC_GetPCLK1ClockFreq>
 8004504:	4602      	mov	r2, r0
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	4618      	mov	r0, r3
 8004510:	f000 f858 	bl	80045c4 <RCC_GetPCLK2ClockFreq>
 8004514:	4602      	mov	r2, r0
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	60da      	str	r2, [r3, #12]
}
 800451a:	bf00      	nop
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
	...

08004524 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800452e:	f7ff ff63 	bl	80043f8 <LL_RCC_GetSysClkSource>
 8004532:	4603      	mov	r3, r0
 8004534:	2b04      	cmp	r3, #4
 8004536:	d006      	beq.n	8004546 <RCC_GetSystemClockFreq+0x22>
 8004538:	2b08      	cmp	r3, #8
 800453a:	d007      	beq.n	800454c <RCC_GetSystemClockFreq+0x28>
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10a      	bne.n	8004556 <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004540:	4b09      	ldr	r3, [pc, #36]	; (8004568 <RCC_GetSystemClockFreq+0x44>)
 8004542:	607b      	str	r3, [r7, #4]
      break;
 8004544:	e00a      	b.n	800455c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004546:	4b09      	ldr	r3, [pc, #36]	; (800456c <RCC_GetSystemClockFreq+0x48>)
 8004548:	607b      	str	r3, [r7, #4]
      break;
 800454a:	e007      	b.n	800455c <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800454c:	2008      	movs	r0, #8
 800454e:	f000 f84d 	bl	80045ec <RCC_PLL_GetFreqDomain_SYS>
 8004552:	6078      	str	r0, [r7, #4]
      break;
 8004554:	e002      	b.n	800455c <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8004556:	4b04      	ldr	r3, [pc, #16]	; (8004568 <RCC_GetSystemClockFreq+0x44>)
 8004558:	607b      	str	r3, [r7, #4]
      break;
 800455a:	bf00      	nop
  }

  return frequency;
 800455c:	687b      	ldr	r3, [r7, #4]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	00f42400 	.word	0x00f42400
 800456c:	017d7840 	.word	0x017d7840

08004570 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004578:	f7ff ff4c 	bl	8004414 <LL_RCC_GetAHBPrescaler>
 800457c:	4603      	mov	r3, r0
 800457e:	091b      	lsrs	r3, r3, #4
 8004580:	f003 030f 	and.w	r3, r3, #15
 8004584:	4a04      	ldr	r2, [pc, #16]	; (8004598 <RCC_GetHCLKClockFreq+0x28>)
 8004586:	5cd3      	ldrb	r3, [r2, r3]
 8004588:	461a      	mov	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	40d3      	lsrs	r3, r2
}
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	0800724c 	.word	0x0800724c

0800459c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80045a4:	f7ff ff44 	bl	8004430 <LL_RCC_GetAPB1Prescaler>
 80045a8:	4603      	mov	r3, r0
 80045aa:	0a9b      	lsrs	r3, r3, #10
 80045ac:	4a04      	ldr	r2, [pc, #16]	; (80045c0 <RCC_GetPCLK1ClockFreq+0x24>)
 80045ae:	5cd3      	ldrb	r3, [r2, r3]
 80045b0:	461a      	mov	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	40d3      	lsrs	r3, r2
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	0800725c 	.word	0x0800725c

080045c4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80045cc:	f7ff ff3e 	bl	800444c <LL_RCC_GetAPB2Prescaler>
 80045d0:	4603      	mov	r3, r0
 80045d2:	0b5b      	lsrs	r3, r3, #13
 80045d4:	4a04      	ldr	r2, [pc, #16]	; (80045e8 <RCC_GetPCLK2ClockFreq+0x24>)
 80045d6:	5cd3      	ldrb	r3, [r2, r3]
 80045d8:	461a      	mov	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	40d3      	lsrs	r3, r2
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	0800725c 	.word	0x0800725c

080045ec <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80045ec:	b590      	push	{r4, r7, lr}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	2300      	movs	r3, #0
 80045fe:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004600:	f7ff ff32 	bl	8004468 <LL_RCC_PLL_GetMainSource>
 8004604:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <RCC_PLL_GetFreqDomain_SYS+0x28>
 800460c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004610:	d003      	beq.n	800461a <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8004612:	e005      	b.n	8004620 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004614:	4b12      	ldr	r3, [pc, #72]	; (8004660 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004616:	617b      	str	r3, [r7, #20]
      break;
 8004618:	e005      	b.n	8004626 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800461a:	4b12      	ldr	r3, [pc, #72]	; (8004664 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800461c:	617b      	str	r3, [r7, #20]
      break;
 800461e:	e002      	b.n	8004626 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8004620:	4b0f      	ldr	r3, [pc, #60]	; (8004660 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004622:	617b      	str	r3, [r7, #20]
      break;
 8004624:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b08      	cmp	r3, #8
 800462a:	d113      	bne.n	8004654 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800462c:	f7ff ff46 	bl	80044bc <LL_RCC_PLL_GetDivider>
 8004630:	4602      	mov	r2, r0
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	fbb3 f4f2 	udiv	r4, r3, r2
 8004638:	f7ff ff24 	bl	8004484 <LL_RCC_PLL_GetN>
 800463c:	4603      	mov	r3, r0
 800463e:	fb03 f404 	mul.w	r4, r3, r4
 8004642:	f7ff ff2d 	bl	80044a0 <LL_RCC_PLL_GetP>
 8004646:	4603      	mov	r3, r0
 8004648:	0c1b      	lsrs	r3, r3, #16
 800464a:	3301      	adds	r3, #1
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	fbb4 f3f3 	udiv	r3, r4, r3
 8004652:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8004654:	693b      	ldr	r3, [r7, #16]
}
 8004656:	4618      	mov	r0, r3
 8004658:	371c      	adds	r7, #28
 800465a:	46bd      	mov	sp, r7
 800465c:	bd90      	pop	{r4, r7, pc}
 800465e:	bf00      	nop
 8004660:	00f42400 	.word	0x00f42400
 8004664:	017d7840 	.word	0x017d7840

08004668 <LL_USART_IsEnabled>:
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800467c:	bf0c      	ite	eq
 800467e:	2301      	moveq	r3, #1
 8004680:	2300      	movne	r3, #0
 8004682:	b2db      	uxtb	r3, r3
}
 8004684:	4618      	mov	r0, r3
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <LL_USART_SetStopBitsLength>:
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	611a      	str	r2, [r3, #16]
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <LL_USART_SetHWFlowCtrl>:
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	615a      	str	r2, [r3, #20]
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <LL_USART_SetBaudRate>:
{
 80046dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e0:	b085      	sub	sp, #20
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	60f8      	str	r0, [r7, #12]
 80046e6:	60b9      	str	r1, [r7, #8]
 80046e8:	607a      	str	r2, [r7, #4]
 80046ea:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046f2:	f040 80c1 	bne.w	8004878 <LL_USART_SetBaudRate+0x19c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	461d      	mov	r5, r3
 80046fa:	f04f 0600 	mov.w	r6, #0
 80046fe:	46a8      	mov	r8, r5
 8004700:	46b1      	mov	r9, r6
 8004702:	eb18 0308 	adds.w	r3, r8, r8
 8004706:	eb49 0409 	adc.w	r4, r9, r9
 800470a:	4698      	mov	r8, r3
 800470c:	46a1      	mov	r9, r4
 800470e:	eb18 0805 	adds.w	r8, r8, r5
 8004712:	eb49 0906 	adc.w	r9, r9, r6
 8004716:	f04f 0100 	mov.w	r1, #0
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004722:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004726:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800472a:	4688      	mov	r8, r1
 800472c:	4691      	mov	r9, r2
 800472e:	eb18 0005 	adds.w	r0, r8, r5
 8004732:	eb49 0106 	adc.w	r1, r9, r6
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	461d      	mov	r5, r3
 800473a:	f04f 0600 	mov.w	r6, #0
 800473e:	196b      	adds	r3, r5, r5
 8004740:	eb46 0406 	adc.w	r4, r6, r6
 8004744:	461a      	mov	r2, r3
 8004746:	4623      	mov	r3, r4
 8004748:	f7fc fa3e 	bl	8000bc8 <__aeabi_uldivmod>
 800474c:	4603      	mov	r3, r0
 800474e:	460c      	mov	r4, r1
 8004750:	461a      	mov	r2, r3
 8004752:	4bb5      	ldr	r3, [pc, #724]	; (8004a28 <LL_USART_SetBaudRate+0x34c>)
 8004754:	fba3 2302 	umull	r2, r3, r3, r2
 8004758:	095b      	lsrs	r3, r3, #5
 800475a:	b29b      	uxth	r3, r3
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	fa1f f883 	uxth.w	r8, r3
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	461d      	mov	r5, r3
 8004766:	f04f 0600 	mov.w	r6, #0
 800476a:	46a9      	mov	r9, r5
 800476c:	46b2      	mov	sl, r6
 800476e:	eb19 0309 	adds.w	r3, r9, r9
 8004772:	eb4a 040a 	adc.w	r4, sl, sl
 8004776:	4699      	mov	r9, r3
 8004778:	46a2      	mov	sl, r4
 800477a:	eb19 0905 	adds.w	r9, r9, r5
 800477e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004782:	f04f 0100 	mov.w	r1, #0
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800478e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004792:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004796:	4689      	mov	r9, r1
 8004798:	4692      	mov	sl, r2
 800479a:	eb19 0005 	adds.w	r0, r9, r5
 800479e:	eb4a 0106 	adc.w	r1, sl, r6
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	461d      	mov	r5, r3
 80047a6:	f04f 0600 	mov.w	r6, #0
 80047aa:	196b      	adds	r3, r5, r5
 80047ac:	eb46 0406 	adc.w	r4, r6, r6
 80047b0:	461a      	mov	r2, r3
 80047b2:	4623      	mov	r3, r4
 80047b4:	f7fc fa08 	bl	8000bc8 <__aeabi_uldivmod>
 80047b8:	4603      	mov	r3, r0
 80047ba:	460c      	mov	r4, r1
 80047bc:	461a      	mov	r2, r3
 80047be:	4b9a      	ldr	r3, [pc, #616]	; (8004a28 <LL_USART_SetBaudRate+0x34c>)
 80047c0:	fba3 1302 	umull	r1, r3, r3, r2
 80047c4:	095b      	lsrs	r3, r3, #5
 80047c6:	2164      	movs	r1, #100	; 0x64
 80047c8:	fb01 f303 	mul.w	r3, r1, r3
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	3332      	adds	r3, #50	; 0x32
 80047d2:	4a95      	ldr	r2, [pc, #596]	; (8004a28 <LL_USART_SetBaudRate+0x34c>)
 80047d4:	fba2 2303 	umull	r2, r3, r2, r3
 80047d8:	095b      	lsrs	r3, r3, #5
 80047da:	b29b      	uxth	r3, r3
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	b29b      	uxth	r3, r3
 80047e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	4443      	add	r3, r8
 80047e8:	fa1f f883 	uxth.w	r8, r3
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	461d      	mov	r5, r3
 80047f0:	f04f 0600 	mov.w	r6, #0
 80047f4:	46a9      	mov	r9, r5
 80047f6:	46b2      	mov	sl, r6
 80047f8:	eb19 0309 	adds.w	r3, r9, r9
 80047fc:	eb4a 040a 	adc.w	r4, sl, sl
 8004800:	4699      	mov	r9, r3
 8004802:	46a2      	mov	sl, r4
 8004804:	eb19 0905 	adds.w	r9, r9, r5
 8004808:	eb4a 0a06 	adc.w	sl, sl, r6
 800480c:	f04f 0100 	mov.w	r1, #0
 8004810:	f04f 0200 	mov.w	r2, #0
 8004814:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004818:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800481c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004820:	4689      	mov	r9, r1
 8004822:	4692      	mov	sl, r2
 8004824:	eb19 0005 	adds.w	r0, r9, r5
 8004828:	eb4a 0106 	adc.w	r1, sl, r6
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	461d      	mov	r5, r3
 8004830:	f04f 0600 	mov.w	r6, #0
 8004834:	196b      	adds	r3, r5, r5
 8004836:	eb46 0406 	adc.w	r4, r6, r6
 800483a:	461a      	mov	r2, r3
 800483c:	4623      	mov	r3, r4
 800483e:	f7fc f9c3 	bl	8000bc8 <__aeabi_uldivmod>
 8004842:	4603      	mov	r3, r0
 8004844:	460c      	mov	r4, r1
 8004846:	461a      	mov	r2, r3
 8004848:	4b77      	ldr	r3, [pc, #476]	; (8004a28 <LL_USART_SetBaudRate+0x34c>)
 800484a:	fba3 1302 	umull	r1, r3, r3, r2
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	2164      	movs	r1, #100	; 0x64
 8004852:	fb01 f303 	mul.w	r3, r1, r3
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	00db      	lsls	r3, r3, #3
 800485a:	3332      	adds	r3, #50	; 0x32
 800485c:	4a72      	ldr	r2, [pc, #456]	; (8004a28 <LL_USART_SetBaudRate+0x34c>)
 800485e:	fba2 2303 	umull	r2, r3, r2, r3
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	b29b      	uxth	r3, r3
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	b29b      	uxth	r3, r3
 800486c:	4443      	add	r3, r8
 800486e:	b29b      	uxth	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	609a      	str	r2, [r3, #8]
}
 8004876:	e0d2      	b.n	8004a1e <LL_USART_SetBaudRate+0x342>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	469a      	mov	sl, r3
 800487c:	f04f 0b00 	mov.w	fp, #0
 8004880:	46d0      	mov	r8, sl
 8004882:	46d9      	mov	r9, fp
 8004884:	eb18 0308 	adds.w	r3, r8, r8
 8004888:	eb49 0409 	adc.w	r4, r9, r9
 800488c:	4698      	mov	r8, r3
 800488e:	46a1      	mov	r9, r4
 8004890:	eb18 080a 	adds.w	r8, r8, sl
 8004894:	eb49 090b 	adc.w	r9, r9, fp
 8004898:	f04f 0100 	mov.w	r1, #0
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80048a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80048a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80048ac:	4688      	mov	r8, r1
 80048ae:	4691      	mov	r9, r2
 80048b0:	eb1a 0508 	adds.w	r5, sl, r8
 80048b4:	eb4b 0609 	adc.w	r6, fp, r9
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	4619      	mov	r1, r3
 80048bc:	f04f 0200 	mov.w	r2, #0
 80048c0:	f04f 0300 	mov.w	r3, #0
 80048c4:	f04f 0400 	mov.w	r4, #0
 80048c8:	0094      	lsls	r4, r2, #2
 80048ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80048ce:	008b      	lsls	r3, r1, #2
 80048d0:	461a      	mov	r2, r3
 80048d2:	4623      	mov	r3, r4
 80048d4:	4628      	mov	r0, r5
 80048d6:	4631      	mov	r1, r6
 80048d8:	f7fc f976 	bl	8000bc8 <__aeabi_uldivmod>
 80048dc:	4603      	mov	r3, r0
 80048de:	460c      	mov	r4, r1
 80048e0:	461a      	mov	r2, r3
 80048e2:	4b51      	ldr	r3, [pc, #324]	; (8004a28 <LL_USART_SetBaudRate+0x34c>)
 80048e4:	fba3 2302 	umull	r2, r3, r3, r2
 80048e8:	095b      	lsrs	r3, r3, #5
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	fa1f f883 	uxth.w	r8, r3
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	469b      	mov	fp, r3
 80048f6:	f04f 0c00 	mov.w	ip, #0
 80048fa:	46d9      	mov	r9, fp
 80048fc:	46e2      	mov	sl, ip
 80048fe:	eb19 0309 	adds.w	r3, r9, r9
 8004902:	eb4a 040a 	adc.w	r4, sl, sl
 8004906:	4699      	mov	r9, r3
 8004908:	46a2      	mov	sl, r4
 800490a:	eb19 090b 	adds.w	r9, r9, fp
 800490e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004912:	f04f 0100 	mov.w	r1, #0
 8004916:	f04f 0200 	mov.w	r2, #0
 800491a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800491e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004922:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004926:	4689      	mov	r9, r1
 8004928:	4692      	mov	sl, r2
 800492a:	eb1b 0509 	adds.w	r5, fp, r9
 800492e:	eb4c 060a 	adc.w	r6, ip, sl
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	4619      	mov	r1, r3
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	f04f 0400 	mov.w	r4, #0
 8004942:	0094      	lsls	r4, r2, #2
 8004944:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004948:	008b      	lsls	r3, r1, #2
 800494a:	461a      	mov	r2, r3
 800494c:	4623      	mov	r3, r4
 800494e:	4628      	mov	r0, r5
 8004950:	4631      	mov	r1, r6
 8004952:	f7fc f939 	bl	8000bc8 <__aeabi_uldivmod>
 8004956:	4603      	mov	r3, r0
 8004958:	460c      	mov	r4, r1
 800495a:	461a      	mov	r2, r3
 800495c:	4b32      	ldr	r3, [pc, #200]	; (8004a28 <LL_USART_SetBaudRate+0x34c>)
 800495e:	fba3 1302 	umull	r1, r3, r3, r2
 8004962:	095b      	lsrs	r3, r3, #5
 8004964:	2164      	movs	r1, #100	; 0x64
 8004966:	fb01 f303 	mul.w	r3, r1, r3
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	011b      	lsls	r3, r3, #4
 800496e:	3332      	adds	r3, #50	; 0x32
 8004970:	4a2d      	ldr	r2, [pc, #180]	; (8004a28 <LL_USART_SetBaudRate+0x34c>)
 8004972:	fba2 2303 	umull	r2, r3, r2, r3
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	b29b      	uxth	r3, r3
 800497a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800497e:	b29b      	uxth	r3, r3
 8004980:	4443      	add	r3, r8
 8004982:	fa1f f883 	uxth.w	r8, r3
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	469b      	mov	fp, r3
 800498a:	f04f 0c00 	mov.w	ip, #0
 800498e:	46d9      	mov	r9, fp
 8004990:	46e2      	mov	sl, ip
 8004992:	eb19 0309 	adds.w	r3, r9, r9
 8004996:	eb4a 040a 	adc.w	r4, sl, sl
 800499a:	4699      	mov	r9, r3
 800499c:	46a2      	mov	sl, r4
 800499e:	eb19 090b 	adds.w	r9, r9, fp
 80049a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80049a6:	f04f 0100 	mov.w	r1, #0
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80049b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80049ba:	4689      	mov	r9, r1
 80049bc:	4692      	mov	sl, r2
 80049be:	eb1b 0509 	adds.w	r5, fp, r9
 80049c2:	eb4c 060a 	adc.w	r6, ip, sl
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	4619      	mov	r1, r3
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	f04f 0400 	mov.w	r4, #0
 80049d6:	0094      	lsls	r4, r2, #2
 80049d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80049dc:	008b      	lsls	r3, r1, #2
 80049de:	461a      	mov	r2, r3
 80049e0:	4623      	mov	r3, r4
 80049e2:	4628      	mov	r0, r5
 80049e4:	4631      	mov	r1, r6
 80049e6:	f7fc f8ef 	bl	8000bc8 <__aeabi_uldivmod>
 80049ea:	4603      	mov	r3, r0
 80049ec:	460c      	mov	r4, r1
 80049ee:	461a      	mov	r2, r3
 80049f0:	4b0d      	ldr	r3, [pc, #52]	; (8004a28 <LL_USART_SetBaudRate+0x34c>)
 80049f2:	fba3 1302 	umull	r1, r3, r3, r2
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	2164      	movs	r1, #100	; 0x64
 80049fa:	fb01 f303 	mul.w	r3, r1, r3
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	3332      	adds	r3, #50	; 0x32
 8004a04:	4a08      	ldr	r2, [pc, #32]	; (8004a28 <LL_USART_SetBaudRate+0x34c>)
 8004a06:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0a:	095b      	lsrs	r3, r3, #5
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	4443      	add	r3, r8
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	461a      	mov	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	609a      	str	r2, [r3, #8]
}
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a28:	51eb851f 	.word	0x51eb851f

08004a2c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b088      	sub	sp, #32
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7ff fe12 	bl	8004668 <LL_USART_IsEnabled>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d16c      	bne.n	8004b24 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004a52:	f023 030c 	bic.w	r3, r3, #12
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	6851      	ldr	r1, [r2, #4]
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	68d2      	ldr	r2, [r2, #12]
 8004a5e:	4311      	orrs	r1, r2
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	6912      	ldr	r2, [r2, #16]
 8004a64:	4311      	orrs	r1, r2
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	6992      	ldr	r2, [r2, #24]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	4619      	mov	r1, r3
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7ff fe09 	bl	8004690 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	4619      	mov	r1, r3
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7ff fe16 	bl	80046b6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004a8a:	f107 0308 	add.w	r3, r7, #8
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7ff fd22 	bl	80044d8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a26      	ldr	r2, [pc, #152]	; (8004b30 <LL_USART_Init+0x104>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d102      	bne.n	8004aa2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	61bb      	str	r3, [r7, #24]
 8004aa0:	e02f      	b.n	8004b02 <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a23      	ldr	r2, [pc, #140]	; (8004b34 <LL_USART_Init+0x108>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d102      	bne.n	8004ab0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	61bb      	str	r3, [r7, #24]
 8004aae:	e028      	b.n	8004b02 <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a21      	ldr	r2, [pc, #132]	; (8004b38 <LL_USART_Init+0x10c>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d102      	bne.n	8004abe <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	61bb      	str	r3, [r7, #24]
 8004abc:	e021      	b.n	8004b02 <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a1e      	ldr	r2, [pc, #120]	; (8004b3c <LL_USART_Init+0x110>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d102      	bne.n	8004acc <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	61bb      	str	r3, [r7, #24]
 8004aca:	e01a      	b.n	8004b02 <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a1c      	ldr	r2, [pc, #112]	; (8004b40 <LL_USART_Init+0x114>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d102      	bne.n	8004ada <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	61bb      	str	r3, [r7, #24]
 8004ad8:	e013      	b.n	8004b02 <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a19      	ldr	r2, [pc, #100]	; (8004b44 <LL_USART_Init+0x118>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d102      	bne.n	8004ae8 <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	61bb      	str	r3, [r7, #24]
 8004ae6:	e00c      	b.n	8004b02 <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a17      	ldr	r2, [pc, #92]	; (8004b48 <LL_USART_Init+0x11c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d102      	bne.n	8004af6 <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	61bb      	str	r3, [r7, #24]
 8004af4:	e005      	b.n	8004b02 <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a14      	ldr	r2, [pc, #80]	; (8004b4c <LL_USART_Init+0x120>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d101      	bne.n	8004b02 <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00d      	beq.n	8004b24 <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d009      	beq.n	8004b24 <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 8004b10:	2300      	movs	r3, #0
 8004b12:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	699a      	ldr	r2, [r3, #24]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	69b9      	ldr	r1, [r7, #24]
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7ff fddc 	bl	80046dc <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004b24:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3720      	adds	r7, #32
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	40011000 	.word	0x40011000
 8004b34:	40004400 	.word	0x40004400
 8004b38:	40004800 	.word	0x40004800
 8004b3c:	40011400 	.word	0x40011400
 8004b40:	40004c00 	.word	0x40004c00
 8004b44:	40005000 	.word	0x40005000
 8004b48:	40007800 	.word	0x40007800
 8004b4c:	40007c00 	.word	0x40007c00

08004b50 <__errno>:
 8004b50:	4b01      	ldr	r3, [pc, #4]	; (8004b58 <__errno+0x8>)
 8004b52:	6818      	ldr	r0, [r3, #0]
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	2000000c 	.word	0x2000000c

08004b5c <__libc_init_array>:
 8004b5c:	b570      	push	{r4, r5, r6, lr}
 8004b5e:	4e0d      	ldr	r6, [pc, #52]	; (8004b94 <__libc_init_array+0x38>)
 8004b60:	4c0d      	ldr	r4, [pc, #52]	; (8004b98 <__libc_init_array+0x3c>)
 8004b62:	1ba4      	subs	r4, r4, r6
 8004b64:	10a4      	asrs	r4, r4, #2
 8004b66:	2500      	movs	r5, #0
 8004b68:	42a5      	cmp	r5, r4
 8004b6a:	d109      	bne.n	8004b80 <__libc_init_array+0x24>
 8004b6c:	4e0b      	ldr	r6, [pc, #44]	; (8004b9c <__libc_init_array+0x40>)
 8004b6e:	4c0c      	ldr	r4, [pc, #48]	; (8004ba0 <__libc_init_array+0x44>)
 8004b70:	f002 fb48 	bl	8007204 <_init>
 8004b74:	1ba4      	subs	r4, r4, r6
 8004b76:	10a4      	asrs	r4, r4, #2
 8004b78:	2500      	movs	r5, #0
 8004b7a:	42a5      	cmp	r5, r4
 8004b7c:	d105      	bne.n	8004b8a <__libc_init_array+0x2e>
 8004b7e:	bd70      	pop	{r4, r5, r6, pc}
 8004b80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b84:	4798      	blx	r3
 8004b86:	3501      	adds	r5, #1
 8004b88:	e7ee      	b.n	8004b68 <__libc_init_array+0xc>
 8004b8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b8e:	4798      	blx	r3
 8004b90:	3501      	adds	r5, #1
 8004b92:	e7f2      	b.n	8004b7a <__libc_init_array+0x1e>
 8004b94:	08007530 	.word	0x08007530
 8004b98:	08007530 	.word	0x08007530
 8004b9c:	08007530 	.word	0x08007530
 8004ba0:	08007534 	.word	0x08007534

08004ba4 <memset>:
 8004ba4:	4402      	add	r2, r0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d100      	bne.n	8004bae <memset+0xa>
 8004bac:	4770      	bx	lr
 8004bae:	f803 1b01 	strb.w	r1, [r3], #1
 8004bb2:	e7f9      	b.n	8004ba8 <memset+0x4>

08004bb4 <__cvt>:
 8004bb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bb8:	ec55 4b10 	vmov	r4, r5, d0
 8004bbc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004bbe:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004bc2:	2d00      	cmp	r5, #0
 8004bc4:	460e      	mov	r6, r1
 8004bc6:	4691      	mov	r9, r2
 8004bc8:	4619      	mov	r1, r3
 8004bca:	bfb8      	it	lt
 8004bcc:	4622      	movlt	r2, r4
 8004bce:	462b      	mov	r3, r5
 8004bd0:	f027 0720 	bic.w	r7, r7, #32
 8004bd4:	bfbb      	ittet	lt
 8004bd6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004bda:	461d      	movlt	r5, r3
 8004bdc:	2300      	movge	r3, #0
 8004bde:	232d      	movlt	r3, #45	; 0x2d
 8004be0:	bfb8      	it	lt
 8004be2:	4614      	movlt	r4, r2
 8004be4:	2f46      	cmp	r7, #70	; 0x46
 8004be6:	700b      	strb	r3, [r1, #0]
 8004be8:	d004      	beq.n	8004bf4 <__cvt+0x40>
 8004bea:	2f45      	cmp	r7, #69	; 0x45
 8004bec:	d100      	bne.n	8004bf0 <__cvt+0x3c>
 8004bee:	3601      	adds	r6, #1
 8004bf0:	2102      	movs	r1, #2
 8004bf2:	e000      	b.n	8004bf6 <__cvt+0x42>
 8004bf4:	2103      	movs	r1, #3
 8004bf6:	ab03      	add	r3, sp, #12
 8004bf8:	9301      	str	r3, [sp, #4]
 8004bfa:	ab02      	add	r3, sp, #8
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	4632      	mov	r2, r6
 8004c00:	4653      	mov	r3, sl
 8004c02:	ec45 4b10 	vmov	d0, r4, r5
 8004c06:	f000 fcd7 	bl	80055b8 <_dtoa_r>
 8004c0a:	2f47      	cmp	r7, #71	; 0x47
 8004c0c:	4680      	mov	r8, r0
 8004c0e:	d102      	bne.n	8004c16 <__cvt+0x62>
 8004c10:	f019 0f01 	tst.w	r9, #1
 8004c14:	d026      	beq.n	8004c64 <__cvt+0xb0>
 8004c16:	2f46      	cmp	r7, #70	; 0x46
 8004c18:	eb08 0906 	add.w	r9, r8, r6
 8004c1c:	d111      	bne.n	8004c42 <__cvt+0x8e>
 8004c1e:	f898 3000 	ldrb.w	r3, [r8]
 8004c22:	2b30      	cmp	r3, #48	; 0x30
 8004c24:	d10a      	bne.n	8004c3c <__cvt+0x88>
 8004c26:	2200      	movs	r2, #0
 8004c28:	2300      	movs	r3, #0
 8004c2a:	4620      	mov	r0, r4
 8004c2c:	4629      	mov	r1, r5
 8004c2e:	f7fb ff5b 	bl	8000ae8 <__aeabi_dcmpeq>
 8004c32:	b918      	cbnz	r0, 8004c3c <__cvt+0x88>
 8004c34:	f1c6 0601 	rsb	r6, r6, #1
 8004c38:	f8ca 6000 	str.w	r6, [sl]
 8004c3c:	f8da 3000 	ldr.w	r3, [sl]
 8004c40:	4499      	add	r9, r3
 8004c42:	2200      	movs	r2, #0
 8004c44:	2300      	movs	r3, #0
 8004c46:	4620      	mov	r0, r4
 8004c48:	4629      	mov	r1, r5
 8004c4a:	f7fb ff4d 	bl	8000ae8 <__aeabi_dcmpeq>
 8004c4e:	b938      	cbnz	r0, 8004c60 <__cvt+0xac>
 8004c50:	2230      	movs	r2, #48	; 0x30
 8004c52:	9b03      	ldr	r3, [sp, #12]
 8004c54:	454b      	cmp	r3, r9
 8004c56:	d205      	bcs.n	8004c64 <__cvt+0xb0>
 8004c58:	1c59      	adds	r1, r3, #1
 8004c5a:	9103      	str	r1, [sp, #12]
 8004c5c:	701a      	strb	r2, [r3, #0]
 8004c5e:	e7f8      	b.n	8004c52 <__cvt+0x9e>
 8004c60:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c64:	9b03      	ldr	r3, [sp, #12]
 8004c66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c68:	eba3 0308 	sub.w	r3, r3, r8
 8004c6c:	4640      	mov	r0, r8
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	b004      	add	sp, #16
 8004c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004c76 <__exponent>:
 8004c76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c78:	2900      	cmp	r1, #0
 8004c7a:	4604      	mov	r4, r0
 8004c7c:	bfba      	itte	lt
 8004c7e:	4249      	neglt	r1, r1
 8004c80:	232d      	movlt	r3, #45	; 0x2d
 8004c82:	232b      	movge	r3, #43	; 0x2b
 8004c84:	2909      	cmp	r1, #9
 8004c86:	f804 2b02 	strb.w	r2, [r4], #2
 8004c8a:	7043      	strb	r3, [r0, #1]
 8004c8c:	dd20      	ble.n	8004cd0 <__exponent+0x5a>
 8004c8e:	f10d 0307 	add.w	r3, sp, #7
 8004c92:	461f      	mov	r7, r3
 8004c94:	260a      	movs	r6, #10
 8004c96:	fb91 f5f6 	sdiv	r5, r1, r6
 8004c9a:	fb06 1115 	mls	r1, r6, r5, r1
 8004c9e:	3130      	adds	r1, #48	; 0x30
 8004ca0:	2d09      	cmp	r5, #9
 8004ca2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004ca6:	f103 32ff 	add.w	r2, r3, #4294967295
 8004caa:	4629      	mov	r1, r5
 8004cac:	dc09      	bgt.n	8004cc2 <__exponent+0x4c>
 8004cae:	3130      	adds	r1, #48	; 0x30
 8004cb0:	3b02      	subs	r3, #2
 8004cb2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004cb6:	42bb      	cmp	r3, r7
 8004cb8:	4622      	mov	r2, r4
 8004cba:	d304      	bcc.n	8004cc6 <__exponent+0x50>
 8004cbc:	1a10      	subs	r0, r2, r0
 8004cbe:	b003      	add	sp, #12
 8004cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	e7e7      	b.n	8004c96 <__exponent+0x20>
 8004cc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cca:	f804 2b01 	strb.w	r2, [r4], #1
 8004cce:	e7f2      	b.n	8004cb6 <__exponent+0x40>
 8004cd0:	2330      	movs	r3, #48	; 0x30
 8004cd2:	4419      	add	r1, r3
 8004cd4:	7083      	strb	r3, [r0, #2]
 8004cd6:	1d02      	adds	r2, r0, #4
 8004cd8:	70c1      	strb	r1, [r0, #3]
 8004cda:	e7ef      	b.n	8004cbc <__exponent+0x46>

08004cdc <_printf_float>:
 8004cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce0:	b08d      	sub	sp, #52	; 0x34
 8004ce2:	460c      	mov	r4, r1
 8004ce4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004ce8:	4616      	mov	r6, r2
 8004cea:	461f      	mov	r7, r3
 8004cec:	4605      	mov	r5, r0
 8004cee:	f001 fae5 	bl	80062bc <_localeconv_r>
 8004cf2:	6803      	ldr	r3, [r0, #0]
 8004cf4:	9304      	str	r3, [sp, #16]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fb fa7a 	bl	80001f0 <strlen>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	930a      	str	r3, [sp, #40]	; 0x28
 8004d00:	f8d8 3000 	ldr.w	r3, [r8]
 8004d04:	9005      	str	r0, [sp, #20]
 8004d06:	3307      	adds	r3, #7
 8004d08:	f023 0307 	bic.w	r3, r3, #7
 8004d0c:	f103 0208 	add.w	r2, r3, #8
 8004d10:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004d14:	f8d4 b000 	ldr.w	fp, [r4]
 8004d18:	f8c8 2000 	str.w	r2, [r8]
 8004d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d20:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004d24:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004d28:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d2c:	9307      	str	r3, [sp, #28]
 8004d2e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d32:	f04f 32ff 	mov.w	r2, #4294967295
 8004d36:	4ba7      	ldr	r3, [pc, #668]	; (8004fd4 <_printf_float+0x2f8>)
 8004d38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d3c:	f7fb ff06 	bl	8000b4c <__aeabi_dcmpun>
 8004d40:	bb70      	cbnz	r0, 8004da0 <_printf_float+0xc4>
 8004d42:	f04f 32ff 	mov.w	r2, #4294967295
 8004d46:	4ba3      	ldr	r3, [pc, #652]	; (8004fd4 <_printf_float+0x2f8>)
 8004d48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d4c:	f7fb fee0 	bl	8000b10 <__aeabi_dcmple>
 8004d50:	bb30      	cbnz	r0, 8004da0 <_printf_float+0xc4>
 8004d52:	2200      	movs	r2, #0
 8004d54:	2300      	movs	r3, #0
 8004d56:	4640      	mov	r0, r8
 8004d58:	4649      	mov	r1, r9
 8004d5a:	f7fb fecf 	bl	8000afc <__aeabi_dcmplt>
 8004d5e:	b110      	cbz	r0, 8004d66 <_printf_float+0x8a>
 8004d60:	232d      	movs	r3, #45	; 0x2d
 8004d62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d66:	4a9c      	ldr	r2, [pc, #624]	; (8004fd8 <_printf_float+0x2fc>)
 8004d68:	4b9c      	ldr	r3, [pc, #624]	; (8004fdc <_printf_float+0x300>)
 8004d6a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004d6e:	bf8c      	ite	hi
 8004d70:	4690      	movhi	r8, r2
 8004d72:	4698      	movls	r8, r3
 8004d74:	2303      	movs	r3, #3
 8004d76:	f02b 0204 	bic.w	r2, fp, #4
 8004d7a:	6123      	str	r3, [r4, #16]
 8004d7c:	6022      	str	r2, [r4, #0]
 8004d7e:	f04f 0900 	mov.w	r9, #0
 8004d82:	9700      	str	r7, [sp, #0]
 8004d84:	4633      	mov	r3, r6
 8004d86:	aa0b      	add	r2, sp, #44	; 0x2c
 8004d88:	4621      	mov	r1, r4
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	f000 f9e6 	bl	800515c <_printf_common>
 8004d90:	3001      	adds	r0, #1
 8004d92:	f040 808d 	bne.w	8004eb0 <_printf_float+0x1d4>
 8004d96:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9a:	b00d      	add	sp, #52	; 0x34
 8004d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004da0:	4642      	mov	r2, r8
 8004da2:	464b      	mov	r3, r9
 8004da4:	4640      	mov	r0, r8
 8004da6:	4649      	mov	r1, r9
 8004da8:	f7fb fed0 	bl	8000b4c <__aeabi_dcmpun>
 8004dac:	b110      	cbz	r0, 8004db4 <_printf_float+0xd8>
 8004dae:	4a8c      	ldr	r2, [pc, #560]	; (8004fe0 <_printf_float+0x304>)
 8004db0:	4b8c      	ldr	r3, [pc, #560]	; (8004fe4 <_printf_float+0x308>)
 8004db2:	e7da      	b.n	8004d6a <_printf_float+0x8e>
 8004db4:	6861      	ldr	r1, [r4, #4]
 8004db6:	1c4b      	adds	r3, r1, #1
 8004db8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004dbc:	a80a      	add	r0, sp, #40	; 0x28
 8004dbe:	d13e      	bne.n	8004e3e <_printf_float+0x162>
 8004dc0:	2306      	movs	r3, #6
 8004dc2:	6063      	str	r3, [r4, #4]
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004dca:	ab09      	add	r3, sp, #36	; 0x24
 8004dcc:	9300      	str	r3, [sp, #0]
 8004dce:	ec49 8b10 	vmov	d0, r8, r9
 8004dd2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004dd6:	6022      	str	r2, [r4, #0]
 8004dd8:	f8cd a004 	str.w	sl, [sp, #4]
 8004ddc:	6861      	ldr	r1, [r4, #4]
 8004dde:	4628      	mov	r0, r5
 8004de0:	f7ff fee8 	bl	8004bb4 <__cvt>
 8004de4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004de8:	2b47      	cmp	r3, #71	; 0x47
 8004dea:	4680      	mov	r8, r0
 8004dec:	d109      	bne.n	8004e02 <_printf_float+0x126>
 8004dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004df0:	1cd8      	adds	r0, r3, #3
 8004df2:	db02      	blt.n	8004dfa <_printf_float+0x11e>
 8004df4:	6862      	ldr	r2, [r4, #4]
 8004df6:	4293      	cmp	r3, r2
 8004df8:	dd47      	ble.n	8004e8a <_printf_float+0x1ae>
 8004dfa:	f1aa 0a02 	sub.w	sl, sl, #2
 8004dfe:	fa5f fa8a 	uxtb.w	sl, sl
 8004e02:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004e06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e08:	d824      	bhi.n	8004e54 <_printf_float+0x178>
 8004e0a:	3901      	subs	r1, #1
 8004e0c:	4652      	mov	r2, sl
 8004e0e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e12:	9109      	str	r1, [sp, #36]	; 0x24
 8004e14:	f7ff ff2f 	bl	8004c76 <__exponent>
 8004e18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e1a:	1813      	adds	r3, r2, r0
 8004e1c:	2a01      	cmp	r2, #1
 8004e1e:	4681      	mov	r9, r0
 8004e20:	6123      	str	r3, [r4, #16]
 8004e22:	dc02      	bgt.n	8004e2a <_printf_float+0x14e>
 8004e24:	6822      	ldr	r2, [r4, #0]
 8004e26:	07d1      	lsls	r1, r2, #31
 8004e28:	d501      	bpl.n	8004e2e <_printf_float+0x152>
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	6123      	str	r3, [r4, #16]
 8004e2e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d0a5      	beq.n	8004d82 <_printf_float+0xa6>
 8004e36:	232d      	movs	r3, #45	; 0x2d
 8004e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e3c:	e7a1      	b.n	8004d82 <_printf_float+0xa6>
 8004e3e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004e42:	f000 8177 	beq.w	8005134 <_printf_float+0x458>
 8004e46:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004e4a:	d1bb      	bne.n	8004dc4 <_printf_float+0xe8>
 8004e4c:	2900      	cmp	r1, #0
 8004e4e:	d1b9      	bne.n	8004dc4 <_printf_float+0xe8>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e7b6      	b.n	8004dc2 <_printf_float+0xe6>
 8004e54:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004e58:	d119      	bne.n	8004e8e <_printf_float+0x1b2>
 8004e5a:	2900      	cmp	r1, #0
 8004e5c:	6863      	ldr	r3, [r4, #4]
 8004e5e:	dd0c      	ble.n	8004e7a <_printf_float+0x19e>
 8004e60:	6121      	str	r1, [r4, #16]
 8004e62:	b913      	cbnz	r3, 8004e6a <_printf_float+0x18e>
 8004e64:	6822      	ldr	r2, [r4, #0]
 8004e66:	07d2      	lsls	r2, r2, #31
 8004e68:	d502      	bpl.n	8004e70 <_printf_float+0x194>
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	440b      	add	r3, r1
 8004e6e:	6123      	str	r3, [r4, #16]
 8004e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e72:	65a3      	str	r3, [r4, #88]	; 0x58
 8004e74:	f04f 0900 	mov.w	r9, #0
 8004e78:	e7d9      	b.n	8004e2e <_printf_float+0x152>
 8004e7a:	b913      	cbnz	r3, 8004e82 <_printf_float+0x1a6>
 8004e7c:	6822      	ldr	r2, [r4, #0]
 8004e7e:	07d0      	lsls	r0, r2, #31
 8004e80:	d501      	bpl.n	8004e86 <_printf_float+0x1aa>
 8004e82:	3302      	adds	r3, #2
 8004e84:	e7f3      	b.n	8004e6e <_printf_float+0x192>
 8004e86:	2301      	movs	r3, #1
 8004e88:	e7f1      	b.n	8004e6e <_printf_float+0x192>
 8004e8a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004e8e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004e92:	4293      	cmp	r3, r2
 8004e94:	db05      	blt.n	8004ea2 <_printf_float+0x1c6>
 8004e96:	6822      	ldr	r2, [r4, #0]
 8004e98:	6123      	str	r3, [r4, #16]
 8004e9a:	07d1      	lsls	r1, r2, #31
 8004e9c:	d5e8      	bpl.n	8004e70 <_printf_float+0x194>
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	e7e5      	b.n	8004e6e <_printf_float+0x192>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	bfd4      	ite	le
 8004ea6:	f1c3 0302 	rsble	r3, r3, #2
 8004eaa:	2301      	movgt	r3, #1
 8004eac:	4413      	add	r3, r2
 8004eae:	e7de      	b.n	8004e6e <_printf_float+0x192>
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	055a      	lsls	r2, r3, #21
 8004eb4:	d407      	bmi.n	8004ec6 <_printf_float+0x1ea>
 8004eb6:	6923      	ldr	r3, [r4, #16]
 8004eb8:	4642      	mov	r2, r8
 8004eba:	4631      	mov	r1, r6
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	47b8      	blx	r7
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	d12b      	bne.n	8004f1c <_printf_float+0x240>
 8004ec4:	e767      	b.n	8004d96 <_printf_float+0xba>
 8004ec6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004eca:	f240 80dc 	bls.w	8005086 <_printf_float+0x3aa>
 8004ece:	2200      	movs	r2, #0
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ed6:	f7fb fe07 	bl	8000ae8 <__aeabi_dcmpeq>
 8004eda:	2800      	cmp	r0, #0
 8004edc:	d033      	beq.n	8004f46 <_printf_float+0x26a>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	4a41      	ldr	r2, [pc, #260]	; (8004fe8 <_printf_float+0x30c>)
 8004ee2:	4631      	mov	r1, r6
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	47b8      	blx	r7
 8004ee8:	3001      	adds	r0, #1
 8004eea:	f43f af54 	beq.w	8004d96 <_printf_float+0xba>
 8004eee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	db02      	blt.n	8004efc <_printf_float+0x220>
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	07d8      	lsls	r0, r3, #31
 8004efa:	d50f      	bpl.n	8004f1c <_printf_float+0x240>
 8004efc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f00:	4631      	mov	r1, r6
 8004f02:	4628      	mov	r0, r5
 8004f04:	47b8      	blx	r7
 8004f06:	3001      	adds	r0, #1
 8004f08:	f43f af45 	beq.w	8004d96 <_printf_float+0xba>
 8004f0c:	f04f 0800 	mov.w	r8, #0
 8004f10:	f104 091a 	add.w	r9, r4, #26
 8004f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f16:	3b01      	subs	r3, #1
 8004f18:	4543      	cmp	r3, r8
 8004f1a:	dc09      	bgt.n	8004f30 <_printf_float+0x254>
 8004f1c:	6823      	ldr	r3, [r4, #0]
 8004f1e:	079b      	lsls	r3, r3, #30
 8004f20:	f100 8103 	bmi.w	800512a <_printf_float+0x44e>
 8004f24:	68e0      	ldr	r0, [r4, #12]
 8004f26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f28:	4298      	cmp	r0, r3
 8004f2a:	bfb8      	it	lt
 8004f2c:	4618      	movlt	r0, r3
 8004f2e:	e734      	b.n	8004d9a <_printf_float+0xbe>
 8004f30:	2301      	movs	r3, #1
 8004f32:	464a      	mov	r2, r9
 8004f34:	4631      	mov	r1, r6
 8004f36:	4628      	mov	r0, r5
 8004f38:	47b8      	blx	r7
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	f43f af2b 	beq.w	8004d96 <_printf_float+0xba>
 8004f40:	f108 0801 	add.w	r8, r8, #1
 8004f44:	e7e6      	b.n	8004f14 <_printf_float+0x238>
 8004f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	dc2b      	bgt.n	8004fa4 <_printf_float+0x2c8>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	4a26      	ldr	r2, [pc, #152]	; (8004fe8 <_printf_float+0x30c>)
 8004f50:	4631      	mov	r1, r6
 8004f52:	4628      	mov	r0, r5
 8004f54:	47b8      	blx	r7
 8004f56:	3001      	adds	r0, #1
 8004f58:	f43f af1d 	beq.w	8004d96 <_printf_float+0xba>
 8004f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f5e:	b923      	cbnz	r3, 8004f6a <_printf_float+0x28e>
 8004f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f62:	b913      	cbnz	r3, 8004f6a <_printf_float+0x28e>
 8004f64:	6823      	ldr	r3, [r4, #0]
 8004f66:	07d9      	lsls	r1, r3, #31
 8004f68:	d5d8      	bpl.n	8004f1c <_printf_float+0x240>
 8004f6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f6e:	4631      	mov	r1, r6
 8004f70:	4628      	mov	r0, r5
 8004f72:	47b8      	blx	r7
 8004f74:	3001      	adds	r0, #1
 8004f76:	f43f af0e 	beq.w	8004d96 <_printf_float+0xba>
 8004f7a:	f04f 0900 	mov.w	r9, #0
 8004f7e:	f104 0a1a 	add.w	sl, r4, #26
 8004f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f84:	425b      	negs	r3, r3
 8004f86:	454b      	cmp	r3, r9
 8004f88:	dc01      	bgt.n	8004f8e <_printf_float+0x2b2>
 8004f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f8c:	e794      	b.n	8004eb8 <_printf_float+0x1dc>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	4652      	mov	r2, sl
 8004f92:	4631      	mov	r1, r6
 8004f94:	4628      	mov	r0, r5
 8004f96:	47b8      	blx	r7
 8004f98:	3001      	adds	r0, #1
 8004f9a:	f43f aefc 	beq.w	8004d96 <_printf_float+0xba>
 8004f9e:	f109 0901 	add.w	r9, r9, #1
 8004fa2:	e7ee      	b.n	8004f82 <_printf_float+0x2a6>
 8004fa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fa6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	bfa8      	it	ge
 8004fac:	461a      	movge	r2, r3
 8004fae:	2a00      	cmp	r2, #0
 8004fb0:	4691      	mov	r9, r2
 8004fb2:	dd07      	ble.n	8004fc4 <_printf_float+0x2e8>
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	4631      	mov	r1, r6
 8004fb8:	4642      	mov	r2, r8
 8004fba:	4628      	mov	r0, r5
 8004fbc:	47b8      	blx	r7
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	f43f aee9 	beq.w	8004d96 <_printf_float+0xba>
 8004fc4:	f104 031a 	add.w	r3, r4, #26
 8004fc8:	f04f 0b00 	mov.w	fp, #0
 8004fcc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fd0:	9306      	str	r3, [sp, #24]
 8004fd2:	e015      	b.n	8005000 <_printf_float+0x324>
 8004fd4:	7fefffff 	.word	0x7fefffff
 8004fd8:	0800726c 	.word	0x0800726c
 8004fdc:	08007268 	.word	0x08007268
 8004fe0:	08007274 	.word	0x08007274
 8004fe4:	08007270 	.word	0x08007270
 8004fe8:	08007278 	.word	0x08007278
 8004fec:	2301      	movs	r3, #1
 8004fee:	9a06      	ldr	r2, [sp, #24]
 8004ff0:	4631      	mov	r1, r6
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	47b8      	blx	r7
 8004ff6:	3001      	adds	r0, #1
 8004ff8:	f43f aecd 	beq.w	8004d96 <_printf_float+0xba>
 8004ffc:	f10b 0b01 	add.w	fp, fp, #1
 8005000:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005004:	ebaa 0309 	sub.w	r3, sl, r9
 8005008:	455b      	cmp	r3, fp
 800500a:	dcef      	bgt.n	8004fec <_printf_float+0x310>
 800500c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005010:	429a      	cmp	r2, r3
 8005012:	44d0      	add	r8, sl
 8005014:	db15      	blt.n	8005042 <_printf_float+0x366>
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	07da      	lsls	r2, r3, #31
 800501a:	d412      	bmi.n	8005042 <_printf_float+0x366>
 800501c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800501e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005020:	eba3 020a 	sub.w	r2, r3, sl
 8005024:	eba3 0a01 	sub.w	sl, r3, r1
 8005028:	4592      	cmp	sl, r2
 800502a:	bfa8      	it	ge
 800502c:	4692      	movge	sl, r2
 800502e:	f1ba 0f00 	cmp.w	sl, #0
 8005032:	dc0e      	bgt.n	8005052 <_printf_float+0x376>
 8005034:	f04f 0800 	mov.w	r8, #0
 8005038:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800503c:	f104 091a 	add.w	r9, r4, #26
 8005040:	e019      	b.n	8005076 <_printf_float+0x39a>
 8005042:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005046:	4631      	mov	r1, r6
 8005048:	4628      	mov	r0, r5
 800504a:	47b8      	blx	r7
 800504c:	3001      	adds	r0, #1
 800504e:	d1e5      	bne.n	800501c <_printf_float+0x340>
 8005050:	e6a1      	b.n	8004d96 <_printf_float+0xba>
 8005052:	4653      	mov	r3, sl
 8005054:	4642      	mov	r2, r8
 8005056:	4631      	mov	r1, r6
 8005058:	4628      	mov	r0, r5
 800505a:	47b8      	blx	r7
 800505c:	3001      	adds	r0, #1
 800505e:	d1e9      	bne.n	8005034 <_printf_float+0x358>
 8005060:	e699      	b.n	8004d96 <_printf_float+0xba>
 8005062:	2301      	movs	r3, #1
 8005064:	464a      	mov	r2, r9
 8005066:	4631      	mov	r1, r6
 8005068:	4628      	mov	r0, r5
 800506a:	47b8      	blx	r7
 800506c:	3001      	adds	r0, #1
 800506e:	f43f ae92 	beq.w	8004d96 <_printf_float+0xba>
 8005072:	f108 0801 	add.w	r8, r8, #1
 8005076:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800507a:	1a9b      	subs	r3, r3, r2
 800507c:	eba3 030a 	sub.w	r3, r3, sl
 8005080:	4543      	cmp	r3, r8
 8005082:	dcee      	bgt.n	8005062 <_printf_float+0x386>
 8005084:	e74a      	b.n	8004f1c <_printf_float+0x240>
 8005086:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005088:	2a01      	cmp	r2, #1
 800508a:	dc01      	bgt.n	8005090 <_printf_float+0x3b4>
 800508c:	07db      	lsls	r3, r3, #31
 800508e:	d53a      	bpl.n	8005106 <_printf_float+0x42a>
 8005090:	2301      	movs	r3, #1
 8005092:	4642      	mov	r2, r8
 8005094:	4631      	mov	r1, r6
 8005096:	4628      	mov	r0, r5
 8005098:	47b8      	blx	r7
 800509a:	3001      	adds	r0, #1
 800509c:	f43f ae7b 	beq.w	8004d96 <_printf_float+0xba>
 80050a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050a4:	4631      	mov	r1, r6
 80050a6:	4628      	mov	r0, r5
 80050a8:	47b8      	blx	r7
 80050aa:	3001      	adds	r0, #1
 80050ac:	f108 0801 	add.w	r8, r8, #1
 80050b0:	f43f ae71 	beq.w	8004d96 <_printf_float+0xba>
 80050b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050b6:	2200      	movs	r2, #0
 80050b8:	f103 3aff 	add.w	sl, r3, #4294967295
 80050bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050c0:	2300      	movs	r3, #0
 80050c2:	f7fb fd11 	bl	8000ae8 <__aeabi_dcmpeq>
 80050c6:	b9c8      	cbnz	r0, 80050fc <_printf_float+0x420>
 80050c8:	4653      	mov	r3, sl
 80050ca:	4642      	mov	r2, r8
 80050cc:	4631      	mov	r1, r6
 80050ce:	4628      	mov	r0, r5
 80050d0:	47b8      	blx	r7
 80050d2:	3001      	adds	r0, #1
 80050d4:	d10e      	bne.n	80050f4 <_printf_float+0x418>
 80050d6:	e65e      	b.n	8004d96 <_printf_float+0xba>
 80050d8:	2301      	movs	r3, #1
 80050da:	4652      	mov	r2, sl
 80050dc:	4631      	mov	r1, r6
 80050de:	4628      	mov	r0, r5
 80050e0:	47b8      	blx	r7
 80050e2:	3001      	adds	r0, #1
 80050e4:	f43f ae57 	beq.w	8004d96 <_printf_float+0xba>
 80050e8:	f108 0801 	add.w	r8, r8, #1
 80050ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050ee:	3b01      	subs	r3, #1
 80050f0:	4543      	cmp	r3, r8
 80050f2:	dcf1      	bgt.n	80050d8 <_printf_float+0x3fc>
 80050f4:	464b      	mov	r3, r9
 80050f6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80050fa:	e6de      	b.n	8004eba <_printf_float+0x1de>
 80050fc:	f04f 0800 	mov.w	r8, #0
 8005100:	f104 0a1a 	add.w	sl, r4, #26
 8005104:	e7f2      	b.n	80050ec <_printf_float+0x410>
 8005106:	2301      	movs	r3, #1
 8005108:	e7df      	b.n	80050ca <_printf_float+0x3ee>
 800510a:	2301      	movs	r3, #1
 800510c:	464a      	mov	r2, r9
 800510e:	4631      	mov	r1, r6
 8005110:	4628      	mov	r0, r5
 8005112:	47b8      	blx	r7
 8005114:	3001      	adds	r0, #1
 8005116:	f43f ae3e 	beq.w	8004d96 <_printf_float+0xba>
 800511a:	f108 0801 	add.w	r8, r8, #1
 800511e:	68e3      	ldr	r3, [r4, #12]
 8005120:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005122:	1a9b      	subs	r3, r3, r2
 8005124:	4543      	cmp	r3, r8
 8005126:	dcf0      	bgt.n	800510a <_printf_float+0x42e>
 8005128:	e6fc      	b.n	8004f24 <_printf_float+0x248>
 800512a:	f04f 0800 	mov.w	r8, #0
 800512e:	f104 0919 	add.w	r9, r4, #25
 8005132:	e7f4      	b.n	800511e <_printf_float+0x442>
 8005134:	2900      	cmp	r1, #0
 8005136:	f43f ae8b 	beq.w	8004e50 <_printf_float+0x174>
 800513a:	2300      	movs	r3, #0
 800513c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005140:	ab09      	add	r3, sp, #36	; 0x24
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	ec49 8b10 	vmov	d0, r8, r9
 8005148:	6022      	str	r2, [r4, #0]
 800514a:	f8cd a004 	str.w	sl, [sp, #4]
 800514e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005152:	4628      	mov	r0, r5
 8005154:	f7ff fd2e 	bl	8004bb4 <__cvt>
 8005158:	4680      	mov	r8, r0
 800515a:	e648      	b.n	8004dee <_printf_float+0x112>

0800515c <_printf_common>:
 800515c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005160:	4691      	mov	r9, r2
 8005162:	461f      	mov	r7, r3
 8005164:	688a      	ldr	r2, [r1, #8]
 8005166:	690b      	ldr	r3, [r1, #16]
 8005168:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800516c:	4293      	cmp	r3, r2
 800516e:	bfb8      	it	lt
 8005170:	4613      	movlt	r3, r2
 8005172:	f8c9 3000 	str.w	r3, [r9]
 8005176:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800517a:	4606      	mov	r6, r0
 800517c:	460c      	mov	r4, r1
 800517e:	b112      	cbz	r2, 8005186 <_printf_common+0x2a>
 8005180:	3301      	adds	r3, #1
 8005182:	f8c9 3000 	str.w	r3, [r9]
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	0699      	lsls	r1, r3, #26
 800518a:	bf42      	ittt	mi
 800518c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005190:	3302      	addmi	r3, #2
 8005192:	f8c9 3000 	strmi.w	r3, [r9]
 8005196:	6825      	ldr	r5, [r4, #0]
 8005198:	f015 0506 	ands.w	r5, r5, #6
 800519c:	d107      	bne.n	80051ae <_printf_common+0x52>
 800519e:	f104 0a19 	add.w	sl, r4, #25
 80051a2:	68e3      	ldr	r3, [r4, #12]
 80051a4:	f8d9 2000 	ldr.w	r2, [r9]
 80051a8:	1a9b      	subs	r3, r3, r2
 80051aa:	42ab      	cmp	r3, r5
 80051ac:	dc28      	bgt.n	8005200 <_printf_common+0xa4>
 80051ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80051b2:	6822      	ldr	r2, [r4, #0]
 80051b4:	3300      	adds	r3, #0
 80051b6:	bf18      	it	ne
 80051b8:	2301      	movne	r3, #1
 80051ba:	0692      	lsls	r2, r2, #26
 80051bc:	d42d      	bmi.n	800521a <_printf_common+0xbe>
 80051be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051c2:	4639      	mov	r1, r7
 80051c4:	4630      	mov	r0, r6
 80051c6:	47c0      	blx	r8
 80051c8:	3001      	adds	r0, #1
 80051ca:	d020      	beq.n	800520e <_printf_common+0xb2>
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	68e5      	ldr	r5, [r4, #12]
 80051d0:	f8d9 2000 	ldr.w	r2, [r9]
 80051d4:	f003 0306 	and.w	r3, r3, #6
 80051d8:	2b04      	cmp	r3, #4
 80051da:	bf08      	it	eq
 80051dc:	1aad      	subeq	r5, r5, r2
 80051de:	68a3      	ldr	r3, [r4, #8]
 80051e0:	6922      	ldr	r2, [r4, #16]
 80051e2:	bf0c      	ite	eq
 80051e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051e8:	2500      	movne	r5, #0
 80051ea:	4293      	cmp	r3, r2
 80051ec:	bfc4      	itt	gt
 80051ee:	1a9b      	subgt	r3, r3, r2
 80051f0:	18ed      	addgt	r5, r5, r3
 80051f2:	f04f 0900 	mov.w	r9, #0
 80051f6:	341a      	adds	r4, #26
 80051f8:	454d      	cmp	r5, r9
 80051fa:	d11a      	bne.n	8005232 <_printf_common+0xd6>
 80051fc:	2000      	movs	r0, #0
 80051fe:	e008      	b.n	8005212 <_printf_common+0xb6>
 8005200:	2301      	movs	r3, #1
 8005202:	4652      	mov	r2, sl
 8005204:	4639      	mov	r1, r7
 8005206:	4630      	mov	r0, r6
 8005208:	47c0      	blx	r8
 800520a:	3001      	adds	r0, #1
 800520c:	d103      	bne.n	8005216 <_printf_common+0xba>
 800520e:	f04f 30ff 	mov.w	r0, #4294967295
 8005212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005216:	3501      	adds	r5, #1
 8005218:	e7c3      	b.n	80051a2 <_printf_common+0x46>
 800521a:	18e1      	adds	r1, r4, r3
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	2030      	movs	r0, #48	; 0x30
 8005220:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005224:	4422      	add	r2, r4
 8005226:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800522a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800522e:	3302      	adds	r3, #2
 8005230:	e7c5      	b.n	80051be <_printf_common+0x62>
 8005232:	2301      	movs	r3, #1
 8005234:	4622      	mov	r2, r4
 8005236:	4639      	mov	r1, r7
 8005238:	4630      	mov	r0, r6
 800523a:	47c0      	blx	r8
 800523c:	3001      	adds	r0, #1
 800523e:	d0e6      	beq.n	800520e <_printf_common+0xb2>
 8005240:	f109 0901 	add.w	r9, r9, #1
 8005244:	e7d8      	b.n	80051f8 <_printf_common+0x9c>
	...

08005248 <_printf_i>:
 8005248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800524c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005250:	460c      	mov	r4, r1
 8005252:	7e09      	ldrb	r1, [r1, #24]
 8005254:	b085      	sub	sp, #20
 8005256:	296e      	cmp	r1, #110	; 0x6e
 8005258:	4617      	mov	r7, r2
 800525a:	4606      	mov	r6, r0
 800525c:	4698      	mov	r8, r3
 800525e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005260:	f000 80b3 	beq.w	80053ca <_printf_i+0x182>
 8005264:	d822      	bhi.n	80052ac <_printf_i+0x64>
 8005266:	2963      	cmp	r1, #99	; 0x63
 8005268:	d036      	beq.n	80052d8 <_printf_i+0x90>
 800526a:	d80a      	bhi.n	8005282 <_printf_i+0x3a>
 800526c:	2900      	cmp	r1, #0
 800526e:	f000 80b9 	beq.w	80053e4 <_printf_i+0x19c>
 8005272:	2958      	cmp	r1, #88	; 0x58
 8005274:	f000 8083 	beq.w	800537e <_printf_i+0x136>
 8005278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800527c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005280:	e032      	b.n	80052e8 <_printf_i+0xa0>
 8005282:	2964      	cmp	r1, #100	; 0x64
 8005284:	d001      	beq.n	800528a <_printf_i+0x42>
 8005286:	2969      	cmp	r1, #105	; 0x69
 8005288:	d1f6      	bne.n	8005278 <_printf_i+0x30>
 800528a:	6820      	ldr	r0, [r4, #0]
 800528c:	6813      	ldr	r3, [r2, #0]
 800528e:	0605      	lsls	r5, r0, #24
 8005290:	f103 0104 	add.w	r1, r3, #4
 8005294:	d52a      	bpl.n	80052ec <_printf_i+0xa4>
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6011      	str	r1, [r2, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	da03      	bge.n	80052a6 <_printf_i+0x5e>
 800529e:	222d      	movs	r2, #45	; 0x2d
 80052a0:	425b      	negs	r3, r3
 80052a2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80052a6:	486f      	ldr	r0, [pc, #444]	; (8005464 <_printf_i+0x21c>)
 80052a8:	220a      	movs	r2, #10
 80052aa:	e039      	b.n	8005320 <_printf_i+0xd8>
 80052ac:	2973      	cmp	r1, #115	; 0x73
 80052ae:	f000 809d 	beq.w	80053ec <_printf_i+0x1a4>
 80052b2:	d808      	bhi.n	80052c6 <_printf_i+0x7e>
 80052b4:	296f      	cmp	r1, #111	; 0x6f
 80052b6:	d020      	beq.n	80052fa <_printf_i+0xb2>
 80052b8:	2970      	cmp	r1, #112	; 0x70
 80052ba:	d1dd      	bne.n	8005278 <_printf_i+0x30>
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	f043 0320 	orr.w	r3, r3, #32
 80052c2:	6023      	str	r3, [r4, #0]
 80052c4:	e003      	b.n	80052ce <_printf_i+0x86>
 80052c6:	2975      	cmp	r1, #117	; 0x75
 80052c8:	d017      	beq.n	80052fa <_printf_i+0xb2>
 80052ca:	2978      	cmp	r1, #120	; 0x78
 80052cc:	d1d4      	bne.n	8005278 <_printf_i+0x30>
 80052ce:	2378      	movs	r3, #120	; 0x78
 80052d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052d4:	4864      	ldr	r0, [pc, #400]	; (8005468 <_printf_i+0x220>)
 80052d6:	e055      	b.n	8005384 <_printf_i+0x13c>
 80052d8:	6813      	ldr	r3, [r2, #0]
 80052da:	1d19      	adds	r1, r3, #4
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6011      	str	r1, [r2, #0]
 80052e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052e8:	2301      	movs	r3, #1
 80052ea:	e08c      	b.n	8005406 <_printf_i+0x1be>
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	6011      	str	r1, [r2, #0]
 80052f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052f4:	bf18      	it	ne
 80052f6:	b21b      	sxthne	r3, r3
 80052f8:	e7cf      	b.n	800529a <_printf_i+0x52>
 80052fa:	6813      	ldr	r3, [r2, #0]
 80052fc:	6825      	ldr	r5, [r4, #0]
 80052fe:	1d18      	adds	r0, r3, #4
 8005300:	6010      	str	r0, [r2, #0]
 8005302:	0628      	lsls	r0, r5, #24
 8005304:	d501      	bpl.n	800530a <_printf_i+0xc2>
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	e002      	b.n	8005310 <_printf_i+0xc8>
 800530a:	0668      	lsls	r0, r5, #25
 800530c:	d5fb      	bpl.n	8005306 <_printf_i+0xbe>
 800530e:	881b      	ldrh	r3, [r3, #0]
 8005310:	4854      	ldr	r0, [pc, #336]	; (8005464 <_printf_i+0x21c>)
 8005312:	296f      	cmp	r1, #111	; 0x6f
 8005314:	bf14      	ite	ne
 8005316:	220a      	movne	r2, #10
 8005318:	2208      	moveq	r2, #8
 800531a:	2100      	movs	r1, #0
 800531c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005320:	6865      	ldr	r5, [r4, #4]
 8005322:	60a5      	str	r5, [r4, #8]
 8005324:	2d00      	cmp	r5, #0
 8005326:	f2c0 8095 	blt.w	8005454 <_printf_i+0x20c>
 800532a:	6821      	ldr	r1, [r4, #0]
 800532c:	f021 0104 	bic.w	r1, r1, #4
 8005330:	6021      	str	r1, [r4, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d13d      	bne.n	80053b2 <_printf_i+0x16a>
 8005336:	2d00      	cmp	r5, #0
 8005338:	f040 808e 	bne.w	8005458 <_printf_i+0x210>
 800533c:	4665      	mov	r5, ip
 800533e:	2a08      	cmp	r2, #8
 8005340:	d10b      	bne.n	800535a <_printf_i+0x112>
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	07db      	lsls	r3, r3, #31
 8005346:	d508      	bpl.n	800535a <_printf_i+0x112>
 8005348:	6923      	ldr	r3, [r4, #16]
 800534a:	6862      	ldr	r2, [r4, #4]
 800534c:	429a      	cmp	r2, r3
 800534e:	bfde      	ittt	le
 8005350:	2330      	movle	r3, #48	; 0x30
 8005352:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005356:	f105 35ff 	addle.w	r5, r5, #4294967295
 800535a:	ebac 0305 	sub.w	r3, ip, r5
 800535e:	6123      	str	r3, [r4, #16]
 8005360:	f8cd 8000 	str.w	r8, [sp]
 8005364:	463b      	mov	r3, r7
 8005366:	aa03      	add	r2, sp, #12
 8005368:	4621      	mov	r1, r4
 800536a:	4630      	mov	r0, r6
 800536c:	f7ff fef6 	bl	800515c <_printf_common>
 8005370:	3001      	adds	r0, #1
 8005372:	d14d      	bne.n	8005410 <_printf_i+0x1c8>
 8005374:	f04f 30ff 	mov.w	r0, #4294967295
 8005378:	b005      	add	sp, #20
 800537a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800537e:	4839      	ldr	r0, [pc, #228]	; (8005464 <_printf_i+0x21c>)
 8005380:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005384:	6813      	ldr	r3, [r2, #0]
 8005386:	6821      	ldr	r1, [r4, #0]
 8005388:	1d1d      	adds	r5, r3, #4
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6015      	str	r5, [r2, #0]
 800538e:	060a      	lsls	r2, r1, #24
 8005390:	d50b      	bpl.n	80053aa <_printf_i+0x162>
 8005392:	07ca      	lsls	r2, r1, #31
 8005394:	bf44      	itt	mi
 8005396:	f041 0120 	orrmi.w	r1, r1, #32
 800539a:	6021      	strmi	r1, [r4, #0]
 800539c:	b91b      	cbnz	r3, 80053a6 <_printf_i+0x15e>
 800539e:	6822      	ldr	r2, [r4, #0]
 80053a0:	f022 0220 	bic.w	r2, r2, #32
 80053a4:	6022      	str	r2, [r4, #0]
 80053a6:	2210      	movs	r2, #16
 80053a8:	e7b7      	b.n	800531a <_printf_i+0xd2>
 80053aa:	064d      	lsls	r5, r1, #25
 80053ac:	bf48      	it	mi
 80053ae:	b29b      	uxthmi	r3, r3
 80053b0:	e7ef      	b.n	8005392 <_printf_i+0x14a>
 80053b2:	4665      	mov	r5, ip
 80053b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80053b8:	fb02 3311 	mls	r3, r2, r1, r3
 80053bc:	5cc3      	ldrb	r3, [r0, r3]
 80053be:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80053c2:	460b      	mov	r3, r1
 80053c4:	2900      	cmp	r1, #0
 80053c6:	d1f5      	bne.n	80053b4 <_printf_i+0x16c>
 80053c8:	e7b9      	b.n	800533e <_printf_i+0xf6>
 80053ca:	6813      	ldr	r3, [r2, #0]
 80053cc:	6825      	ldr	r5, [r4, #0]
 80053ce:	6961      	ldr	r1, [r4, #20]
 80053d0:	1d18      	adds	r0, r3, #4
 80053d2:	6010      	str	r0, [r2, #0]
 80053d4:	0628      	lsls	r0, r5, #24
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	d501      	bpl.n	80053de <_printf_i+0x196>
 80053da:	6019      	str	r1, [r3, #0]
 80053dc:	e002      	b.n	80053e4 <_printf_i+0x19c>
 80053de:	066a      	lsls	r2, r5, #25
 80053e0:	d5fb      	bpl.n	80053da <_printf_i+0x192>
 80053e2:	8019      	strh	r1, [r3, #0]
 80053e4:	2300      	movs	r3, #0
 80053e6:	6123      	str	r3, [r4, #16]
 80053e8:	4665      	mov	r5, ip
 80053ea:	e7b9      	b.n	8005360 <_printf_i+0x118>
 80053ec:	6813      	ldr	r3, [r2, #0]
 80053ee:	1d19      	adds	r1, r3, #4
 80053f0:	6011      	str	r1, [r2, #0]
 80053f2:	681d      	ldr	r5, [r3, #0]
 80053f4:	6862      	ldr	r2, [r4, #4]
 80053f6:	2100      	movs	r1, #0
 80053f8:	4628      	mov	r0, r5
 80053fa:	f7fa ff01 	bl	8000200 <memchr>
 80053fe:	b108      	cbz	r0, 8005404 <_printf_i+0x1bc>
 8005400:	1b40      	subs	r0, r0, r5
 8005402:	6060      	str	r0, [r4, #4]
 8005404:	6863      	ldr	r3, [r4, #4]
 8005406:	6123      	str	r3, [r4, #16]
 8005408:	2300      	movs	r3, #0
 800540a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800540e:	e7a7      	b.n	8005360 <_printf_i+0x118>
 8005410:	6923      	ldr	r3, [r4, #16]
 8005412:	462a      	mov	r2, r5
 8005414:	4639      	mov	r1, r7
 8005416:	4630      	mov	r0, r6
 8005418:	47c0      	blx	r8
 800541a:	3001      	adds	r0, #1
 800541c:	d0aa      	beq.n	8005374 <_printf_i+0x12c>
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	079b      	lsls	r3, r3, #30
 8005422:	d413      	bmi.n	800544c <_printf_i+0x204>
 8005424:	68e0      	ldr	r0, [r4, #12]
 8005426:	9b03      	ldr	r3, [sp, #12]
 8005428:	4298      	cmp	r0, r3
 800542a:	bfb8      	it	lt
 800542c:	4618      	movlt	r0, r3
 800542e:	e7a3      	b.n	8005378 <_printf_i+0x130>
 8005430:	2301      	movs	r3, #1
 8005432:	464a      	mov	r2, r9
 8005434:	4639      	mov	r1, r7
 8005436:	4630      	mov	r0, r6
 8005438:	47c0      	blx	r8
 800543a:	3001      	adds	r0, #1
 800543c:	d09a      	beq.n	8005374 <_printf_i+0x12c>
 800543e:	3501      	adds	r5, #1
 8005440:	68e3      	ldr	r3, [r4, #12]
 8005442:	9a03      	ldr	r2, [sp, #12]
 8005444:	1a9b      	subs	r3, r3, r2
 8005446:	42ab      	cmp	r3, r5
 8005448:	dcf2      	bgt.n	8005430 <_printf_i+0x1e8>
 800544a:	e7eb      	b.n	8005424 <_printf_i+0x1dc>
 800544c:	2500      	movs	r5, #0
 800544e:	f104 0919 	add.w	r9, r4, #25
 8005452:	e7f5      	b.n	8005440 <_printf_i+0x1f8>
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1ac      	bne.n	80053b2 <_printf_i+0x16a>
 8005458:	7803      	ldrb	r3, [r0, #0]
 800545a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800545e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005462:	e76c      	b.n	800533e <_printf_i+0xf6>
 8005464:	0800727a 	.word	0x0800727a
 8005468:	0800728b 	.word	0x0800728b

0800546c <iprintf>:
 800546c:	b40f      	push	{r0, r1, r2, r3}
 800546e:	4b0a      	ldr	r3, [pc, #40]	; (8005498 <iprintf+0x2c>)
 8005470:	b513      	push	{r0, r1, r4, lr}
 8005472:	681c      	ldr	r4, [r3, #0]
 8005474:	b124      	cbz	r4, 8005480 <iprintf+0x14>
 8005476:	69a3      	ldr	r3, [r4, #24]
 8005478:	b913      	cbnz	r3, 8005480 <iprintf+0x14>
 800547a:	4620      	mov	r0, r4
 800547c:	f000 fe94 	bl	80061a8 <__sinit>
 8005480:	ab05      	add	r3, sp, #20
 8005482:	9a04      	ldr	r2, [sp, #16]
 8005484:	68a1      	ldr	r1, [r4, #8]
 8005486:	9301      	str	r3, [sp, #4]
 8005488:	4620      	mov	r0, r4
 800548a:	f001 faf3 	bl	8006a74 <_vfiprintf_r>
 800548e:	b002      	add	sp, #8
 8005490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005494:	b004      	add	sp, #16
 8005496:	4770      	bx	lr
 8005498:	2000000c 	.word	0x2000000c

0800549c <quorem>:
 800549c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a0:	6903      	ldr	r3, [r0, #16]
 80054a2:	690c      	ldr	r4, [r1, #16]
 80054a4:	42a3      	cmp	r3, r4
 80054a6:	4680      	mov	r8, r0
 80054a8:	f2c0 8082 	blt.w	80055b0 <quorem+0x114>
 80054ac:	3c01      	subs	r4, #1
 80054ae:	f101 0714 	add.w	r7, r1, #20
 80054b2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80054b6:	f100 0614 	add.w	r6, r0, #20
 80054ba:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80054be:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80054c2:	eb06 030c 	add.w	r3, r6, ip
 80054c6:	3501      	adds	r5, #1
 80054c8:	eb07 090c 	add.w	r9, r7, ip
 80054cc:	9301      	str	r3, [sp, #4]
 80054ce:	fbb0 f5f5 	udiv	r5, r0, r5
 80054d2:	b395      	cbz	r5, 800553a <quorem+0x9e>
 80054d4:	f04f 0a00 	mov.w	sl, #0
 80054d8:	4638      	mov	r0, r7
 80054da:	46b6      	mov	lr, r6
 80054dc:	46d3      	mov	fp, sl
 80054de:	f850 2b04 	ldr.w	r2, [r0], #4
 80054e2:	b293      	uxth	r3, r2
 80054e4:	fb05 a303 	mla	r3, r5, r3, sl
 80054e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	ebab 0303 	sub.w	r3, fp, r3
 80054f2:	0c12      	lsrs	r2, r2, #16
 80054f4:	f8de b000 	ldr.w	fp, [lr]
 80054f8:	fb05 a202 	mla	r2, r5, r2, sl
 80054fc:	fa13 f38b 	uxtah	r3, r3, fp
 8005500:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005504:	fa1f fb82 	uxth.w	fp, r2
 8005508:	f8de 2000 	ldr.w	r2, [lr]
 800550c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005510:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005514:	b29b      	uxth	r3, r3
 8005516:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800551a:	4581      	cmp	r9, r0
 800551c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005520:	f84e 3b04 	str.w	r3, [lr], #4
 8005524:	d2db      	bcs.n	80054de <quorem+0x42>
 8005526:	f856 300c 	ldr.w	r3, [r6, ip]
 800552a:	b933      	cbnz	r3, 800553a <quorem+0x9e>
 800552c:	9b01      	ldr	r3, [sp, #4]
 800552e:	3b04      	subs	r3, #4
 8005530:	429e      	cmp	r6, r3
 8005532:	461a      	mov	r2, r3
 8005534:	d330      	bcc.n	8005598 <quorem+0xfc>
 8005536:	f8c8 4010 	str.w	r4, [r8, #16]
 800553a:	4640      	mov	r0, r8
 800553c:	f001 f8f4 	bl	8006728 <__mcmp>
 8005540:	2800      	cmp	r0, #0
 8005542:	db25      	blt.n	8005590 <quorem+0xf4>
 8005544:	3501      	adds	r5, #1
 8005546:	4630      	mov	r0, r6
 8005548:	f04f 0c00 	mov.w	ip, #0
 800554c:	f857 2b04 	ldr.w	r2, [r7], #4
 8005550:	f8d0 e000 	ldr.w	lr, [r0]
 8005554:	b293      	uxth	r3, r2
 8005556:	ebac 0303 	sub.w	r3, ip, r3
 800555a:	0c12      	lsrs	r2, r2, #16
 800555c:	fa13 f38e 	uxtah	r3, r3, lr
 8005560:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005564:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005568:	b29b      	uxth	r3, r3
 800556a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800556e:	45b9      	cmp	r9, r7
 8005570:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005574:	f840 3b04 	str.w	r3, [r0], #4
 8005578:	d2e8      	bcs.n	800554c <quorem+0xb0>
 800557a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800557e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005582:	b92a      	cbnz	r2, 8005590 <quorem+0xf4>
 8005584:	3b04      	subs	r3, #4
 8005586:	429e      	cmp	r6, r3
 8005588:	461a      	mov	r2, r3
 800558a:	d30b      	bcc.n	80055a4 <quorem+0x108>
 800558c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005590:	4628      	mov	r0, r5
 8005592:	b003      	add	sp, #12
 8005594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005598:	6812      	ldr	r2, [r2, #0]
 800559a:	3b04      	subs	r3, #4
 800559c:	2a00      	cmp	r2, #0
 800559e:	d1ca      	bne.n	8005536 <quorem+0x9a>
 80055a0:	3c01      	subs	r4, #1
 80055a2:	e7c5      	b.n	8005530 <quorem+0x94>
 80055a4:	6812      	ldr	r2, [r2, #0]
 80055a6:	3b04      	subs	r3, #4
 80055a8:	2a00      	cmp	r2, #0
 80055aa:	d1ef      	bne.n	800558c <quorem+0xf0>
 80055ac:	3c01      	subs	r4, #1
 80055ae:	e7ea      	b.n	8005586 <quorem+0xea>
 80055b0:	2000      	movs	r0, #0
 80055b2:	e7ee      	b.n	8005592 <quorem+0xf6>
 80055b4:	0000      	movs	r0, r0
	...

080055b8 <_dtoa_r>:
 80055b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055bc:	ec57 6b10 	vmov	r6, r7, d0
 80055c0:	b097      	sub	sp, #92	; 0x5c
 80055c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80055c4:	9106      	str	r1, [sp, #24]
 80055c6:	4604      	mov	r4, r0
 80055c8:	920b      	str	r2, [sp, #44]	; 0x2c
 80055ca:	9312      	str	r3, [sp, #72]	; 0x48
 80055cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80055d0:	e9cd 6700 	strd	r6, r7, [sp]
 80055d4:	b93d      	cbnz	r5, 80055e6 <_dtoa_r+0x2e>
 80055d6:	2010      	movs	r0, #16
 80055d8:	f000 fe7e 	bl	80062d8 <malloc>
 80055dc:	6260      	str	r0, [r4, #36]	; 0x24
 80055de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80055e2:	6005      	str	r5, [r0, #0]
 80055e4:	60c5      	str	r5, [r0, #12]
 80055e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055e8:	6819      	ldr	r1, [r3, #0]
 80055ea:	b151      	cbz	r1, 8005602 <_dtoa_r+0x4a>
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	604a      	str	r2, [r1, #4]
 80055f0:	2301      	movs	r3, #1
 80055f2:	4093      	lsls	r3, r2
 80055f4:	608b      	str	r3, [r1, #8]
 80055f6:	4620      	mov	r0, r4
 80055f8:	f000 feb5 	bl	8006366 <_Bfree>
 80055fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055fe:	2200      	movs	r2, #0
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	1e3b      	subs	r3, r7, #0
 8005604:	bfbb      	ittet	lt
 8005606:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800560a:	9301      	strlt	r3, [sp, #4]
 800560c:	2300      	movge	r3, #0
 800560e:	2201      	movlt	r2, #1
 8005610:	bfac      	ite	ge
 8005612:	f8c8 3000 	strge.w	r3, [r8]
 8005616:	f8c8 2000 	strlt.w	r2, [r8]
 800561a:	4baf      	ldr	r3, [pc, #700]	; (80058d8 <_dtoa_r+0x320>)
 800561c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005620:	ea33 0308 	bics.w	r3, r3, r8
 8005624:	d114      	bne.n	8005650 <_dtoa_r+0x98>
 8005626:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005628:	f242 730f 	movw	r3, #9999	; 0x270f
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	9b00      	ldr	r3, [sp, #0]
 8005630:	b923      	cbnz	r3, 800563c <_dtoa_r+0x84>
 8005632:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005636:	2800      	cmp	r0, #0
 8005638:	f000 8542 	beq.w	80060c0 <_dtoa_r+0xb08>
 800563c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800563e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80058ec <_dtoa_r+0x334>
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 8544 	beq.w	80060d0 <_dtoa_r+0xb18>
 8005648:	f10b 0303 	add.w	r3, fp, #3
 800564c:	f000 bd3e 	b.w	80060cc <_dtoa_r+0xb14>
 8005650:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005654:	2200      	movs	r2, #0
 8005656:	2300      	movs	r3, #0
 8005658:	4630      	mov	r0, r6
 800565a:	4639      	mov	r1, r7
 800565c:	f7fb fa44 	bl	8000ae8 <__aeabi_dcmpeq>
 8005660:	4681      	mov	r9, r0
 8005662:	b168      	cbz	r0, 8005680 <_dtoa_r+0xc8>
 8005664:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005666:	2301      	movs	r3, #1
 8005668:	6013      	str	r3, [r2, #0]
 800566a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 8524 	beq.w	80060ba <_dtoa_r+0xb02>
 8005672:	4b9a      	ldr	r3, [pc, #616]	; (80058dc <_dtoa_r+0x324>)
 8005674:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005676:	f103 3bff 	add.w	fp, r3, #4294967295
 800567a:	6013      	str	r3, [r2, #0]
 800567c:	f000 bd28 	b.w	80060d0 <_dtoa_r+0xb18>
 8005680:	aa14      	add	r2, sp, #80	; 0x50
 8005682:	a915      	add	r1, sp, #84	; 0x54
 8005684:	ec47 6b10 	vmov	d0, r6, r7
 8005688:	4620      	mov	r0, r4
 800568a:	f001 f8c4 	bl	8006816 <__d2b>
 800568e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005692:	9004      	str	r0, [sp, #16]
 8005694:	2d00      	cmp	r5, #0
 8005696:	d07c      	beq.n	8005792 <_dtoa_r+0x1da>
 8005698:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800569c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80056a0:	46b2      	mov	sl, r6
 80056a2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80056a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80056aa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80056ae:	2200      	movs	r2, #0
 80056b0:	4b8b      	ldr	r3, [pc, #556]	; (80058e0 <_dtoa_r+0x328>)
 80056b2:	4650      	mov	r0, sl
 80056b4:	4659      	mov	r1, fp
 80056b6:	f7fa fdf7 	bl	80002a8 <__aeabi_dsub>
 80056ba:	a381      	add	r3, pc, #516	; (adr r3, 80058c0 <_dtoa_r+0x308>)
 80056bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c0:	f7fa ffaa 	bl	8000618 <__aeabi_dmul>
 80056c4:	a380      	add	r3, pc, #512	; (adr r3, 80058c8 <_dtoa_r+0x310>)
 80056c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ca:	f7fa fdef 	bl	80002ac <__adddf3>
 80056ce:	4606      	mov	r6, r0
 80056d0:	4628      	mov	r0, r5
 80056d2:	460f      	mov	r7, r1
 80056d4:	f7fa ff36 	bl	8000544 <__aeabi_i2d>
 80056d8:	a37d      	add	r3, pc, #500	; (adr r3, 80058d0 <_dtoa_r+0x318>)
 80056da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056de:	f7fa ff9b 	bl	8000618 <__aeabi_dmul>
 80056e2:	4602      	mov	r2, r0
 80056e4:	460b      	mov	r3, r1
 80056e6:	4630      	mov	r0, r6
 80056e8:	4639      	mov	r1, r7
 80056ea:	f7fa fddf 	bl	80002ac <__adddf3>
 80056ee:	4606      	mov	r6, r0
 80056f0:	460f      	mov	r7, r1
 80056f2:	f7fb fa41 	bl	8000b78 <__aeabi_d2iz>
 80056f6:	2200      	movs	r2, #0
 80056f8:	4682      	mov	sl, r0
 80056fa:	2300      	movs	r3, #0
 80056fc:	4630      	mov	r0, r6
 80056fe:	4639      	mov	r1, r7
 8005700:	f7fb f9fc 	bl	8000afc <__aeabi_dcmplt>
 8005704:	b148      	cbz	r0, 800571a <_dtoa_r+0x162>
 8005706:	4650      	mov	r0, sl
 8005708:	f7fa ff1c 	bl	8000544 <__aeabi_i2d>
 800570c:	4632      	mov	r2, r6
 800570e:	463b      	mov	r3, r7
 8005710:	f7fb f9ea 	bl	8000ae8 <__aeabi_dcmpeq>
 8005714:	b908      	cbnz	r0, 800571a <_dtoa_r+0x162>
 8005716:	f10a 3aff 	add.w	sl, sl, #4294967295
 800571a:	f1ba 0f16 	cmp.w	sl, #22
 800571e:	d859      	bhi.n	80057d4 <_dtoa_r+0x21c>
 8005720:	4970      	ldr	r1, [pc, #448]	; (80058e4 <_dtoa_r+0x32c>)
 8005722:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005726:	e9dd 2300 	ldrd	r2, r3, [sp]
 800572a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800572e:	f7fb fa03 	bl	8000b38 <__aeabi_dcmpgt>
 8005732:	2800      	cmp	r0, #0
 8005734:	d050      	beq.n	80057d8 <_dtoa_r+0x220>
 8005736:	f10a 3aff 	add.w	sl, sl, #4294967295
 800573a:	2300      	movs	r3, #0
 800573c:	930f      	str	r3, [sp, #60]	; 0x3c
 800573e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005740:	1b5d      	subs	r5, r3, r5
 8005742:	f1b5 0801 	subs.w	r8, r5, #1
 8005746:	bf49      	itett	mi
 8005748:	f1c5 0301 	rsbmi	r3, r5, #1
 800574c:	2300      	movpl	r3, #0
 800574e:	9305      	strmi	r3, [sp, #20]
 8005750:	f04f 0800 	movmi.w	r8, #0
 8005754:	bf58      	it	pl
 8005756:	9305      	strpl	r3, [sp, #20]
 8005758:	f1ba 0f00 	cmp.w	sl, #0
 800575c:	db3e      	blt.n	80057dc <_dtoa_r+0x224>
 800575e:	2300      	movs	r3, #0
 8005760:	44d0      	add	r8, sl
 8005762:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005766:	9307      	str	r3, [sp, #28]
 8005768:	9b06      	ldr	r3, [sp, #24]
 800576a:	2b09      	cmp	r3, #9
 800576c:	f200 8090 	bhi.w	8005890 <_dtoa_r+0x2d8>
 8005770:	2b05      	cmp	r3, #5
 8005772:	bfc4      	itt	gt
 8005774:	3b04      	subgt	r3, #4
 8005776:	9306      	strgt	r3, [sp, #24]
 8005778:	9b06      	ldr	r3, [sp, #24]
 800577a:	f1a3 0302 	sub.w	r3, r3, #2
 800577e:	bfcc      	ite	gt
 8005780:	2500      	movgt	r5, #0
 8005782:	2501      	movle	r5, #1
 8005784:	2b03      	cmp	r3, #3
 8005786:	f200 808f 	bhi.w	80058a8 <_dtoa_r+0x2f0>
 800578a:	e8df f003 	tbb	[pc, r3]
 800578e:	7f7d      	.short	0x7f7d
 8005790:	7131      	.short	0x7131
 8005792:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005796:	441d      	add	r5, r3
 8005798:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800579c:	2820      	cmp	r0, #32
 800579e:	dd13      	ble.n	80057c8 <_dtoa_r+0x210>
 80057a0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80057a4:	9b00      	ldr	r3, [sp, #0]
 80057a6:	fa08 f800 	lsl.w	r8, r8, r0
 80057aa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80057ae:	fa23 f000 	lsr.w	r0, r3, r0
 80057b2:	ea48 0000 	orr.w	r0, r8, r0
 80057b6:	f7fa feb5 	bl	8000524 <__aeabi_ui2d>
 80057ba:	2301      	movs	r3, #1
 80057bc:	4682      	mov	sl, r0
 80057be:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80057c2:	3d01      	subs	r5, #1
 80057c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80057c6:	e772      	b.n	80056ae <_dtoa_r+0xf6>
 80057c8:	9b00      	ldr	r3, [sp, #0]
 80057ca:	f1c0 0020 	rsb	r0, r0, #32
 80057ce:	fa03 f000 	lsl.w	r0, r3, r0
 80057d2:	e7f0      	b.n	80057b6 <_dtoa_r+0x1fe>
 80057d4:	2301      	movs	r3, #1
 80057d6:	e7b1      	b.n	800573c <_dtoa_r+0x184>
 80057d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80057da:	e7b0      	b.n	800573e <_dtoa_r+0x186>
 80057dc:	9b05      	ldr	r3, [sp, #20]
 80057de:	eba3 030a 	sub.w	r3, r3, sl
 80057e2:	9305      	str	r3, [sp, #20]
 80057e4:	f1ca 0300 	rsb	r3, sl, #0
 80057e8:	9307      	str	r3, [sp, #28]
 80057ea:	2300      	movs	r3, #0
 80057ec:	930e      	str	r3, [sp, #56]	; 0x38
 80057ee:	e7bb      	b.n	8005768 <_dtoa_r+0x1b0>
 80057f0:	2301      	movs	r3, #1
 80057f2:	930a      	str	r3, [sp, #40]	; 0x28
 80057f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	dd59      	ble.n	80058ae <_dtoa_r+0x2f6>
 80057fa:	9302      	str	r3, [sp, #8]
 80057fc:	4699      	mov	r9, r3
 80057fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005800:	2200      	movs	r2, #0
 8005802:	6072      	str	r2, [r6, #4]
 8005804:	2204      	movs	r2, #4
 8005806:	f102 0014 	add.w	r0, r2, #20
 800580a:	4298      	cmp	r0, r3
 800580c:	6871      	ldr	r1, [r6, #4]
 800580e:	d953      	bls.n	80058b8 <_dtoa_r+0x300>
 8005810:	4620      	mov	r0, r4
 8005812:	f000 fd74 	bl	80062fe <_Balloc>
 8005816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005818:	6030      	str	r0, [r6, #0]
 800581a:	f1b9 0f0e 	cmp.w	r9, #14
 800581e:	f8d3 b000 	ldr.w	fp, [r3]
 8005822:	f200 80e6 	bhi.w	80059f2 <_dtoa_r+0x43a>
 8005826:	2d00      	cmp	r5, #0
 8005828:	f000 80e3 	beq.w	80059f2 <_dtoa_r+0x43a>
 800582c:	ed9d 7b00 	vldr	d7, [sp]
 8005830:	f1ba 0f00 	cmp.w	sl, #0
 8005834:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005838:	dd74      	ble.n	8005924 <_dtoa_r+0x36c>
 800583a:	4a2a      	ldr	r2, [pc, #168]	; (80058e4 <_dtoa_r+0x32c>)
 800583c:	f00a 030f 	and.w	r3, sl, #15
 8005840:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005844:	ed93 7b00 	vldr	d7, [r3]
 8005848:	ea4f 162a 	mov.w	r6, sl, asr #4
 800584c:	06f0      	lsls	r0, r6, #27
 800584e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005852:	d565      	bpl.n	8005920 <_dtoa_r+0x368>
 8005854:	4b24      	ldr	r3, [pc, #144]	; (80058e8 <_dtoa_r+0x330>)
 8005856:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800585a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800585e:	f7fb f805 	bl	800086c <__aeabi_ddiv>
 8005862:	e9cd 0100 	strd	r0, r1, [sp]
 8005866:	f006 060f 	and.w	r6, r6, #15
 800586a:	2503      	movs	r5, #3
 800586c:	4f1e      	ldr	r7, [pc, #120]	; (80058e8 <_dtoa_r+0x330>)
 800586e:	e04c      	b.n	800590a <_dtoa_r+0x352>
 8005870:	2301      	movs	r3, #1
 8005872:	930a      	str	r3, [sp, #40]	; 0x28
 8005874:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005876:	4453      	add	r3, sl
 8005878:	f103 0901 	add.w	r9, r3, #1
 800587c:	9302      	str	r3, [sp, #8]
 800587e:	464b      	mov	r3, r9
 8005880:	2b01      	cmp	r3, #1
 8005882:	bfb8      	it	lt
 8005884:	2301      	movlt	r3, #1
 8005886:	e7ba      	b.n	80057fe <_dtoa_r+0x246>
 8005888:	2300      	movs	r3, #0
 800588a:	e7b2      	b.n	80057f2 <_dtoa_r+0x23a>
 800588c:	2300      	movs	r3, #0
 800588e:	e7f0      	b.n	8005872 <_dtoa_r+0x2ba>
 8005890:	2501      	movs	r5, #1
 8005892:	2300      	movs	r3, #0
 8005894:	9306      	str	r3, [sp, #24]
 8005896:	950a      	str	r5, [sp, #40]	; 0x28
 8005898:	f04f 33ff 	mov.w	r3, #4294967295
 800589c:	9302      	str	r3, [sp, #8]
 800589e:	4699      	mov	r9, r3
 80058a0:	2200      	movs	r2, #0
 80058a2:	2312      	movs	r3, #18
 80058a4:	920b      	str	r2, [sp, #44]	; 0x2c
 80058a6:	e7aa      	b.n	80057fe <_dtoa_r+0x246>
 80058a8:	2301      	movs	r3, #1
 80058aa:	930a      	str	r3, [sp, #40]	; 0x28
 80058ac:	e7f4      	b.n	8005898 <_dtoa_r+0x2e0>
 80058ae:	2301      	movs	r3, #1
 80058b0:	9302      	str	r3, [sp, #8]
 80058b2:	4699      	mov	r9, r3
 80058b4:	461a      	mov	r2, r3
 80058b6:	e7f5      	b.n	80058a4 <_dtoa_r+0x2ec>
 80058b8:	3101      	adds	r1, #1
 80058ba:	6071      	str	r1, [r6, #4]
 80058bc:	0052      	lsls	r2, r2, #1
 80058be:	e7a2      	b.n	8005806 <_dtoa_r+0x24e>
 80058c0:	636f4361 	.word	0x636f4361
 80058c4:	3fd287a7 	.word	0x3fd287a7
 80058c8:	8b60c8b3 	.word	0x8b60c8b3
 80058cc:	3fc68a28 	.word	0x3fc68a28
 80058d0:	509f79fb 	.word	0x509f79fb
 80058d4:	3fd34413 	.word	0x3fd34413
 80058d8:	7ff00000 	.word	0x7ff00000
 80058dc:	08007279 	.word	0x08007279
 80058e0:	3ff80000 	.word	0x3ff80000
 80058e4:	08007338 	.word	0x08007338
 80058e8:	08007310 	.word	0x08007310
 80058ec:	080072a5 	.word	0x080072a5
 80058f0:	07f1      	lsls	r1, r6, #31
 80058f2:	d508      	bpl.n	8005906 <_dtoa_r+0x34e>
 80058f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80058f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058fc:	f7fa fe8c 	bl	8000618 <__aeabi_dmul>
 8005900:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005904:	3501      	adds	r5, #1
 8005906:	1076      	asrs	r6, r6, #1
 8005908:	3708      	adds	r7, #8
 800590a:	2e00      	cmp	r6, #0
 800590c:	d1f0      	bne.n	80058f0 <_dtoa_r+0x338>
 800590e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005912:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005916:	f7fa ffa9 	bl	800086c <__aeabi_ddiv>
 800591a:	e9cd 0100 	strd	r0, r1, [sp]
 800591e:	e01a      	b.n	8005956 <_dtoa_r+0x39e>
 8005920:	2502      	movs	r5, #2
 8005922:	e7a3      	b.n	800586c <_dtoa_r+0x2b4>
 8005924:	f000 80a0 	beq.w	8005a68 <_dtoa_r+0x4b0>
 8005928:	f1ca 0600 	rsb	r6, sl, #0
 800592c:	4b9f      	ldr	r3, [pc, #636]	; (8005bac <_dtoa_r+0x5f4>)
 800592e:	4fa0      	ldr	r7, [pc, #640]	; (8005bb0 <_dtoa_r+0x5f8>)
 8005930:	f006 020f 	and.w	r2, r6, #15
 8005934:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005940:	f7fa fe6a 	bl	8000618 <__aeabi_dmul>
 8005944:	e9cd 0100 	strd	r0, r1, [sp]
 8005948:	1136      	asrs	r6, r6, #4
 800594a:	2300      	movs	r3, #0
 800594c:	2502      	movs	r5, #2
 800594e:	2e00      	cmp	r6, #0
 8005950:	d17f      	bne.n	8005a52 <_dtoa_r+0x49a>
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1e1      	bne.n	800591a <_dtoa_r+0x362>
 8005956:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 8087 	beq.w	8005a6c <_dtoa_r+0x4b4>
 800595e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005962:	2200      	movs	r2, #0
 8005964:	4b93      	ldr	r3, [pc, #588]	; (8005bb4 <_dtoa_r+0x5fc>)
 8005966:	4630      	mov	r0, r6
 8005968:	4639      	mov	r1, r7
 800596a:	f7fb f8c7 	bl	8000afc <__aeabi_dcmplt>
 800596e:	2800      	cmp	r0, #0
 8005970:	d07c      	beq.n	8005a6c <_dtoa_r+0x4b4>
 8005972:	f1b9 0f00 	cmp.w	r9, #0
 8005976:	d079      	beq.n	8005a6c <_dtoa_r+0x4b4>
 8005978:	9b02      	ldr	r3, [sp, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	dd35      	ble.n	80059ea <_dtoa_r+0x432>
 800597e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005982:	9308      	str	r3, [sp, #32]
 8005984:	4639      	mov	r1, r7
 8005986:	2200      	movs	r2, #0
 8005988:	4b8b      	ldr	r3, [pc, #556]	; (8005bb8 <_dtoa_r+0x600>)
 800598a:	4630      	mov	r0, r6
 800598c:	f7fa fe44 	bl	8000618 <__aeabi_dmul>
 8005990:	e9cd 0100 	strd	r0, r1, [sp]
 8005994:	9f02      	ldr	r7, [sp, #8]
 8005996:	3501      	adds	r5, #1
 8005998:	4628      	mov	r0, r5
 800599a:	f7fa fdd3 	bl	8000544 <__aeabi_i2d>
 800599e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059a2:	f7fa fe39 	bl	8000618 <__aeabi_dmul>
 80059a6:	2200      	movs	r2, #0
 80059a8:	4b84      	ldr	r3, [pc, #528]	; (8005bbc <_dtoa_r+0x604>)
 80059aa:	f7fa fc7f 	bl	80002ac <__adddf3>
 80059ae:	4605      	mov	r5, r0
 80059b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80059b4:	2f00      	cmp	r7, #0
 80059b6:	d15d      	bne.n	8005a74 <_dtoa_r+0x4bc>
 80059b8:	2200      	movs	r2, #0
 80059ba:	4b81      	ldr	r3, [pc, #516]	; (8005bc0 <_dtoa_r+0x608>)
 80059bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059c0:	f7fa fc72 	bl	80002a8 <__aeabi_dsub>
 80059c4:	462a      	mov	r2, r5
 80059c6:	4633      	mov	r3, r6
 80059c8:	e9cd 0100 	strd	r0, r1, [sp]
 80059cc:	f7fb f8b4 	bl	8000b38 <__aeabi_dcmpgt>
 80059d0:	2800      	cmp	r0, #0
 80059d2:	f040 8288 	bne.w	8005ee6 <_dtoa_r+0x92e>
 80059d6:	462a      	mov	r2, r5
 80059d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80059dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059e0:	f7fb f88c 	bl	8000afc <__aeabi_dcmplt>
 80059e4:	2800      	cmp	r0, #0
 80059e6:	f040 827c 	bne.w	8005ee2 <_dtoa_r+0x92a>
 80059ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80059ee:	e9cd 2300 	strd	r2, r3, [sp]
 80059f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f2c0 8150 	blt.w	8005c9a <_dtoa_r+0x6e2>
 80059fa:	f1ba 0f0e 	cmp.w	sl, #14
 80059fe:	f300 814c 	bgt.w	8005c9a <_dtoa_r+0x6e2>
 8005a02:	4b6a      	ldr	r3, [pc, #424]	; (8005bac <_dtoa_r+0x5f4>)
 8005a04:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005a08:	ed93 7b00 	vldr	d7, [r3]
 8005a0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005a14:	f280 80d8 	bge.w	8005bc8 <_dtoa_r+0x610>
 8005a18:	f1b9 0f00 	cmp.w	r9, #0
 8005a1c:	f300 80d4 	bgt.w	8005bc8 <_dtoa_r+0x610>
 8005a20:	f040 825e 	bne.w	8005ee0 <_dtoa_r+0x928>
 8005a24:	2200      	movs	r2, #0
 8005a26:	4b66      	ldr	r3, [pc, #408]	; (8005bc0 <_dtoa_r+0x608>)
 8005a28:	ec51 0b17 	vmov	r0, r1, d7
 8005a2c:	f7fa fdf4 	bl	8000618 <__aeabi_dmul>
 8005a30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a34:	f7fb f876 	bl	8000b24 <__aeabi_dcmpge>
 8005a38:	464f      	mov	r7, r9
 8005a3a:	464e      	mov	r6, r9
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	f040 8234 	bne.w	8005eaa <_dtoa_r+0x8f2>
 8005a42:	2331      	movs	r3, #49	; 0x31
 8005a44:	f10b 0501 	add.w	r5, fp, #1
 8005a48:	f88b 3000 	strb.w	r3, [fp]
 8005a4c:	f10a 0a01 	add.w	sl, sl, #1
 8005a50:	e22f      	b.n	8005eb2 <_dtoa_r+0x8fa>
 8005a52:	07f2      	lsls	r2, r6, #31
 8005a54:	d505      	bpl.n	8005a62 <_dtoa_r+0x4aa>
 8005a56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a5a:	f7fa fddd 	bl	8000618 <__aeabi_dmul>
 8005a5e:	3501      	adds	r5, #1
 8005a60:	2301      	movs	r3, #1
 8005a62:	1076      	asrs	r6, r6, #1
 8005a64:	3708      	adds	r7, #8
 8005a66:	e772      	b.n	800594e <_dtoa_r+0x396>
 8005a68:	2502      	movs	r5, #2
 8005a6a:	e774      	b.n	8005956 <_dtoa_r+0x39e>
 8005a6c:	f8cd a020 	str.w	sl, [sp, #32]
 8005a70:	464f      	mov	r7, r9
 8005a72:	e791      	b.n	8005998 <_dtoa_r+0x3e0>
 8005a74:	4b4d      	ldr	r3, [pc, #308]	; (8005bac <_dtoa_r+0x5f4>)
 8005a76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a7a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d047      	beq.n	8005b14 <_dtoa_r+0x55c>
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	2000      	movs	r0, #0
 8005a8a:	494e      	ldr	r1, [pc, #312]	; (8005bc4 <_dtoa_r+0x60c>)
 8005a8c:	f7fa feee 	bl	800086c <__aeabi_ddiv>
 8005a90:	462a      	mov	r2, r5
 8005a92:	4633      	mov	r3, r6
 8005a94:	f7fa fc08 	bl	80002a8 <__aeabi_dsub>
 8005a98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005a9c:	465d      	mov	r5, fp
 8005a9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005aa2:	f7fb f869 	bl	8000b78 <__aeabi_d2iz>
 8005aa6:	4606      	mov	r6, r0
 8005aa8:	f7fa fd4c 	bl	8000544 <__aeabi_i2d>
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ab4:	f7fa fbf8 	bl	80002a8 <__aeabi_dsub>
 8005ab8:	3630      	adds	r6, #48	; 0x30
 8005aba:	f805 6b01 	strb.w	r6, [r5], #1
 8005abe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005ac2:	e9cd 0100 	strd	r0, r1, [sp]
 8005ac6:	f7fb f819 	bl	8000afc <__aeabi_dcmplt>
 8005aca:	2800      	cmp	r0, #0
 8005acc:	d163      	bne.n	8005b96 <_dtoa_r+0x5de>
 8005ace:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	4937      	ldr	r1, [pc, #220]	; (8005bb4 <_dtoa_r+0x5fc>)
 8005ad6:	f7fa fbe7 	bl	80002a8 <__aeabi_dsub>
 8005ada:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005ade:	f7fb f80d 	bl	8000afc <__aeabi_dcmplt>
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	f040 80b7 	bne.w	8005c56 <_dtoa_r+0x69e>
 8005ae8:	eba5 030b 	sub.w	r3, r5, fp
 8005aec:	429f      	cmp	r7, r3
 8005aee:	f77f af7c 	ble.w	80059ea <_dtoa_r+0x432>
 8005af2:	2200      	movs	r2, #0
 8005af4:	4b30      	ldr	r3, [pc, #192]	; (8005bb8 <_dtoa_r+0x600>)
 8005af6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005afa:	f7fa fd8d 	bl	8000618 <__aeabi_dmul>
 8005afe:	2200      	movs	r2, #0
 8005b00:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005b04:	4b2c      	ldr	r3, [pc, #176]	; (8005bb8 <_dtoa_r+0x600>)
 8005b06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b0a:	f7fa fd85 	bl	8000618 <__aeabi_dmul>
 8005b0e:	e9cd 0100 	strd	r0, r1, [sp]
 8005b12:	e7c4      	b.n	8005a9e <_dtoa_r+0x4e6>
 8005b14:	462a      	mov	r2, r5
 8005b16:	4633      	mov	r3, r6
 8005b18:	f7fa fd7e 	bl	8000618 <__aeabi_dmul>
 8005b1c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005b20:	eb0b 0507 	add.w	r5, fp, r7
 8005b24:	465e      	mov	r6, fp
 8005b26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b2a:	f7fb f825 	bl	8000b78 <__aeabi_d2iz>
 8005b2e:	4607      	mov	r7, r0
 8005b30:	f7fa fd08 	bl	8000544 <__aeabi_i2d>
 8005b34:	3730      	adds	r7, #48	; 0x30
 8005b36:	4602      	mov	r2, r0
 8005b38:	460b      	mov	r3, r1
 8005b3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b3e:	f7fa fbb3 	bl	80002a8 <__aeabi_dsub>
 8005b42:	f806 7b01 	strb.w	r7, [r6], #1
 8005b46:	42ae      	cmp	r6, r5
 8005b48:	e9cd 0100 	strd	r0, r1, [sp]
 8005b4c:	f04f 0200 	mov.w	r2, #0
 8005b50:	d126      	bne.n	8005ba0 <_dtoa_r+0x5e8>
 8005b52:	4b1c      	ldr	r3, [pc, #112]	; (8005bc4 <_dtoa_r+0x60c>)
 8005b54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b58:	f7fa fba8 	bl	80002ac <__adddf3>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b64:	f7fa ffe8 	bl	8000b38 <__aeabi_dcmpgt>
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	d174      	bne.n	8005c56 <_dtoa_r+0x69e>
 8005b6c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005b70:	2000      	movs	r0, #0
 8005b72:	4914      	ldr	r1, [pc, #80]	; (8005bc4 <_dtoa_r+0x60c>)
 8005b74:	f7fa fb98 	bl	80002a8 <__aeabi_dsub>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b80:	f7fa ffbc 	bl	8000afc <__aeabi_dcmplt>
 8005b84:	2800      	cmp	r0, #0
 8005b86:	f43f af30 	beq.w	80059ea <_dtoa_r+0x432>
 8005b8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005b8e:	2b30      	cmp	r3, #48	; 0x30
 8005b90:	f105 32ff 	add.w	r2, r5, #4294967295
 8005b94:	d002      	beq.n	8005b9c <_dtoa_r+0x5e4>
 8005b96:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005b9a:	e04a      	b.n	8005c32 <_dtoa_r+0x67a>
 8005b9c:	4615      	mov	r5, r2
 8005b9e:	e7f4      	b.n	8005b8a <_dtoa_r+0x5d2>
 8005ba0:	4b05      	ldr	r3, [pc, #20]	; (8005bb8 <_dtoa_r+0x600>)
 8005ba2:	f7fa fd39 	bl	8000618 <__aeabi_dmul>
 8005ba6:	e9cd 0100 	strd	r0, r1, [sp]
 8005baa:	e7bc      	b.n	8005b26 <_dtoa_r+0x56e>
 8005bac:	08007338 	.word	0x08007338
 8005bb0:	08007310 	.word	0x08007310
 8005bb4:	3ff00000 	.word	0x3ff00000
 8005bb8:	40240000 	.word	0x40240000
 8005bbc:	401c0000 	.word	0x401c0000
 8005bc0:	40140000 	.word	0x40140000
 8005bc4:	3fe00000 	.word	0x3fe00000
 8005bc8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005bcc:	465d      	mov	r5, fp
 8005bce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	4639      	mov	r1, r7
 8005bd6:	f7fa fe49 	bl	800086c <__aeabi_ddiv>
 8005bda:	f7fa ffcd 	bl	8000b78 <__aeabi_d2iz>
 8005bde:	4680      	mov	r8, r0
 8005be0:	f7fa fcb0 	bl	8000544 <__aeabi_i2d>
 8005be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005be8:	f7fa fd16 	bl	8000618 <__aeabi_dmul>
 8005bec:	4602      	mov	r2, r0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	4639      	mov	r1, r7
 8005bf4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005bf8:	f7fa fb56 	bl	80002a8 <__aeabi_dsub>
 8005bfc:	f805 6b01 	strb.w	r6, [r5], #1
 8005c00:	eba5 060b 	sub.w	r6, r5, fp
 8005c04:	45b1      	cmp	r9, r6
 8005c06:	4602      	mov	r2, r0
 8005c08:	460b      	mov	r3, r1
 8005c0a:	d139      	bne.n	8005c80 <_dtoa_r+0x6c8>
 8005c0c:	f7fa fb4e 	bl	80002ac <__adddf3>
 8005c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c14:	4606      	mov	r6, r0
 8005c16:	460f      	mov	r7, r1
 8005c18:	f7fa ff8e 	bl	8000b38 <__aeabi_dcmpgt>
 8005c1c:	b9c8      	cbnz	r0, 8005c52 <_dtoa_r+0x69a>
 8005c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c22:	4630      	mov	r0, r6
 8005c24:	4639      	mov	r1, r7
 8005c26:	f7fa ff5f 	bl	8000ae8 <__aeabi_dcmpeq>
 8005c2a:	b110      	cbz	r0, 8005c32 <_dtoa_r+0x67a>
 8005c2c:	f018 0f01 	tst.w	r8, #1
 8005c30:	d10f      	bne.n	8005c52 <_dtoa_r+0x69a>
 8005c32:	9904      	ldr	r1, [sp, #16]
 8005c34:	4620      	mov	r0, r4
 8005c36:	f000 fb96 	bl	8006366 <_Bfree>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c3e:	702b      	strb	r3, [r5, #0]
 8005c40:	f10a 0301 	add.w	r3, sl, #1
 8005c44:	6013      	str	r3, [r2, #0]
 8005c46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 8241 	beq.w	80060d0 <_dtoa_r+0xb18>
 8005c4e:	601d      	str	r5, [r3, #0]
 8005c50:	e23e      	b.n	80060d0 <_dtoa_r+0xb18>
 8005c52:	f8cd a020 	str.w	sl, [sp, #32]
 8005c56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005c5a:	2a39      	cmp	r2, #57	; 0x39
 8005c5c:	f105 33ff 	add.w	r3, r5, #4294967295
 8005c60:	d108      	bne.n	8005c74 <_dtoa_r+0x6bc>
 8005c62:	459b      	cmp	fp, r3
 8005c64:	d10a      	bne.n	8005c7c <_dtoa_r+0x6c4>
 8005c66:	9b08      	ldr	r3, [sp, #32]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	9308      	str	r3, [sp, #32]
 8005c6c:	2330      	movs	r3, #48	; 0x30
 8005c6e:	f88b 3000 	strb.w	r3, [fp]
 8005c72:	465b      	mov	r3, fp
 8005c74:	781a      	ldrb	r2, [r3, #0]
 8005c76:	3201      	adds	r2, #1
 8005c78:	701a      	strb	r2, [r3, #0]
 8005c7a:	e78c      	b.n	8005b96 <_dtoa_r+0x5de>
 8005c7c:	461d      	mov	r5, r3
 8005c7e:	e7ea      	b.n	8005c56 <_dtoa_r+0x69e>
 8005c80:	2200      	movs	r2, #0
 8005c82:	4b9b      	ldr	r3, [pc, #620]	; (8005ef0 <_dtoa_r+0x938>)
 8005c84:	f7fa fcc8 	bl	8000618 <__aeabi_dmul>
 8005c88:	2200      	movs	r2, #0
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	4606      	mov	r6, r0
 8005c8e:	460f      	mov	r7, r1
 8005c90:	f7fa ff2a 	bl	8000ae8 <__aeabi_dcmpeq>
 8005c94:	2800      	cmp	r0, #0
 8005c96:	d09a      	beq.n	8005bce <_dtoa_r+0x616>
 8005c98:	e7cb      	b.n	8005c32 <_dtoa_r+0x67a>
 8005c9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c9c:	2a00      	cmp	r2, #0
 8005c9e:	f000 808b 	beq.w	8005db8 <_dtoa_r+0x800>
 8005ca2:	9a06      	ldr	r2, [sp, #24]
 8005ca4:	2a01      	cmp	r2, #1
 8005ca6:	dc6e      	bgt.n	8005d86 <_dtoa_r+0x7ce>
 8005ca8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005caa:	2a00      	cmp	r2, #0
 8005cac:	d067      	beq.n	8005d7e <_dtoa_r+0x7c6>
 8005cae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005cb2:	9f07      	ldr	r7, [sp, #28]
 8005cb4:	9d05      	ldr	r5, [sp, #20]
 8005cb6:	9a05      	ldr	r2, [sp, #20]
 8005cb8:	2101      	movs	r1, #1
 8005cba:	441a      	add	r2, r3
 8005cbc:	4620      	mov	r0, r4
 8005cbe:	9205      	str	r2, [sp, #20]
 8005cc0:	4498      	add	r8, r3
 8005cc2:	f000 fbf0 	bl	80064a6 <__i2b>
 8005cc6:	4606      	mov	r6, r0
 8005cc8:	2d00      	cmp	r5, #0
 8005cca:	dd0c      	ble.n	8005ce6 <_dtoa_r+0x72e>
 8005ccc:	f1b8 0f00 	cmp.w	r8, #0
 8005cd0:	dd09      	ble.n	8005ce6 <_dtoa_r+0x72e>
 8005cd2:	4545      	cmp	r5, r8
 8005cd4:	9a05      	ldr	r2, [sp, #20]
 8005cd6:	462b      	mov	r3, r5
 8005cd8:	bfa8      	it	ge
 8005cda:	4643      	movge	r3, r8
 8005cdc:	1ad2      	subs	r2, r2, r3
 8005cde:	9205      	str	r2, [sp, #20]
 8005ce0:	1aed      	subs	r5, r5, r3
 8005ce2:	eba8 0803 	sub.w	r8, r8, r3
 8005ce6:	9b07      	ldr	r3, [sp, #28]
 8005ce8:	b1eb      	cbz	r3, 8005d26 <_dtoa_r+0x76e>
 8005cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d067      	beq.n	8005dc0 <_dtoa_r+0x808>
 8005cf0:	b18f      	cbz	r7, 8005d16 <_dtoa_r+0x75e>
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	463a      	mov	r2, r7
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	f000 fc74 	bl	80065e4 <__pow5mult>
 8005cfc:	9a04      	ldr	r2, [sp, #16]
 8005cfe:	4601      	mov	r1, r0
 8005d00:	4606      	mov	r6, r0
 8005d02:	4620      	mov	r0, r4
 8005d04:	f000 fbd8 	bl	80064b8 <__multiply>
 8005d08:	9904      	ldr	r1, [sp, #16]
 8005d0a:	9008      	str	r0, [sp, #32]
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f000 fb2a 	bl	8006366 <_Bfree>
 8005d12:	9b08      	ldr	r3, [sp, #32]
 8005d14:	9304      	str	r3, [sp, #16]
 8005d16:	9b07      	ldr	r3, [sp, #28]
 8005d18:	1bda      	subs	r2, r3, r7
 8005d1a:	d004      	beq.n	8005d26 <_dtoa_r+0x76e>
 8005d1c:	9904      	ldr	r1, [sp, #16]
 8005d1e:	4620      	mov	r0, r4
 8005d20:	f000 fc60 	bl	80065e4 <__pow5mult>
 8005d24:	9004      	str	r0, [sp, #16]
 8005d26:	2101      	movs	r1, #1
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f000 fbbc 	bl	80064a6 <__i2b>
 8005d2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d30:	4607      	mov	r7, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 81d0 	beq.w	80060d8 <_dtoa_r+0xb20>
 8005d38:	461a      	mov	r2, r3
 8005d3a:	4601      	mov	r1, r0
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	f000 fc51 	bl	80065e4 <__pow5mult>
 8005d42:	9b06      	ldr	r3, [sp, #24]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	4607      	mov	r7, r0
 8005d48:	dc40      	bgt.n	8005dcc <_dtoa_r+0x814>
 8005d4a:	9b00      	ldr	r3, [sp, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d139      	bne.n	8005dc4 <_dtoa_r+0x80c>
 8005d50:	9b01      	ldr	r3, [sp, #4]
 8005d52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d136      	bne.n	8005dc8 <_dtoa_r+0x810>
 8005d5a:	9b01      	ldr	r3, [sp, #4]
 8005d5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d60:	0d1b      	lsrs	r3, r3, #20
 8005d62:	051b      	lsls	r3, r3, #20
 8005d64:	b12b      	cbz	r3, 8005d72 <_dtoa_r+0x7ba>
 8005d66:	9b05      	ldr	r3, [sp, #20]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	9305      	str	r3, [sp, #20]
 8005d6c:	f108 0801 	add.w	r8, r8, #1
 8005d70:	2301      	movs	r3, #1
 8005d72:	9307      	str	r3, [sp, #28]
 8005d74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d12a      	bne.n	8005dd0 <_dtoa_r+0x818>
 8005d7a:	2001      	movs	r0, #1
 8005d7c:	e030      	b.n	8005de0 <_dtoa_r+0x828>
 8005d7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d80:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005d84:	e795      	b.n	8005cb2 <_dtoa_r+0x6fa>
 8005d86:	9b07      	ldr	r3, [sp, #28]
 8005d88:	f109 37ff 	add.w	r7, r9, #4294967295
 8005d8c:	42bb      	cmp	r3, r7
 8005d8e:	bfbf      	itttt	lt
 8005d90:	9b07      	ldrlt	r3, [sp, #28]
 8005d92:	9707      	strlt	r7, [sp, #28]
 8005d94:	1afa      	sublt	r2, r7, r3
 8005d96:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005d98:	bfbb      	ittet	lt
 8005d9a:	189b      	addlt	r3, r3, r2
 8005d9c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005d9e:	1bdf      	subge	r7, r3, r7
 8005da0:	2700      	movlt	r7, #0
 8005da2:	f1b9 0f00 	cmp.w	r9, #0
 8005da6:	bfb5      	itete	lt
 8005da8:	9b05      	ldrlt	r3, [sp, #20]
 8005daa:	9d05      	ldrge	r5, [sp, #20]
 8005dac:	eba3 0509 	sublt.w	r5, r3, r9
 8005db0:	464b      	movge	r3, r9
 8005db2:	bfb8      	it	lt
 8005db4:	2300      	movlt	r3, #0
 8005db6:	e77e      	b.n	8005cb6 <_dtoa_r+0x6fe>
 8005db8:	9f07      	ldr	r7, [sp, #28]
 8005dba:	9d05      	ldr	r5, [sp, #20]
 8005dbc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005dbe:	e783      	b.n	8005cc8 <_dtoa_r+0x710>
 8005dc0:	9a07      	ldr	r2, [sp, #28]
 8005dc2:	e7ab      	b.n	8005d1c <_dtoa_r+0x764>
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	e7d4      	b.n	8005d72 <_dtoa_r+0x7ba>
 8005dc8:	9b00      	ldr	r3, [sp, #0]
 8005dca:	e7d2      	b.n	8005d72 <_dtoa_r+0x7ba>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	9307      	str	r3, [sp, #28]
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005dd6:	6918      	ldr	r0, [r3, #16]
 8005dd8:	f000 fb17 	bl	800640a <__hi0bits>
 8005ddc:	f1c0 0020 	rsb	r0, r0, #32
 8005de0:	4440      	add	r0, r8
 8005de2:	f010 001f 	ands.w	r0, r0, #31
 8005de6:	d047      	beq.n	8005e78 <_dtoa_r+0x8c0>
 8005de8:	f1c0 0320 	rsb	r3, r0, #32
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	dd3b      	ble.n	8005e68 <_dtoa_r+0x8b0>
 8005df0:	9b05      	ldr	r3, [sp, #20]
 8005df2:	f1c0 001c 	rsb	r0, r0, #28
 8005df6:	4403      	add	r3, r0
 8005df8:	9305      	str	r3, [sp, #20]
 8005dfa:	4405      	add	r5, r0
 8005dfc:	4480      	add	r8, r0
 8005dfe:	9b05      	ldr	r3, [sp, #20]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	dd05      	ble.n	8005e10 <_dtoa_r+0x858>
 8005e04:	461a      	mov	r2, r3
 8005e06:	9904      	ldr	r1, [sp, #16]
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f000 fc39 	bl	8006680 <__lshift>
 8005e0e:	9004      	str	r0, [sp, #16]
 8005e10:	f1b8 0f00 	cmp.w	r8, #0
 8005e14:	dd05      	ble.n	8005e22 <_dtoa_r+0x86a>
 8005e16:	4639      	mov	r1, r7
 8005e18:	4642      	mov	r2, r8
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f000 fc30 	bl	8006680 <__lshift>
 8005e20:	4607      	mov	r7, r0
 8005e22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e24:	b353      	cbz	r3, 8005e7c <_dtoa_r+0x8c4>
 8005e26:	4639      	mov	r1, r7
 8005e28:	9804      	ldr	r0, [sp, #16]
 8005e2a:	f000 fc7d 	bl	8006728 <__mcmp>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	da24      	bge.n	8005e7c <_dtoa_r+0x8c4>
 8005e32:	2300      	movs	r3, #0
 8005e34:	220a      	movs	r2, #10
 8005e36:	9904      	ldr	r1, [sp, #16]
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f000 faab 	bl	8006394 <__multadd>
 8005e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e40:	9004      	str	r0, [sp, #16]
 8005e42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f000 814d 	beq.w	80060e6 <_dtoa_r+0xb2e>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	4631      	mov	r1, r6
 8005e50:	220a      	movs	r2, #10
 8005e52:	4620      	mov	r0, r4
 8005e54:	f000 fa9e 	bl	8006394 <__multadd>
 8005e58:	9b02      	ldr	r3, [sp, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	4606      	mov	r6, r0
 8005e5e:	dc4f      	bgt.n	8005f00 <_dtoa_r+0x948>
 8005e60:	9b06      	ldr	r3, [sp, #24]
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	dd4c      	ble.n	8005f00 <_dtoa_r+0x948>
 8005e66:	e011      	b.n	8005e8c <_dtoa_r+0x8d4>
 8005e68:	d0c9      	beq.n	8005dfe <_dtoa_r+0x846>
 8005e6a:	9a05      	ldr	r2, [sp, #20]
 8005e6c:	331c      	adds	r3, #28
 8005e6e:	441a      	add	r2, r3
 8005e70:	9205      	str	r2, [sp, #20]
 8005e72:	441d      	add	r5, r3
 8005e74:	4498      	add	r8, r3
 8005e76:	e7c2      	b.n	8005dfe <_dtoa_r+0x846>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	e7f6      	b.n	8005e6a <_dtoa_r+0x8b2>
 8005e7c:	f1b9 0f00 	cmp.w	r9, #0
 8005e80:	dc38      	bgt.n	8005ef4 <_dtoa_r+0x93c>
 8005e82:	9b06      	ldr	r3, [sp, #24]
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	dd35      	ble.n	8005ef4 <_dtoa_r+0x93c>
 8005e88:	f8cd 9008 	str.w	r9, [sp, #8]
 8005e8c:	9b02      	ldr	r3, [sp, #8]
 8005e8e:	b963      	cbnz	r3, 8005eaa <_dtoa_r+0x8f2>
 8005e90:	4639      	mov	r1, r7
 8005e92:	2205      	movs	r2, #5
 8005e94:	4620      	mov	r0, r4
 8005e96:	f000 fa7d 	bl	8006394 <__multadd>
 8005e9a:	4601      	mov	r1, r0
 8005e9c:	4607      	mov	r7, r0
 8005e9e:	9804      	ldr	r0, [sp, #16]
 8005ea0:	f000 fc42 	bl	8006728 <__mcmp>
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	f73f adcc 	bgt.w	8005a42 <_dtoa_r+0x48a>
 8005eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eac:	465d      	mov	r5, fp
 8005eae:	ea6f 0a03 	mvn.w	sl, r3
 8005eb2:	f04f 0900 	mov.w	r9, #0
 8005eb6:	4639      	mov	r1, r7
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f000 fa54 	bl	8006366 <_Bfree>
 8005ebe:	2e00      	cmp	r6, #0
 8005ec0:	f43f aeb7 	beq.w	8005c32 <_dtoa_r+0x67a>
 8005ec4:	f1b9 0f00 	cmp.w	r9, #0
 8005ec8:	d005      	beq.n	8005ed6 <_dtoa_r+0x91e>
 8005eca:	45b1      	cmp	r9, r6
 8005ecc:	d003      	beq.n	8005ed6 <_dtoa_r+0x91e>
 8005ece:	4649      	mov	r1, r9
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	f000 fa48 	bl	8006366 <_Bfree>
 8005ed6:	4631      	mov	r1, r6
 8005ed8:	4620      	mov	r0, r4
 8005eda:	f000 fa44 	bl	8006366 <_Bfree>
 8005ede:	e6a8      	b.n	8005c32 <_dtoa_r+0x67a>
 8005ee0:	2700      	movs	r7, #0
 8005ee2:	463e      	mov	r6, r7
 8005ee4:	e7e1      	b.n	8005eaa <_dtoa_r+0x8f2>
 8005ee6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005eea:	463e      	mov	r6, r7
 8005eec:	e5a9      	b.n	8005a42 <_dtoa_r+0x48a>
 8005eee:	bf00      	nop
 8005ef0:	40240000 	.word	0x40240000
 8005ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ef6:	f8cd 9008 	str.w	r9, [sp, #8]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 80fa 	beq.w	80060f4 <_dtoa_r+0xb3c>
 8005f00:	2d00      	cmp	r5, #0
 8005f02:	dd05      	ble.n	8005f10 <_dtoa_r+0x958>
 8005f04:	4631      	mov	r1, r6
 8005f06:	462a      	mov	r2, r5
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f000 fbb9 	bl	8006680 <__lshift>
 8005f0e:	4606      	mov	r6, r0
 8005f10:	9b07      	ldr	r3, [sp, #28]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d04c      	beq.n	8005fb0 <_dtoa_r+0x9f8>
 8005f16:	6871      	ldr	r1, [r6, #4]
 8005f18:	4620      	mov	r0, r4
 8005f1a:	f000 f9f0 	bl	80062fe <_Balloc>
 8005f1e:	6932      	ldr	r2, [r6, #16]
 8005f20:	3202      	adds	r2, #2
 8005f22:	4605      	mov	r5, r0
 8005f24:	0092      	lsls	r2, r2, #2
 8005f26:	f106 010c 	add.w	r1, r6, #12
 8005f2a:	300c      	adds	r0, #12
 8005f2c:	f000 f9dc 	bl	80062e8 <memcpy>
 8005f30:	2201      	movs	r2, #1
 8005f32:	4629      	mov	r1, r5
 8005f34:	4620      	mov	r0, r4
 8005f36:	f000 fba3 	bl	8006680 <__lshift>
 8005f3a:	9b00      	ldr	r3, [sp, #0]
 8005f3c:	f8cd b014 	str.w	fp, [sp, #20]
 8005f40:	f003 0301 	and.w	r3, r3, #1
 8005f44:	46b1      	mov	r9, r6
 8005f46:	9307      	str	r3, [sp, #28]
 8005f48:	4606      	mov	r6, r0
 8005f4a:	4639      	mov	r1, r7
 8005f4c:	9804      	ldr	r0, [sp, #16]
 8005f4e:	f7ff faa5 	bl	800549c <quorem>
 8005f52:	4649      	mov	r1, r9
 8005f54:	4605      	mov	r5, r0
 8005f56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005f5a:	9804      	ldr	r0, [sp, #16]
 8005f5c:	f000 fbe4 	bl	8006728 <__mcmp>
 8005f60:	4632      	mov	r2, r6
 8005f62:	9000      	str	r0, [sp, #0]
 8005f64:	4639      	mov	r1, r7
 8005f66:	4620      	mov	r0, r4
 8005f68:	f000 fbf8 	bl	800675c <__mdiff>
 8005f6c:	68c3      	ldr	r3, [r0, #12]
 8005f6e:	4602      	mov	r2, r0
 8005f70:	bb03      	cbnz	r3, 8005fb4 <_dtoa_r+0x9fc>
 8005f72:	4601      	mov	r1, r0
 8005f74:	9008      	str	r0, [sp, #32]
 8005f76:	9804      	ldr	r0, [sp, #16]
 8005f78:	f000 fbd6 	bl	8006728 <__mcmp>
 8005f7c:	9a08      	ldr	r2, [sp, #32]
 8005f7e:	4603      	mov	r3, r0
 8005f80:	4611      	mov	r1, r2
 8005f82:	4620      	mov	r0, r4
 8005f84:	9308      	str	r3, [sp, #32]
 8005f86:	f000 f9ee 	bl	8006366 <_Bfree>
 8005f8a:	9b08      	ldr	r3, [sp, #32]
 8005f8c:	b9a3      	cbnz	r3, 8005fb8 <_dtoa_r+0xa00>
 8005f8e:	9a06      	ldr	r2, [sp, #24]
 8005f90:	b992      	cbnz	r2, 8005fb8 <_dtoa_r+0xa00>
 8005f92:	9a07      	ldr	r2, [sp, #28]
 8005f94:	b982      	cbnz	r2, 8005fb8 <_dtoa_r+0xa00>
 8005f96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005f9a:	d029      	beq.n	8005ff0 <_dtoa_r+0xa38>
 8005f9c:	9b00      	ldr	r3, [sp, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	dd01      	ble.n	8005fa6 <_dtoa_r+0x9ee>
 8005fa2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005fa6:	9b05      	ldr	r3, [sp, #20]
 8005fa8:	1c5d      	adds	r5, r3, #1
 8005faa:	f883 8000 	strb.w	r8, [r3]
 8005fae:	e782      	b.n	8005eb6 <_dtoa_r+0x8fe>
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	e7c2      	b.n	8005f3a <_dtoa_r+0x982>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e7e3      	b.n	8005f80 <_dtoa_r+0x9c8>
 8005fb8:	9a00      	ldr	r2, [sp, #0]
 8005fba:	2a00      	cmp	r2, #0
 8005fbc:	db04      	blt.n	8005fc8 <_dtoa_r+0xa10>
 8005fbe:	d125      	bne.n	800600c <_dtoa_r+0xa54>
 8005fc0:	9a06      	ldr	r2, [sp, #24]
 8005fc2:	bb1a      	cbnz	r2, 800600c <_dtoa_r+0xa54>
 8005fc4:	9a07      	ldr	r2, [sp, #28]
 8005fc6:	bb0a      	cbnz	r2, 800600c <_dtoa_r+0xa54>
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	ddec      	ble.n	8005fa6 <_dtoa_r+0x9ee>
 8005fcc:	2201      	movs	r2, #1
 8005fce:	9904      	ldr	r1, [sp, #16]
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f000 fb55 	bl	8006680 <__lshift>
 8005fd6:	4639      	mov	r1, r7
 8005fd8:	9004      	str	r0, [sp, #16]
 8005fda:	f000 fba5 	bl	8006728 <__mcmp>
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	dc03      	bgt.n	8005fea <_dtoa_r+0xa32>
 8005fe2:	d1e0      	bne.n	8005fa6 <_dtoa_r+0x9ee>
 8005fe4:	f018 0f01 	tst.w	r8, #1
 8005fe8:	d0dd      	beq.n	8005fa6 <_dtoa_r+0x9ee>
 8005fea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005fee:	d1d8      	bne.n	8005fa2 <_dtoa_r+0x9ea>
 8005ff0:	9b05      	ldr	r3, [sp, #20]
 8005ff2:	9a05      	ldr	r2, [sp, #20]
 8005ff4:	1c5d      	adds	r5, r3, #1
 8005ff6:	2339      	movs	r3, #57	; 0x39
 8005ff8:	7013      	strb	r3, [r2, #0]
 8005ffa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ffe:	2b39      	cmp	r3, #57	; 0x39
 8006000:	f105 32ff 	add.w	r2, r5, #4294967295
 8006004:	d04f      	beq.n	80060a6 <_dtoa_r+0xaee>
 8006006:	3301      	adds	r3, #1
 8006008:	7013      	strb	r3, [r2, #0]
 800600a:	e754      	b.n	8005eb6 <_dtoa_r+0x8fe>
 800600c:	9a05      	ldr	r2, [sp, #20]
 800600e:	2b00      	cmp	r3, #0
 8006010:	f102 0501 	add.w	r5, r2, #1
 8006014:	dd06      	ble.n	8006024 <_dtoa_r+0xa6c>
 8006016:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800601a:	d0e9      	beq.n	8005ff0 <_dtoa_r+0xa38>
 800601c:	f108 0801 	add.w	r8, r8, #1
 8006020:	9b05      	ldr	r3, [sp, #20]
 8006022:	e7c2      	b.n	8005faa <_dtoa_r+0x9f2>
 8006024:	9a02      	ldr	r2, [sp, #8]
 8006026:	f805 8c01 	strb.w	r8, [r5, #-1]
 800602a:	eba5 030b 	sub.w	r3, r5, fp
 800602e:	4293      	cmp	r3, r2
 8006030:	d021      	beq.n	8006076 <_dtoa_r+0xabe>
 8006032:	2300      	movs	r3, #0
 8006034:	220a      	movs	r2, #10
 8006036:	9904      	ldr	r1, [sp, #16]
 8006038:	4620      	mov	r0, r4
 800603a:	f000 f9ab 	bl	8006394 <__multadd>
 800603e:	45b1      	cmp	r9, r6
 8006040:	9004      	str	r0, [sp, #16]
 8006042:	f04f 0300 	mov.w	r3, #0
 8006046:	f04f 020a 	mov.w	r2, #10
 800604a:	4649      	mov	r1, r9
 800604c:	4620      	mov	r0, r4
 800604e:	d105      	bne.n	800605c <_dtoa_r+0xaa4>
 8006050:	f000 f9a0 	bl	8006394 <__multadd>
 8006054:	4681      	mov	r9, r0
 8006056:	4606      	mov	r6, r0
 8006058:	9505      	str	r5, [sp, #20]
 800605a:	e776      	b.n	8005f4a <_dtoa_r+0x992>
 800605c:	f000 f99a 	bl	8006394 <__multadd>
 8006060:	4631      	mov	r1, r6
 8006062:	4681      	mov	r9, r0
 8006064:	2300      	movs	r3, #0
 8006066:	220a      	movs	r2, #10
 8006068:	4620      	mov	r0, r4
 800606a:	f000 f993 	bl	8006394 <__multadd>
 800606e:	4606      	mov	r6, r0
 8006070:	e7f2      	b.n	8006058 <_dtoa_r+0xaa0>
 8006072:	f04f 0900 	mov.w	r9, #0
 8006076:	2201      	movs	r2, #1
 8006078:	9904      	ldr	r1, [sp, #16]
 800607a:	4620      	mov	r0, r4
 800607c:	f000 fb00 	bl	8006680 <__lshift>
 8006080:	4639      	mov	r1, r7
 8006082:	9004      	str	r0, [sp, #16]
 8006084:	f000 fb50 	bl	8006728 <__mcmp>
 8006088:	2800      	cmp	r0, #0
 800608a:	dcb6      	bgt.n	8005ffa <_dtoa_r+0xa42>
 800608c:	d102      	bne.n	8006094 <_dtoa_r+0xadc>
 800608e:	f018 0f01 	tst.w	r8, #1
 8006092:	d1b2      	bne.n	8005ffa <_dtoa_r+0xa42>
 8006094:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006098:	2b30      	cmp	r3, #48	; 0x30
 800609a:	f105 32ff 	add.w	r2, r5, #4294967295
 800609e:	f47f af0a 	bne.w	8005eb6 <_dtoa_r+0x8fe>
 80060a2:	4615      	mov	r5, r2
 80060a4:	e7f6      	b.n	8006094 <_dtoa_r+0xadc>
 80060a6:	4593      	cmp	fp, r2
 80060a8:	d105      	bne.n	80060b6 <_dtoa_r+0xafe>
 80060aa:	2331      	movs	r3, #49	; 0x31
 80060ac:	f10a 0a01 	add.w	sl, sl, #1
 80060b0:	f88b 3000 	strb.w	r3, [fp]
 80060b4:	e6ff      	b.n	8005eb6 <_dtoa_r+0x8fe>
 80060b6:	4615      	mov	r5, r2
 80060b8:	e79f      	b.n	8005ffa <_dtoa_r+0xa42>
 80060ba:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006120 <_dtoa_r+0xb68>
 80060be:	e007      	b.n	80060d0 <_dtoa_r+0xb18>
 80060c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060c2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006124 <_dtoa_r+0xb6c>
 80060c6:	b11b      	cbz	r3, 80060d0 <_dtoa_r+0xb18>
 80060c8:	f10b 0308 	add.w	r3, fp, #8
 80060cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80060ce:	6013      	str	r3, [r2, #0]
 80060d0:	4658      	mov	r0, fp
 80060d2:	b017      	add	sp, #92	; 0x5c
 80060d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d8:	9b06      	ldr	r3, [sp, #24]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	f77f ae35 	ble.w	8005d4a <_dtoa_r+0x792>
 80060e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060e2:	9307      	str	r3, [sp, #28]
 80060e4:	e649      	b.n	8005d7a <_dtoa_r+0x7c2>
 80060e6:	9b02      	ldr	r3, [sp, #8]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	dc03      	bgt.n	80060f4 <_dtoa_r+0xb3c>
 80060ec:	9b06      	ldr	r3, [sp, #24]
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	f73f aecc 	bgt.w	8005e8c <_dtoa_r+0x8d4>
 80060f4:	465d      	mov	r5, fp
 80060f6:	4639      	mov	r1, r7
 80060f8:	9804      	ldr	r0, [sp, #16]
 80060fa:	f7ff f9cf 	bl	800549c <quorem>
 80060fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006102:	f805 8b01 	strb.w	r8, [r5], #1
 8006106:	9a02      	ldr	r2, [sp, #8]
 8006108:	eba5 030b 	sub.w	r3, r5, fp
 800610c:	429a      	cmp	r2, r3
 800610e:	ddb0      	ble.n	8006072 <_dtoa_r+0xaba>
 8006110:	2300      	movs	r3, #0
 8006112:	220a      	movs	r2, #10
 8006114:	9904      	ldr	r1, [sp, #16]
 8006116:	4620      	mov	r0, r4
 8006118:	f000 f93c 	bl	8006394 <__multadd>
 800611c:	9004      	str	r0, [sp, #16]
 800611e:	e7ea      	b.n	80060f6 <_dtoa_r+0xb3e>
 8006120:	08007278 	.word	0x08007278
 8006124:	0800729c 	.word	0x0800729c

08006128 <std>:
 8006128:	2300      	movs	r3, #0
 800612a:	b510      	push	{r4, lr}
 800612c:	4604      	mov	r4, r0
 800612e:	e9c0 3300 	strd	r3, r3, [r0]
 8006132:	6083      	str	r3, [r0, #8]
 8006134:	8181      	strh	r1, [r0, #12]
 8006136:	6643      	str	r3, [r0, #100]	; 0x64
 8006138:	81c2      	strh	r2, [r0, #14]
 800613a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800613e:	6183      	str	r3, [r0, #24]
 8006140:	4619      	mov	r1, r3
 8006142:	2208      	movs	r2, #8
 8006144:	305c      	adds	r0, #92	; 0x5c
 8006146:	f7fe fd2d 	bl	8004ba4 <memset>
 800614a:	4b05      	ldr	r3, [pc, #20]	; (8006160 <std+0x38>)
 800614c:	6263      	str	r3, [r4, #36]	; 0x24
 800614e:	4b05      	ldr	r3, [pc, #20]	; (8006164 <std+0x3c>)
 8006150:	62a3      	str	r3, [r4, #40]	; 0x28
 8006152:	4b05      	ldr	r3, [pc, #20]	; (8006168 <std+0x40>)
 8006154:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006156:	4b05      	ldr	r3, [pc, #20]	; (800616c <std+0x44>)
 8006158:	6224      	str	r4, [r4, #32]
 800615a:	6323      	str	r3, [r4, #48]	; 0x30
 800615c:	bd10      	pop	{r4, pc}
 800615e:	bf00      	nop
 8006160:	08006cc1 	.word	0x08006cc1
 8006164:	08006ce3 	.word	0x08006ce3
 8006168:	08006d1b 	.word	0x08006d1b
 800616c:	08006d3f 	.word	0x08006d3f

08006170 <_cleanup_r>:
 8006170:	4901      	ldr	r1, [pc, #4]	; (8006178 <_cleanup_r+0x8>)
 8006172:	f000 b885 	b.w	8006280 <_fwalk_reent>
 8006176:	bf00      	nop
 8006178:	08007019 	.word	0x08007019

0800617c <__sfmoreglue>:
 800617c:	b570      	push	{r4, r5, r6, lr}
 800617e:	1e4a      	subs	r2, r1, #1
 8006180:	2568      	movs	r5, #104	; 0x68
 8006182:	4355      	muls	r5, r2
 8006184:	460e      	mov	r6, r1
 8006186:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800618a:	f000 fbef 	bl	800696c <_malloc_r>
 800618e:	4604      	mov	r4, r0
 8006190:	b140      	cbz	r0, 80061a4 <__sfmoreglue+0x28>
 8006192:	2100      	movs	r1, #0
 8006194:	e9c0 1600 	strd	r1, r6, [r0]
 8006198:	300c      	adds	r0, #12
 800619a:	60a0      	str	r0, [r4, #8]
 800619c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80061a0:	f7fe fd00 	bl	8004ba4 <memset>
 80061a4:	4620      	mov	r0, r4
 80061a6:	bd70      	pop	{r4, r5, r6, pc}

080061a8 <__sinit>:
 80061a8:	6983      	ldr	r3, [r0, #24]
 80061aa:	b510      	push	{r4, lr}
 80061ac:	4604      	mov	r4, r0
 80061ae:	bb33      	cbnz	r3, 80061fe <__sinit+0x56>
 80061b0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80061b4:	6503      	str	r3, [r0, #80]	; 0x50
 80061b6:	4b12      	ldr	r3, [pc, #72]	; (8006200 <__sinit+0x58>)
 80061b8:	4a12      	ldr	r2, [pc, #72]	; (8006204 <__sinit+0x5c>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6282      	str	r2, [r0, #40]	; 0x28
 80061be:	4298      	cmp	r0, r3
 80061c0:	bf04      	itt	eq
 80061c2:	2301      	moveq	r3, #1
 80061c4:	6183      	streq	r3, [r0, #24]
 80061c6:	f000 f81f 	bl	8006208 <__sfp>
 80061ca:	6060      	str	r0, [r4, #4]
 80061cc:	4620      	mov	r0, r4
 80061ce:	f000 f81b 	bl	8006208 <__sfp>
 80061d2:	60a0      	str	r0, [r4, #8]
 80061d4:	4620      	mov	r0, r4
 80061d6:	f000 f817 	bl	8006208 <__sfp>
 80061da:	2200      	movs	r2, #0
 80061dc:	60e0      	str	r0, [r4, #12]
 80061de:	2104      	movs	r1, #4
 80061e0:	6860      	ldr	r0, [r4, #4]
 80061e2:	f7ff ffa1 	bl	8006128 <std>
 80061e6:	2201      	movs	r2, #1
 80061e8:	2109      	movs	r1, #9
 80061ea:	68a0      	ldr	r0, [r4, #8]
 80061ec:	f7ff ff9c 	bl	8006128 <std>
 80061f0:	2202      	movs	r2, #2
 80061f2:	2112      	movs	r1, #18
 80061f4:	68e0      	ldr	r0, [r4, #12]
 80061f6:	f7ff ff97 	bl	8006128 <std>
 80061fa:	2301      	movs	r3, #1
 80061fc:	61a3      	str	r3, [r4, #24]
 80061fe:	bd10      	pop	{r4, pc}
 8006200:	08007264 	.word	0x08007264
 8006204:	08006171 	.word	0x08006171

08006208 <__sfp>:
 8006208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620a:	4b1b      	ldr	r3, [pc, #108]	; (8006278 <__sfp+0x70>)
 800620c:	681e      	ldr	r6, [r3, #0]
 800620e:	69b3      	ldr	r3, [r6, #24]
 8006210:	4607      	mov	r7, r0
 8006212:	b913      	cbnz	r3, 800621a <__sfp+0x12>
 8006214:	4630      	mov	r0, r6
 8006216:	f7ff ffc7 	bl	80061a8 <__sinit>
 800621a:	3648      	adds	r6, #72	; 0x48
 800621c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006220:	3b01      	subs	r3, #1
 8006222:	d503      	bpl.n	800622c <__sfp+0x24>
 8006224:	6833      	ldr	r3, [r6, #0]
 8006226:	b133      	cbz	r3, 8006236 <__sfp+0x2e>
 8006228:	6836      	ldr	r6, [r6, #0]
 800622a:	e7f7      	b.n	800621c <__sfp+0x14>
 800622c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006230:	b16d      	cbz	r5, 800624e <__sfp+0x46>
 8006232:	3468      	adds	r4, #104	; 0x68
 8006234:	e7f4      	b.n	8006220 <__sfp+0x18>
 8006236:	2104      	movs	r1, #4
 8006238:	4638      	mov	r0, r7
 800623a:	f7ff ff9f 	bl	800617c <__sfmoreglue>
 800623e:	6030      	str	r0, [r6, #0]
 8006240:	2800      	cmp	r0, #0
 8006242:	d1f1      	bne.n	8006228 <__sfp+0x20>
 8006244:	230c      	movs	r3, #12
 8006246:	603b      	str	r3, [r7, #0]
 8006248:	4604      	mov	r4, r0
 800624a:	4620      	mov	r0, r4
 800624c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800624e:	4b0b      	ldr	r3, [pc, #44]	; (800627c <__sfp+0x74>)
 8006250:	6665      	str	r5, [r4, #100]	; 0x64
 8006252:	e9c4 5500 	strd	r5, r5, [r4]
 8006256:	60a5      	str	r5, [r4, #8]
 8006258:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800625c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006260:	2208      	movs	r2, #8
 8006262:	4629      	mov	r1, r5
 8006264:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006268:	f7fe fc9c 	bl	8004ba4 <memset>
 800626c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006270:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006274:	e7e9      	b.n	800624a <__sfp+0x42>
 8006276:	bf00      	nop
 8006278:	08007264 	.word	0x08007264
 800627c:	ffff0001 	.word	0xffff0001

08006280 <_fwalk_reent>:
 8006280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006284:	4680      	mov	r8, r0
 8006286:	4689      	mov	r9, r1
 8006288:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800628c:	2600      	movs	r6, #0
 800628e:	b914      	cbnz	r4, 8006296 <_fwalk_reent+0x16>
 8006290:	4630      	mov	r0, r6
 8006292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006296:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800629a:	3f01      	subs	r7, #1
 800629c:	d501      	bpl.n	80062a2 <_fwalk_reent+0x22>
 800629e:	6824      	ldr	r4, [r4, #0]
 80062a0:	e7f5      	b.n	800628e <_fwalk_reent+0xe>
 80062a2:	89ab      	ldrh	r3, [r5, #12]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d907      	bls.n	80062b8 <_fwalk_reent+0x38>
 80062a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062ac:	3301      	adds	r3, #1
 80062ae:	d003      	beq.n	80062b8 <_fwalk_reent+0x38>
 80062b0:	4629      	mov	r1, r5
 80062b2:	4640      	mov	r0, r8
 80062b4:	47c8      	blx	r9
 80062b6:	4306      	orrs	r6, r0
 80062b8:	3568      	adds	r5, #104	; 0x68
 80062ba:	e7ee      	b.n	800629a <_fwalk_reent+0x1a>

080062bc <_localeconv_r>:
 80062bc:	4b04      	ldr	r3, [pc, #16]	; (80062d0 <_localeconv_r+0x14>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6a18      	ldr	r0, [r3, #32]
 80062c2:	4b04      	ldr	r3, [pc, #16]	; (80062d4 <_localeconv_r+0x18>)
 80062c4:	2800      	cmp	r0, #0
 80062c6:	bf08      	it	eq
 80062c8:	4618      	moveq	r0, r3
 80062ca:	30f0      	adds	r0, #240	; 0xf0
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	2000000c 	.word	0x2000000c
 80062d4:	20000070 	.word	0x20000070

080062d8 <malloc>:
 80062d8:	4b02      	ldr	r3, [pc, #8]	; (80062e4 <malloc+0xc>)
 80062da:	4601      	mov	r1, r0
 80062dc:	6818      	ldr	r0, [r3, #0]
 80062de:	f000 bb45 	b.w	800696c <_malloc_r>
 80062e2:	bf00      	nop
 80062e4:	2000000c 	.word	0x2000000c

080062e8 <memcpy>:
 80062e8:	b510      	push	{r4, lr}
 80062ea:	1e43      	subs	r3, r0, #1
 80062ec:	440a      	add	r2, r1
 80062ee:	4291      	cmp	r1, r2
 80062f0:	d100      	bne.n	80062f4 <memcpy+0xc>
 80062f2:	bd10      	pop	{r4, pc}
 80062f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062fc:	e7f7      	b.n	80062ee <memcpy+0x6>

080062fe <_Balloc>:
 80062fe:	b570      	push	{r4, r5, r6, lr}
 8006300:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006302:	4604      	mov	r4, r0
 8006304:	460e      	mov	r6, r1
 8006306:	b93d      	cbnz	r5, 8006318 <_Balloc+0x1a>
 8006308:	2010      	movs	r0, #16
 800630a:	f7ff ffe5 	bl	80062d8 <malloc>
 800630e:	6260      	str	r0, [r4, #36]	; 0x24
 8006310:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006314:	6005      	str	r5, [r0, #0]
 8006316:	60c5      	str	r5, [r0, #12]
 8006318:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800631a:	68eb      	ldr	r3, [r5, #12]
 800631c:	b183      	cbz	r3, 8006340 <_Balloc+0x42>
 800631e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006326:	b9b8      	cbnz	r0, 8006358 <_Balloc+0x5a>
 8006328:	2101      	movs	r1, #1
 800632a:	fa01 f506 	lsl.w	r5, r1, r6
 800632e:	1d6a      	adds	r2, r5, #5
 8006330:	0092      	lsls	r2, r2, #2
 8006332:	4620      	mov	r0, r4
 8006334:	f000 fabe 	bl	80068b4 <_calloc_r>
 8006338:	b160      	cbz	r0, 8006354 <_Balloc+0x56>
 800633a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800633e:	e00e      	b.n	800635e <_Balloc+0x60>
 8006340:	2221      	movs	r2, #33	; 0x21
 8006342:	2104      	movs	r1, #4
 8006344:	4620      	mov	r0, r4
 8006346:	f000 fab5 	bl	80068b4 <_calloc_r>
 800634a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800634c:	60e8      	str	r0, [r5, #12]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1e4      	bne.n	800631e <_Balloc+0x20>
 8006354:	2000      	movs	r0, #0
 8006356:	bd70      	pop	{r4, r5, r6, pc}
 8006358:	6802      	ldr	r2, [r0, #0]
 800635a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800635e:	2300      	movs	r3, #0
 8006360:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006364:	e7f7      	b.n	8006356 <_Balloc+0x58>

08006366 <_Bfree>:
 8006366:	b570      	push	{r4, r5, r6, lr}
 8006368:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800636a:	4606      	mov	r6, r0
 800636c:	460d      	mov	r5, r1
 800636e:	b93c      	cbnz	r4, 8006380 <_Bfree+0x1a>
 8006370:	2010      	movs	r0, #16
 8006372:	f7ff ffb1 	bl	80062d8 <malloc>
 8006376:	6270      	str	r0, [r6, #36]	; 0x24
 8006378:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800637c:	6004      	str	r4, [r0, #0]
 800637e:	60c4      	str	r4, [r0, #12]
 8006380:	b13d      	cbz	r5, 8006392 <_Bfree+0x2c>
 8006382:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006384:	686a      	ldr	r2, [r5, #4]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800638c:	6029      	str	r1, [r5, #0]
 800638e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006392:	bd70      	pop	{r4, r5, r6, pc}

08006394 <__multadd>:
 8006394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006398:	690d      	ldr	r5, [r1, #16]
 800639a:	461f      	mov	r7, r3
 800639c:	4606      	mov	r6, r0
 800639e:	460c      	mov	r4, r1
 80063a0:	f101 0c14 	add.w	ip, r1, #20
 80063a4:	2300      	movs	r3, #0
 80063a6:	f8dc 0000 	ldr.w	r0, [ip]
 80063aa:	b281      	uxth	r1, r0
 80063ac:	fb02 7101 	mla	r1, r2, r1, r7
 80063b0:	0c0f      	lsrs	r7, r1, #16
 80063b2:	0c00      	lsrs	r0, r0, #16
 80063b4:	fb02 7000 	mla	r0, r2, r0, r7
 80063b8:	b289      	uxth	r1, r1
 80063ba:	3301      	adds	r3, #1
 80063bc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80063c0:	429d      	cmp	r5, r3
 80063c2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80063c6:	f84c 1b04 	str.w	r1, [ip], #4
 80063ca:	dcec      	bgt.n	80063a6 <__multadd+0x12>
 80063cc:	b1d7      	cbz	r7, 8006404 <__multadd+0x70>
 80063ce:	68a3      	ldr	r3, [r4, #8]
 80063d0:	42ab      	cmp	r3, r5
 80063d2:	dc12      	bgt.n	80063fa <__multadd+0x66>
 80063d4:	6861      	ldr	r1, [r4, #4]
 80063d6:	4630      	mov	r0, r6
 80063d8:	3101      	adds	r1, #1
 80063da:	f7ff ff90 	bl	80062fe <_Balloc>
 80063de:	6922      	ldr	r2, [r4, #16]
 80063e0:	3202      	adds	r2, #2
 80063e2:	f104 010c 	add.w	r1, r4, #12
 80063e6:	4680      	mov	r8, r0
 80063e8:	0092      	lsls	r2, r2, #2
 80063ea:	300c      	adds	r0, #12
 80063ec:	f7ff ff7c 	bl	80062e8 <memcpy>
 80063f0:	4621      	mov	r1, r4
 80063f2:	4630      	mov	r0, r6
 80063f4:	f7ff ffb7 	bl	8006366 <_Bfree>
 80063f8:	4644      	mov	r4, r8
 80063fa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80063fe:	3501      	adds	r5, #1
 8006400:	615f      	str	r7, [r3, #20]
 8006402:	6125      	str	r5, [r4, #16]
 8006404:	4620      	mov	r0, r4
 8006406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800640a <__hi0bits>:
 800640a:	0c02      	lsrs	r2, r0, #16
 800640c:	0412      	lsls	r2, r2, #16
 800640e:	4603      	mov	r3, r0
 8006410:	b9b2      	cbnz	r2, 8006440 <__hi0bits+0x36>
 8006412:	0403      	lsls	r3, r0, #16
 8006414:	2010      	movs	r0, #16
 8006416:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800641a:	bf04      	itt	eq
 800641c:	021b      	lsleq	r3, r3, #8
 800641e:	3008      	addeq	r0, #8
 8006420:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006424:	bf04      	itt	eq
 8006426:	011b      	lsleq	r3, r3, #4
 8006428:	3004      	addeq	r0, #4
 800642a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800642e:	bf04      	itt	eq
 8006430:	009b      	lsleq	r3, r3, #2
 8006432:	3002      	addeq	r0, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	db06      	blt.n	8006446 <__hi0bits+0x3c>
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	d503      	bpl.n	8006444 <__hi0bits+0x3a>
 800643c:	3001      	adds	r0, #1
 800643e:	4770      	bx	lr
 8006440:	2000      	movs	r0, #0
 8006442:	e7e8      	b.n	8006416 <__hi0bits+0xc>
 8006444:	2020      	movs	r0, #32
 8006446:	4770      	bx	lr

08006448 <__lo0bits>:
 8006448:	6803      	ldr	r3, [r0, #0]
 800644a:	f013 0207 	ands.w	r2, r3, #7
 800644e:	4601      	mov	r1, r0
 8006450:	d00b      	beq.n	800646a <__lo0bits+0x22>
 8006452:	07da      	lsls	r2, r3, #31
 8006454:	d423      	bmi.n	800649e <__lo0bits+0x56>
 8006456:	0798      	lsls	r0, r3, #30
 8006458:	bf49      	itett	mi
 800645a:	085b      	lsrmi	r3, r3, #1
 800645c:	089b      	lsrpl	r3, r3, #2
 800645e:	2001      	movmi	r0, #1
 8006460:	600b      	strmi	r3, [r1, #0]
 8006462:	bf5c      	itt	pl
 8006464:	600b      	strpl	r3, [r1, #0]
 8006466:	2002      	movpl	r0, #2
 8006468:	4770      	bx	lr
 800646a:	b298      	uxth	r0, r3
 800646c:	b9a8      	cbnz	r0, 800649a <__lo0bits+0x52>
 800646e:	0c1b      	lsrs	r3, r3, #16
 8006470:	2010      	movs	r0, #16
 8006472:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006476:	bf04      	itt	eq
 8006478:	0a1b      	lsreq	r3, r3, #8
 800647a:	3008      	addeq	r0, #8
 800647c:	071a      	lsls	r2, r3, #28
 800647e:	bf04      	itt	eq
 8006480:	091b      	lsreq	r3, r3, #4
 8006482:	3004      	addeq	r0, #4
 8006484:	079a      	lsls	r2, r3, #30
 8006486:	bf04      	itt	eq
 8006488:	089b      	lsreq	r3, r3, #2
 800648a:	3002      	addeq	r0, #2
 800648c:	07da      	lsls	r2, r3, #31
 800648e:	d402      	bmi.n	8006496 <__lo0bits+0x4e>
 8006490:	085b      	lsrs	r3, r3, #1
 8006492:	d006      	beq.n	80064a2 <__lo0bits+0x5a>
 8006494:	3001      	adds	r0, #1
 8006496:	600b      	str	r3, [r1, #0]
 8006498:	4770      	bx	lr
 800649a:	4610      	mov	r0, r2
 800649c:	e7e9      	b.n	8006472 <__lo0bits+0x2a>
 800649e:	2000      	movs	r0, #0
 80064a0:	4770      	bx	lr
 80064a2:	2020      	movs	r0, #32
 80064a4:	4770      	bx	lr

080064a6 <__i2b>:
 80064a6:	b510      	push	{r4, lr}
 80064a8:	460c      	mov	r4, r1
 80064aa:	2101      	movs	r1, #1
 80064ac:	f7ff ff27 	bl	80062fe <_Balloc>
 80064b0:	2201      	movs	r2, #1
 80064b2:	6144      	str	r4, [r0, #20]
 80064b4:	6102      	str	r2, [r0, #16]
 80064b6:	bd10      	pop	{r4, pc}

080064b8 <__multiply>:
 80064b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064bc:	4614      	mov	r4, r2
 80064be:	690a      	ldr	r2, [r1, #16]
 80064c0:	6923      	ldr	r3, [r4, #16]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	bfb8      	it	lt
 80064c6:	460b      	movlt	r3, r1
 80064c8:	4688      	mov	r8, r1
 80064ca:	bfbc      	itt	lt
 80064cc:	46a0      	movlt	r8, r4
 80064ce:	461c      	movlt	r4, r3
 80064d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80064d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80064d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80064dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80064e0:	eb07 0609 	add.w	r6, r7, r9
 80064e4:	42b3      	cmp	r3, r6
 80064e6:	bfb8      	it	lt
 80064e8:	3101      	addlt	r1, #1
 80064ea:	f7ff ff08 	bl	80062fe <_Balloc>
 80064ee:	f100 0514 	add.w	r5, r0, #20
 80064f2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80064f6:	462b      	mov	r3, r5
 80064f8:	2200      	movs	r2, #0
 80064fa:	4573      	cmp	r3, lr
 80064fc:	d316      	bcc.n	800652c <__multiply+0x74>
 80064fe:	f104 0214 	add.w	r2, r4, #20
 8006502:	f108 0114 	add.w	r1, r8, #20
 8006506:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800650a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	9b00      	ldr	r3, [sp, #0]
 8006512:	9201      	str	r2, [sp, #4]
 8006514:	4293      	cmp	r3, r2
 8006516:	d80c      	bhi.n	8006532 <__multiply+0x7a>
 8006518:	2e00      	cmp	r6, #0
 800651a:	dd03      	ble.n	8006524 <__multiply+0x6c>
 800651c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006520:	2b00      	cmp	r3, #0
 8006522:	d05d      	beq.n	80065e0 <__multiply+0x128>
 8006524:	6106      	str	r6, [r0, #16]
 8006526:	b003      	add	sp, #12
 8006528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652c:	f843 2b04 	str.w	r2, [r3], #4
 8006530:	e7e3      	b.n	80064fa <__multiply+0x42>
 8006532:	f8b2 b000 	ldrh.w	fp, [r2]
 8006536:	f1bb 0f00 	cmp.w	fp, #0
 800653a:	d023      	beq.n	8006584 <__multiply+0xcc>
 800653c:	4689      	mov	r9, r1
 800653e:	46ac      	mov	ip, r5
 8006540:	f04f 0800 	mov.w	r8, #0
 8006544:	f859 4b04 	ldr.w	r4, [r9], #4
 8006548:	f8dc a000 	ldr.w	sl, [ip]
 800654c:	b2a3      	uxth	r3, r4
 800654e:	fa1f fa8a 	uxth.w	sl, sl
 8006552:	fb0b a303 	mla	r3, fp, r3, sl
 8006556:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800655a:	f8dc 4000 	ldr.w	r4, [ip]
 800655e:	4443      	add	r3, r8
 8006560:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006564:	fb0b 840a 	mla	r4, fp, sl, r8
 8006568:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800656c:	46e2      	mov	sl, ip
 800656e:	b29b      	uxth	r3, r3
 8006570:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006574:	454f      	cmp	r7, r9
 8006576:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800657a:	f84a 3b04 	str.w	r3, [sl], #4
 800657e:	d82b      	bhi.n	80065d8 <__multiply+0x120>
 8006580:	f8cc 8004 	str.w	r8, [ip, #4]
 8006584:	9b01      	ldr	r3, [sp, #4]
 8006586:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800658a:	3204      	adds	r2, #4
 800658c:	f1ba 0f00 	cmp.w	sl, #0
 8006590:	d020      	beq.n	80065d4 <__multiply+0x11c>
 8006592:	682b      	ldr	r3, [r5, #0]
 8006594:	4689      	mov	r9, r1
 8006596:	46a8      	mov	r8, r5
 8006598:	f04f 0b00 	mov.w	fp, #0
 800659c:	f8b9 c000 	ldrh.w	ip, [r9]
 80065a0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80065a4:	fb0a 440c 	mla	r4, sl, ip, r4
 80065a8:	445c      	add	r4, fp
 80065aa:	46c4      	mov	ip, r8
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80065b2:	f84c 3b04 	str.w	r3, [ip], #4
 80065b6:	f859 3b04 	ldr.w	r3, [r9], #4
 80065ba:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80065be:	0c1b      	lsrs	r3, r3, #16
 80065c0:	fb0a b303 	mla	r3, sl, r3, fp
 80065c4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80065c8:	454f      	cmp	r7, r9
 80065ca:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80065ce:	d805      	bhi.n	80065dc <__multiply+0x124>
 80065d0:	f8c8 3004 	str.w	r3, [r8, #4]
 80065d4:	3504      	adds	r5, #4
 80065d6:	e79b      	b.n	8006510 <__multiply+0x58>
 80065d8:	46d4      	mov	ip, sl
 80065da:	e7b3      	b.n	8006544 <__multiply+0x8c>
 80065dc:	46e0      	mov	r8, ip
 80065de:	e7dd      	b.n	800659c <__multiply+0xe4>
 80065e0:	3e01      	subs	r6, #1
 80065e2:	e799      	b.n	8006518 <__multiply+0x60>

080065e4 <__pow5mult>:
 80065e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065e8:	4615      	mov	r5, r2
 80065ea:	f012 0203 	ands.w	r2, r2, #3
 80065ee:	4606      	mov	r6, r0
 80065f0:	460f      	mov	r7, r1
 80065f2:	d007      	beq.n	8006604 <__pow5mult+0x20>
 80065f4:	3a01      	subs	r2, #1
 80065f6:	4c21      	ldr	r4, [pc, #132]	; (800667c <__pow5mult+0x98>)
 80065f8:	2300      	movs	r3, #0
 80065fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065fe:	f7ff fec9 	bl	8006394 <__multadd>
 8006602:	4607      	mov	r7, r0
 8006604:	10ad      	asrs	r5, r5, #2
 8006606:	d035      	beq.n	8006674 <__pow5mult+0x90>
 8006608:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800660a:	b93c      	cbnz	r4, 800661c <__pow5mult+0x38>
 800660c:	2010      	movs	r0, #16
 800660e:	f7ff fe63 	bl	80062d8 <malloc>
 8006612:	6270      	str	r0, [r6, #36]	; 0x24
 8006614:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006618:	6004      	str	r4, [r0, #0]
 800661a:	60c4      	str	r4, [r0, #12]
 800661c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006620:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006624:	b94c      	cbnz	r4, 800663a <__pow5mult+0x56>
 8006626:	f240 2171 	movw	r1, #625	; 0x271
 800662a:	4630      	mov	r0, r6
 800662c:	f7ff ff3b 	bl	80064a6 <__i2b>
 8006630:	2300      	movs	r3, #0
 8006632:	f8c8 0008 	str.w	r0, [r8, #8]
 8006636:	4604      	mov	r4, r0
 8006638:	6003      	str	r3, [r0, #0]
 800663a:	f04f 0800 	mov.w	r8, #0
 800663e:	07eb      	lsls	r3, r5, #31
 8006640:	d50a      	bpl.n	8006658 <__pow5mult+0x74>
 8006642:	4639      	mov	r1, r7
 8006644:	4622      	mov	r2, r4
 8006646:	4630      	mov	r0, r6
 8006648:	f7ff ff36 	bl	80064b8 <__multiply>
 800664c:	4639      	mov	r1, r7
 800664e:	4681      	mov	r9, r0
 8006650:	4630      	mov	r0, r6
 8006652:	f7ff fe88 	bl	8006366 <_Bfree>
 8006656:	464f      	mov	r7, r9
 8006658:	106d      	asrs	r5, r5, #1
 800665a:	d00b      	beq.n	8006674 <__pow5mult+0x90>
 800665c:	6820      	ldr	r0, [r4, #0]
 800665e:	b938      	cbnz	r0, 8006670 <__pow5mult+0x8c>
 8006660:	4622      	mov	r2, r4
 8006662:	4621      	mov	r1, r4
 8006664:	4630      	mov	r0, r6
 8006666:	f7ff ff27 	bl	80064b8 <__multiply>
 800666a:	6020      	str	r0, [r4, #0]
 800666c:	f8c0 8000 	str.w	r8, [r0]
 8006670:	4604      	mov	r4, r0
 8006672:	e7e4      	b.n	800663e <__pow5mult+0x5a>
 8006674:	4638      	mov	r0, r7
 8006676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800667a:	bf00      	nop
 800667c:	08007400 	.word	0x08007400

08006680 <__lshift>:
 8006680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006684:	460c      	mov	r4, r1
 8006686:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800668a:	6923      	ldr	r3, [r4, #16]
 800668c:	6849      	ldr	r1, [r1, #4]
 800668e:	eb0a 0903 	add.w	r9, sl, r3
 8006692:	68a3      	ldr	r3, [r4, #8]
 8006694:	4607      	mov	r7, r0
 8006696:	4616      	mov	r6, r2
 8006698:	f109 0501 	add.w	r5, r9, #1
 800669c:	42ab      	cmp	r3, r5
 800669e:	db32      	blt.n	8006706 <__lshift+0x86>
 80066a0:	4638      	mov	r0, r7
 80066a2:	f7ff fe2c 	bl	80062fe <_Balloc>
 80066a6:	2300      	movs	r3, #0
 80066a8:	4680      	mov	r8, r0
 80066aa:	f100 0114 	add.w	r1, r0, #20
 80066ae:	461a      	mov	r2, r3
 80066b0:	4553      	cmp	r3, sl
 80066b2:	db2b      	blt.n	800670c <__lshift+0x8c>
 80066b4:	6920      	ldr	r0, [r4, #16]
 80066b6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066ba:	f104 0314 	add.w	r3, r4, #20
 80066be:	f016 021f 	ands.w	r2, r6, #31
 80066c2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066c6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80066ca:	d025      	beq.n	8006718 <__lshift+0x98>
 80066cc:	f1c2 0e20 	rsb	lr, r2, #32
 80066d0:	2000      	movs	r0, #0
 80066d2:	681e      	ldr	r6, [r3, #0]
 80066d4:	468a      	mov	sl, r1
 80066d6:	4096      	lsls	r6, r2
 80066d8:	4330      	orrs	r0, r6
 80066da:	f84a 0b04 	str.w	r0, [sl], #4
 80066de:	f853 0b04 	ldr.w	r0, [r3], #4
 80066e2:	459c      	cmp	ip, r3
 80066e4:	fa20 f00e 	lsr.w	r0, r0, lr
 80066e8:	d814      	bhi.n	8006714 <__lshift+0x94>
 80066ea:	6048      	str	r0, [r1, #4]
 80066ec:	b108      	cbz	r0, 80066f2 <__lshift+0x72>
 80066ee:	f109 0502 	add.w	r5, r9, #2
 80066f2:	3d01      	subs	r5, #1
 80066f4:	4638      	mov	r0, r7
 80066f6:	f8c8 5010 	str.w	r5, [r8, #16]
 80066fa:	4621      	mov	r1, r4
 80066fc:	f7ff fe33 	bl	8006366 <_Bfree>
 8006700:	4640      	mov	r0, r8
 8006702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006706:	3101      	adds	r1, #1
 8006708:	005b      	lsls	r3, r3, #1
 800670a:	e7c7      	b.n	800669c <__lshift+0x1c>
 800670c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006710:	3301      	adds	r3, #1
 8006712:	e7cd      	b.n	80066b0 <__lshift+0x30>
 8006714:	4651      	mov	r1, sl
 8006716:	e7dc      	b.n	80066d2 <__lshift+0x52>
 8006718:	3904      	subs	r1, #4
 800671a:	f853 2b04 	ldr.w	r2, [r3], #4
 800671e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006722:	459c      	cmp	ip, r3
 8006724:	d8f9      	bhi.n	800671a <__lshift+0x9a>
 8006726:	e7e4      	b.n	80066f2 <__lshift+0x72>

08006728 <__mcmp>:
 8006728:	6903      	ldr	r3, [r0, #16]
 800672a:	690a      	ldr	r2, [r1, #16]
 800672c:	1a9b      	subs	r3, r3, r2
 800672e:	b530      	push	{r4, r5, lr}
 8006730:	d10c      	bne.n	800674c <__mcmp+0x24>
 8006732:	0092      	lsls	r2, r2, #2
 8006734:	3014      	adds	r0, #20
 8006736:	3114      	adds	r1, #20
 8006738:	1884      	adds	r4, r0, r2
 800673a:	4411      	add	r1, r2
 800673c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006740:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006744:	4295      	cmp	r5, r2
 8006746:	d003      	beq.n	8006750 <__mcmp+0x28>
 8006748:	d305      	bcc.n	8006756 <__mcmp+0x2e>
 800674a:	2301      	movs	r3, #1
 800674c:	4618      	mov	r0, r3
 800674e:	bd30      	pop	{r4, r5, pc}
 8006750:	42a0      	cmp	r0, r4
 8006752:	d3f3      	bcc.n	800673c <__mcmp+0x14>
 8006754:	e7fa      	b.n	800674c <__mcmp+0x24>
 8006756:	f04f 33ff 	mov.w	r3, #4294967295
 800675a:	e7f7      	b.n	800674c <__mcmp+0x24>

0800675c <__mdiff>:
 800675c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006760:	460d      	mov	r5, r1
 8006762:	4607      	mov	r7, r0
 8006764:	4611      	mov	r1, r2
 8006766:	4628      	mov	r0, r5
 8006768:	4614      	mov	r4, r2
 800676a:	f7ff ffdd 	bl	8006728 <__mcmp>
 800676e:	1e06      	subs	r6, r0, #0
 8006770:	d108      	bne.n	8006784 <__mdiff+0x28>
 8006772:	4631      	mov	r1, r6
 8006774:	4638      	mov	r0, r7
 8006776:	f7ff fdc2 	bl	80062fe <_Balloc>
 800677a:	2301      	movs	r3, #1
 800677c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006784:	bfa4      	itt	ge
 8006786:	4623      	movge	r3, r4
 8006788:	462c      	movge	r4, r5
 800678a:	4638      	mov	r0, r7
 800678c:	6861      	ldr	r1, [r4, #4]
 800678e:	bfa6      	itte	ge
 8006790:	461d      	movge	r5, r3
 8006792:	2600      	movge	r6, #0
 8006794:	2601      	movlt	r6, #1
 8006796:	f7ff fdb2 	bl	80062fe <_Balloc>
 800679a:	692b      	ldr	r3, [r5, #16]
 800679c:	60c6      	str	r6, [r0, #12]
 800679e:	6926      	ldr	r6, [r4, #16]
 80067a0:	f105 0914 	add.w	r9, r5, #20
 80067a4:	f104 0214 	add.w	r2, r4, #20
 80067a8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80067ac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80067b0:	f100 0514 	add.w	r5, r0, #20
 80067b4:	f04f 0e00 	mov.w	lr, #0
 80067b8:	f852 ab04 	ldr.w	sl, [r2], #4
 80067bc:	f859 4b04 	ldr.w	r4, [r9], #4
 80067c0:	fa1e f18a 	uxtah	r1, lr, sl
 80067c4:	b2a3      	uxth	r3, r4
 80067c6:	1ac9      	subs	r1, r1, r3
 80067c8:	0c23      	lsrs	r3, r4, #16
 80067ca:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80067ce:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80067d2:	b289      	uxth	r1, r1
 80067d4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80067d8:	45c8      	cmp	r8, r9
 80067da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80067de:	4694      	mov	ip, r2
 80067e0:	f845 3b04 	str.w	r3, [r5], #4
 80067e4:	d8e8      	bhi.n	80067b8 <__mdiff+0x5c>
 80067e6:	45bc      	cmp	ip, r7
 80067e8:	d304      	bcc.n	80067f4 <__mdiff+0x98>
 80067ea:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80067ee:	b183      	cbz	r3, 8006812 <__mdiff+0xb6>
 80067f0:	6106      	str	r6, [r0, #16]
 80067f2:	e7c5      	b.n	8006780 <__mdiff+0x24>
 80067f4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80067f8:	fa1e f381 	uxtah	r3, lr, r1
 80067fc:	141a      	asrs	r2, r3, #16
 80067fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006802:	b29b      	uxth	r3, r3
 8006804:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006808:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800680c:	f845 3b04 	str.w	r3, [r5], #4
 8006810:	e7e9      	b.n	80067e6 <__mdiff+0x8a>
 8006812:	3e01      	subs	r6, #1
 8006814:	e7e9      	b.n	80067ea <__mdiff+0x8e>

08006816 <__d2b>:
 8006816:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800681a:	460e      	mov	r6, r1
 800681c:	2101      	movs	r1, #1
 800681e:	ec59 8b10 	vmov	r8, r9, d0
 8006822:	4615      	mov	r5, r2
 8006824:	f7ff fd6b 	bl	80062fe <_Balloc>
 8006828:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800682c:	4607      	mov	r7, r0
 800682e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006832:	bb34      	cbnz	r4, 8006882 <__d2b+0x6c>
 8006834:	9301      	str	r3, [sp, #4]
 8006836:	f1b8 0300 	subs.w	r3, r8, #0
 800683a:	d027      	beq.n	800688c <__d2b+0x76>
 800683c:	a802      	add	r0, sp, #8
 800683e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006842:	f7ff fe01 	bl	8006448 <__lo0bits>
 8006846:	9900      	ldr	r1, [sp, #0]
 8006848:	b1f0      	cbz	r0, 8006888 <__d2b+0x72>
 800684a:	9a01      	ldr	r2, [sp, #4]
 800684c:	f1c0 0320 	rsb	r3, r0, #32
 8006850:	fa02 f303 	lsl.w	r3, r2, r3
 8006854:	430b      	orrs	r3, r1
 8006856:	40c2      	lsrs	r2, r0
 8006858:	617b      	str	r3, [r7, #20]
 800685a:	9201      	str	r2, [sp, #4]
 800685c:	9b01      	ldr	r3, [sp, #4]
 800685e:	61bb      	str	r3, [r7, #24]
 8006860:	2b00      	cmp	r3, #0
 8006862:	bf14      	ite	ne
 8006864:	2102      	movne	r1, #2
 8006866:	2101      	moveq	r1, #1
 8006868:	6139      	str	r1, [r7, #16]
 800686a:	b1c4      	cbz	r4, 800689e <__d2b+0x88>
 800686c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006870:	4404      	add	r4, r0
 8006872:	6034      	str	r4, [r6, #0]
 8006874:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006878:	6028      	str	r0, [r5, #0]
 800687a:	4638      	mov	r0, r7
 800687c:	b003      	add	sp, #12
 800687e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006882:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006886:	e7d5      	b.n	8006834 <__d2b+0x1e>
 8006888:	6179      	str	r1, [r7, #20]
 800688a:	e7e7      	b.n	800685c <__d2b+0x46>
 800688c:	a801      	add	r0, sp, #4
 800688e:	f7ff fddb 	bl	8006448 <__lo0bits>
 8006892:	9b01      	ldr	r3, [sp, #4]
 8006894:	617b      	str	r3, [r7, #20]
 8006896:	2101      	movs	r1, #1
 8006898:	6139      	str	r1, [r7, #16]
 800689a:	3020      	adds	r0, #32
 800689c:	e7e5      	b.n	800686a <__d2b+0x54>
 800689e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80068a2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80068a6:	6030      	str	r0, [r6, #0]
 80068a8:	6918      	ldr	r0, [r3, #16]
 80068aa:	f7ff fdae 	bl	800640a <__hi0bits>
 80068ae:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80068b2:	e7e1      	b.n	8006878 <__d2b+0x62>

080068b4 <_calloc_r>:
 80068b4:	b538      	push	{r3, r4, r5, lr}
 80068b6:	fb02 f401 	mul.w	r4, r2, r1
 80068ba:	4621      	mov	r1, r4
 80068bc:	f000 f856 	bl	800696c <_malloc_r>
 80068c0:	4605      	mov	r5, r0
 80068c2:	b118      	cbz	r0, 80068cc <_calloc_r+0x18>
 80068c4:	4622      	mov	r2, r4
 80068c6:	2100      	movs	r1, #0
 80068c8:	f7fe f96c 	bl	8004ba4 <memset>
 80068cc:	4628      	mov	r0, r5
 80068ce:	bd38      	pop	{r3, r4, r5, pc}

080068d0 <_free_r>:
 80068d0:	b538      	push	{r3, r4, r5, lr}
 80068d2:	4605      	mov	r5, r0
 80068d4:	2900      	cmp	r1, #0
 80068d6:	d045      	beq.n	8006964 <_free_r+0x94>
 80068d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068dc:	1f0c      	subs	r4, r1, #4
 80068de:	2b00      	cmp	r3, #0
 80068e0:	bfb8      	it	lt
 80068e2:	18e4      	addlt	r4, r4, r3
 80068e4:	f000 fc4a 	bl	800717c <__malloc_lock>
 80068e8:	4a1f      	ldr	r2, [pc, #124]	; (8006968 <_free_r+0x98>)
 80068ea:	6813      	ldr	r3, [r2, #0]
 80068ec:	4610      	mov	r0, r2
 80068ee:	b933      	cbnz	r3, 80068fe <_free_r+0x2e>
 80068f0:	6063      	str	r3, [r4, #4]
 80068f2:	6014      	str	r4, [r2, #0]
 80068f4:	4628      	mov	r0, r5
 80068f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068fa:	f000 bc40 	b.w	800717e <__malloc_unlock>
 80068fe:	42a3      	cmp	r3, r4
 8006900:	d90c      	bls.n	800691c <_free_r+0x4c>
 8006902:	6821      	ldr	r1, [r4, #0]
 8006904:	1862      	adds	r2, r4, r1
 8006906:	4293      	cmp	r3, r2
 8006908:	bf04      	itt	eq
 800690a:	681a      	ldreq	r2, [r3, #0]
 800690c:	685b      	ldreq	r3, [r3, #4]
 800690e:	6063      	str	r3, [r4, #4]
 8006910:	bf04      	itt	eq
 8006912:	1852      	addeq	r2, r2, r1
 8006914:	6022      	streq	r2, [r4, #0]
 8006916:	6004      	str	r4, [r0, #0]
 8006918:	e7ec      	b.n	80068f4 <_free_r+0x24>
 800691a:	4613      	mov	r3, r2
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	b10a      	cbz	r2, 8006924 <_free_r+0x54>
 8006920:	42a2      	cmp	r2, r4
 8006922:	d9fa      	bls.n	800691a <_free_r+0x4a>
 8006924:	6819      	ldr	r1, [r3, #0]
 8006926:	1858      	adds	r0, r3, r1
 8006928:	42a0      	cmp	r0, r4
 800692a:	d10b      	bne.n	8006944 <_free_r+0x74>
 800692c:	6820      	ldr	r0, [r4, #0]
 800692e:	4401      	add	r1, r0
 8006930:	1858      	adds	r0, r3, r1
 8006932:	4282      	cmp	r2, r0
 8006934:	6019      	str	r1, [r3, #0]
 8006936:	d1dd      	bne.n	80068f4 <_free_r+0x24>
 8006938:	6810      	ldr	r0, [r2, #0]
 800693a:	6852      	ldr	r2, [r2, #4]
 800693c:	605a      	str	r2, [r3, #4]
 800693e:	4401      	add	r1, r0
 8006940:	6019      	str	r1, [r3, #0]
 8006942:	e7d7      	b.n	80068f4 <_free_r+0x24>
 8006944:	d902      	bls.n	800694c <_free_r+0x7c>
 8006946:	230c      	movs	r3, #12
 8006948:	602b      	str	r3, [r5, #0]
 800694a:	e7d3      	b.n	80068f4 <_free_r+0x24>
 800694c:	6820      	ldr	r0, [r4, #0]
 800694e:	1821      	adds	r1, r4, r0
 8006950:	428a      	cmp	r2, r1
 8006952:	bf04      	itt	eq
 8006954:	6811      	ldreq	r1, [r2, #0]
 8006956:	6852      	ldreq	r2, [r2, #4]
 8006958:	6062      	str	r2, [r4, #4]
 800695a:	bf04      	itt	eq
 800695c:	1809      	addeq	r1, r1, r0
 800695e:	6021      	streq	r1, [r4, #0]
 8006960:	605c      	str	r4, [r3, #4]
 8006962:	e7c7      	b.n	80068f4 <_free_r+0x24>
 8006964:	bd38      	pop	{r3, r4, r5, pc}
 8006966:	bf00      	nop
 8006968:	20000200 	.word	0x20000200

0800696c <_malloc_r>:
 800696c:	b570      	push	{r4, r5, r6, lr}
 800696e:	1ccd      	adds	r5, r1, #3
 8006970:	f025 0503 	bic.w	r5, r5, #3
 8006974:	3508      	adds	r5, #8
 8006976:	2d0c      	cmp	r5, #12
 8006978:	bf38      	it	cc
 800697a:	250c      	movcc	r5, #12
 800697c:	2d00      	cmp	r5, #0
 800697e:	4606      	mov	r6, r0
 8006980:	db01      	blt.n	8006986 <_malloc_r+0x1a>
 8006982:	42a9      	cmp	r1, r5
 8006984:	d903      	bls.n	800698e <_malloc_r+0x22>
 8006986:	230c      	movs	r3, #12
 8006988:	6033      	str	r3, [r6, #0]
 800698a:	2000      	movs	r0, #0
 800698c:	bd70      	pop	{r4, r5, r6, pc}
 800698e:	f000 fbf5 	bl	800717c <__malloc_lock>
 8006992:	4a21      	ldr	r2, [pc, #132]	; (8006a18 <_malloc_r+0xac>)
 8006994:	6814      	ldr	r4, [r2, #0]
 8006996:	4621      	mov	r1, r4
 8006998:	b991      	cbnz	r1, 80069c0 <_malloc_r+0x54>
 800699a:	4c20      	ldr	r4, [pc, #128]	; (8006a1c <_malloc_r+0xb0>)
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	b91b      	cbnz	r3, 80069a8 <_malloc_r+0x3c>
 80069a0:	4630      	mov	r0, r6
 80069a2:	f000 f97d 	bl	8006ca0 <_sbrk_r>
 80069a6:	6020      	str	r0, [r4, #0]
 80069a8:	4629      	mov	r1, r5
 80069aa:	4630      	mov	r0, r6
 80069ac:	f000 f978 	bl	8006ca0 <_sbrk_r>
 80069b0:	1c43      	adds	r3, r0, #1
 80069b2:	d124      	bne.n	80069fe <_malloc_r+0x92>
 80069b4:	230c      	movs	r3, #12
 80069b6:	6033      	str	r3, [r6, #0]
 80069b8:	4630      	mov	r0, r6
 80069ba:	f000 fbe0 	bl	800717e <__malloc_unlock>
 80069be:	e7e4      	b.n	800698a <_malloc_r+0x1e>
 80069c0:	680b      	ldr	r3, [r1, #0]
 80069c2:	1b5b      	subs	r3, r3, r5
 80069c4:	d418      	bmi.n	80069f8 <_malloc_r+0x8c>
 80069c6:	2b0b      	cmp	r3, #11
 80069c8:	d90f      	bls.n	80069ea <_malloc_r+0x7e>
 80069ca:	600b      	str	r3, [r1, #0]
 80069cc:	50cd      	str	r5, [r1, r3]
 80069ce:	18cc      	adds	r4, r1, r3
 80069d0:	4630      	mov	r0, r6
 80069d2:	f000 fbd4 	bl	800717e <__malloc_unlock>
 80069d6:	f104 000b 	add.w	r0, r4, #11
 80069da:	1d23      	adds	r3, r4, #4
 80069dc:	f020 0007 	bic.w	r0, r0, #7
 80069e0:	1ac3      	subs	r3, r0, r3
 80069e2:	d0d3      	beq.n	800698c <_malloc_r+0x20>
 80069e4:	425a      	negs	r2, r3
 80069e6:	50e2      	str	r2, [r4, r3]
 80069e8:	e7d0      	b.n	800698c <_malloc_r+0x20>
 80069ea:	428c      	cmp	r4, r1
 80069ec:	684b      	ldr	r3, [r1, #4]
 80069ee:	bf16      	itet	ne
 80069f0:	6063      	strne	r3, [r4, #4]
 80069f2:	6013      	streq	r3, [r2, #0]
 80069f4:	460c      	movne	r4, r1
 80069f6:	e7eb      	b.n	80069d0 <_malloc_r+0x64>
 80069f8:	460c      	mov	r4, r1
 80069fa:	6849      	ldr	r1, [r1, #4]
 80069fc:	e7cc      	b.n	8006998 <_malloc_r+0x2c>
 80069fe:	1cc4      	adds	r4, r0, #3
 8006a00:	f024 0403 	bic.w	r4, r4, #3
 8006a04:	42a0      	cmp	r0, r4
 8006a06:	d005      	beq.n	8006a14 <_malloc_r+0xa8>
 8006a08:	1a21      	subs	r1, r4, r0
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	f000 f948 	bl	8006ca0 <_sbrk_r>
 8006a10:	3001      	adds	r0, #1
 8006a12:	d0cf      	beq.n	80069b4 <_malloc_r+0x48>
 8006a14:	6025      	str	r5, [r4, #0]
 8006a16:	e7db      	b.n	80069d0 <_malloc_r+0x64>
 8006a18:	20000200 	.word	0x20000200
 8006a1c:	20000204 	.word	0x20000204

08006a20 <__sfputc_r>:
 8006a20:	6893      	ldr	r3, [r2, #8]
 8006a22:	3b01      	subs	r3, #1
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	b410      	push	{r4}
 8006a28:	6093      	str	r3, [r2, #8]
 8006a2a:	da08      	bge.n	8006a3e <__sfputc_r+0x1e>
 8006a2c:	6994      	ldr	r4, [r2, #24]
 8006a2e:	42a3      	cmp	r3, r4
 8006a30:	db01      	blt.n	8006a36 <__sfputc_r+0x16>
 8006a32:	290a      	cmp	r1, #10
 8006a34:	d103      	bne.n	8006a3e <__sfputc_r+0x1e>
 8006a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a3a:	f000 b985 	b.w	8006d48 <__swbuf_r>
 8006a3e:	6813      	ldr	r3, [r2, #0]
 8006a40:	1c58      	adds	r0, r3, #1
 8006a42:	6010      	str	r0, [r2, #0]
 8006a44:	7019      	strb	r1, [r3, #0]
 8006a46:	4608      	mov	r0, r1
 8006a48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <__sfputs_r>:
 8006a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a50:	4606      	mov	r6, r0
 8006a52:	460f      	mov	r7, r1
 8006a54:	4614      	mov	r4, r2
 8006a56:	18d5      	adds	r5, r2, r3
 8006a58:	42ac      	cmp	r4, r5
 8006a5a:	d101      	bne.n	8006a60 <__sfputs_r+0x12>
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	e007      	b.n	8006a70 <__sfputs_r+0x22>
 8006a60:	463a      	mov	r2, r7
 8006a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a66:	4630      	mov	r0, r6
 8006a68:	f7ff ffda 	bl	8006a20 <__sfputc_r>
 8006a6c:	1c43      	adds	r3, r0, #1
 8006a6e:	d1f3      	bne.n	8006a58 <__sfputs_r+0xa>
 8006a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a74 <_vfiprintf_r>:
 8006a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a78:	460c      	mov	r4, r1
 8006a7a:	b09d      	sub	sp, #116	; 0x74
 8006a7c:	4617      	mov	r7, r2
 8006a7e:	461d      	mov	r5, r3
 8006a80:	4606      	mov	r6, r0
 8006a82:	b118      	cbz	r0, 8006a8c <_vfiprintf_r+0x18>
 8006a84:	6983      	ldr	r3, [r0, #24]
 8006a86:	b90b      	cbnz	r3, 8006a8c <_vfiprintf_r+0x18>
 8006a88:	f7ff fb8e 	bl	80061a8 <__sinit>
 8006a8c:	4b7c      	ldr	r3, [pc, #496]	; (8006c80 <_vfiprintf_r+0x20c>)
 8006a8e:	429c      	cmp	r4, r3
 8006a90:	d158      	bne.n	8006b44 <_vfiprintf_r+0xd0>
 8006a92:	6874      	ldr	r4, [r6, #4]
 8006a94:	89a3      	ldrh	r3, [r4, #12]
 8006a96:	0718      	lsls	r0, r3, #28
 8006a98:	d55e      	bpl.n	8006b58 <_vfiprintf_r+0xe4>
 8006a9a:	6923      	ldr	r3, [r4, #16]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d05b      	beq.n	8006b58 <_vfiprintf_r+0xe4>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8006aa4:	2320      	movs	r3, #32
 8006aa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006aaa:	2330      	movs	r3, #48	; 0x30
 8006aac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ab0:	9503      	str	r5, [sp, #12]
 8006ab2:	f04f 0b01 	mov.w	fp, #1
 8006ab6:	46b8      	mov	r8, r7
 8006ab8:	4645      	mov	r5, r8
 8006aba:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006abe:	b10b      	cbz	r3, 8006ac4 <_vfiprintf_r+0x50>
 8006ac0:	2b25      	cmp	r3, #37	; 0x25
 8006ac2:	d154      	bne.n	8006b6e <_vfiprintf_r+0xfa>
 8006ac4:	ebb8 0a07 	subs.w	sl, r8, r7
 8006ac8:	d00b      	beq.n	8006ae2 <_vfiprintf_r+0x6e>
 8006aca:	4653      	mov	r3, sl
 8006acc:	463a      	mov	r2, r7
 8006ace:	4621      	mov	r1, r4
 8006ad0:	4630      	mov	r0, r6
 8006ad2:	f7ff ffbc 	bl	8006a4e <__sfputs_r>
 8006ad6:	3001      	adds	r0, #1
 8006ad8:	f000 80c2 	beq.w	8006c60 <_vfiprintf_r+0x1ec>
 8006adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ade:	4453      	add	r3, sl
 8006ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ae2:	f898 3000 	ldrb.w	r3, [r8]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 80ba 	beq.w	8006c60 <_vfiprintf_r+0x1ec>
 8006aec:	2300      	movs	r3, #0
 8006aee:	f04f 32ff 	mov.w	r2, #4294967295
 8006af2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006af6:	9304      	str	r3, [sp, #16]
 8006af8:	9307      	str	r3, [sp, #28]
 8006afa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006afe:	931a      	str	r3, [sp, #104]	; 0x68
 8006b00:	46a8      	mov	r8, r5
 8006b02:	2205      	movs	r2, #5
 8006b04:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006b08:	485e      	ldr	r0, [pc, #376]	; (8006c84 <_vfiprintf_r+0x210>)
 8006b0a:	f7f9 fb79 	bl	8000200 <memchr>
 8006b0e:	9b04      	ldr	r3, [sp, #16]
 8006b10:	bb78      	cbnz	r0, 8006b72 <_vfiprintf_r+0xfe>
 8006b12:	06d9      	lsls	r1, r3, #27
 8006b14:	bf44      	itt	mi
 8006b16:	2220      	movmi	r2, #32
 8006b18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b1c:	071a      	lsls	r2, r3, #28
 8006b1e:	bf44      	itt	mi
 8006b20:	222b      	movmi	r2, #43	; 0x2b
 8006b22:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b26:	782a      	ldrb	r2, [r5, #0]
 8006b28:	2a2a      	cmp	r2, #42	; 0x2a
 8006b2a:	d02a      	beq.n	8006b82 <_vfiprintf_r+0x10e>
 8006b2c:	9a07      	ldr	r2, [sp, #28]
 8006b2e:	46a8      	mov	r8, r5
 8006b30:	2000      	movs	r0, #0
 8006b32:	250a      	movs	r5, #10
 8006b34:	4641      	mov	r1, r8
 8006b36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b3a:	3b30      	subs	r3, #48	; 0x30
 8006b3c:	2b09      	cmp	r3, #9
 8006b3e:	d969      	bls.n	8006c14 <_vfiprintf_r+0x1a0>
 8006b40:	b360      	cbz	r0, 8006b9c <_vfiprintf_r+0x128>
 8006b42:	e024      	b.n	8006b8e <_vfiprintf_r+0x11a>
 8006b44:	4b50      	ldr	r3, [pc, #320]	; (8006c88 <_vfiprintf_r+0x214>)
 8006b46:	429c      	cmp	r4, r3
 8006b48:	d101      	bne.n	8006b4e <_vfiprintf_r+0xda>
 8006b4a:	68b4      	ldr	r4, [r6, #8]
 8006b4c:	e7a2      	b.n	8006a94 <_vfiprintf_r+0x20>
 8006b4e:	4b4f      	ldr	r3, [pc, #316]	; (8006c8c <_vfiprintf_r+0x218>)
 8006b50:	429c      	cmp	r4, r3
 8006b52:	bf08      	it	eq
 8006b54:	68f4      	ldreq	r4, [r6, #12]
 8006b56:	e79d      	b.n	8006a94 <_vfiprintf_r+0x20>
 8006b58:	4621      	mov	r1, r4
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	f000 f958 	bl	8006e10 <__swsetup_r>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	d09d      	beq.n	8006aa0 <_vfiprintf_r+0x2c>
 8006b64:	f04f 30ff 	mov.w	r0, #4294967295
 8006b68:	b01d      	add	sp, #116	; 0x74
 8006b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b6e:	46a8      	mov	r8, r5
 8006b70:	e7a2      	b.n	8006ab8 <_vfiprintf_r+0x44>
 8006b72:	4a44      	ldr	r2, [pc, #272]	; (8006c84 <_vfiprintf_r+0x210>)
 8006b74:	1a80      	subs	r0, r0, r2
 8006b76:	fa0b f000 	lsl.w	r0, fp, r0
 8006b7a:	4318      	orrs	r0, r3
 8006b7c:	9004      	str	r0, [sp, #16]
 8006b7e:	4645      	mov	r5, r8
 8006b80:	e7be      	b.n	8006b00 <_vfiprintf_r+0x8c>
 8006b82:	9a03      	ldr	r2, [sp, #12]
 8006b84:	1d11      	adds	r1, r2, #4
 8006b86:	6812      	ldr	r2, [r2, #0]
 8006b88:	9103      	str	r1, [sp, #12]
 8006b8a:	2a00      	cmp	r2, #0
 8006b8c:	db01      	blt.n	8006b92 <_vfiprintf_r+0x11e>
 8006b8e:	9207      	str	r2, [sp, #28]
 8006b90:	e004      	b.n	8006b9c <_vfiprintf_r+0x128>
 8006b92:	4252      	negs	r2, r2
 8006b94:	f043 0302 	orr.w	r3, r3, #2
 8006b98:	9207      	str	r2, [sp, #28]
 8006b9a:	9304      	str	r3, [sp, #16]
 8006b9c:	f898 3000 	ldrb.w	r3, [r8]
 8006ba0:	2b2e      	cmp	r3, #46	; 0x2e
 8006ba2:	d10e      	bne.n	8006bc2 <_vfiprintf_r+0x14e>
 8006ba4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006ba8:	2b2a      	cmp	r3, #42	; 0x2a
 8006baa:	d138      	bne.n	8006c1e <_vfiprintf_r+0x1aa>
 8006bac:	9b03      	ldr	r3, [sp, #12]
 8006bae:	1d1a      	adds	r2, r3, #4
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	9203      	str	r2, [sp, #12]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	bfb8      	it	lt
 8006bb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bbc:	f108 0802 	add.w	r8, r8, #2
 8006bc0:	9305      	str	r3, [sp, #20]
 8006bc2:	4d33      	ldr	r5, [pc, #204]	; (8006c90 <_vfiprintf_r+0x21c>)
 8006bc4:	f898 1000 	ldrb.w	r1, [r8]
 8006bc8:	2203      	movs	r2, #3
 8006bca:	4628      	mov	r0, r5
 8006bcc:	f7f9 fb18 	bl	8000200 <memchr>
 8006bd0:	b140      	cbz	r0, 8006be4 <_vfiprintf_r+0x170>
 8006bd2:	2340      	movs	r3, #64	; 0x40
 8006bd4:	1b40      	subs	r0, r0, r5
 8006bd6:	fa03 f000 	lsl.w	r0, r3, r0
 8006bda:	9b04      	ldr	r3, [sp, #16]
 8006bdc:	4303      	orrs	r3, r0
 8006bde:	f108 0801 	add.w	r8, r8, #1
 8006be2:	9304      	str	r3, [sp, #16]
 8006be4:	f898 1000 	ldrb.w	r1, [r8]
 8006be8:	482a      	ldr	r0, [pc, #168]	; (8006c94 <_vfiprintf_r+0x220>)
 8006bea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bee:	2206      	movs	r2, #6
 8006bf0:	f108 0701 	add.w	r7, r8, #1
 8006bf4:	f7f9 fb04 	bl	8000200 <memchr>
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	d037      	beq.n	8006c6c <_vfiprintf_r+0x1f8>
 8006bfc:	4b26      	ldr	r3, [pc, #152]	; (8006c98 <_vfiprintf_r+0x224>)
 8006bfe:	bb1b      	cbnz	r3, 8006c48 <_vfiprintf_r+0x1d4>
 8006c00:	9b03      	ldr	r3, [sp, #12]
 8006c02:	3307      	adds	r3, #7
 8006c04:	f023 0307 	bic.w	r3, r3, #7
 8006c08:	3308      	adds	r3, #8
 8006c0a:	9303      	str	r3, [sp, #12]
 8006c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c0e:	444b      	add	r3, r9
 8006c10:	9309      	str	r3, [sp, #36]	; 0x24
 8006c12:	e750      	b.n	8006ab6 <_vfiprintf_r+0x42>
 8006c14:	fb05 3202 	mla	r2, r5, r2, r3
 8006c18:	2001      	movs	r0, #1
 8006c1a:	4688      	mov	r8, r1
 8006c1c:	e78a      	b.n	8006b34 <_vfiprintf_r+0xc0>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f108 0801 	add.w	r8, r8, #1
 8006c24:	9305      	str	r3, [sp, #20]
 8006c26:	4619      	mov	r1, r3
 8006c28:	250a      	movs	r5, #10
 8006c2a:	4640      	mov	r0, r8
 8006c2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c30:	3a30      	subs	r2, #48	; 0x30
 8006c32:	2a09      	cmp	r2, #9
 8006c34:	d903      	bls.n	8006c3e <_vfiprintf_r+0x1ca>
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d0c3      	beq.n	8006bc2 <_vfiprintf_r+0x14e>
 8006c3a:	9105      	str	r1, [sp, #20]
 8006c3c:	e7c1      	b.n	8006bc2 <_vfiprintf_r+0x14e>
 8006c3e:	fb05 2101 	mla	r1, r5, r1, r2
 8006c42:	2301      	movs	r3, #1
 8006c44:	4680      	mov	r8, r0
 8006c46:	e7f0      	b.n	8006c2a <_vfiprintf_r+0x1b6>
 8006c48:	ab03      	add	r3, sp, #12
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	4622      	mov	r2, r4
 8006c4e:	4b13      	ldr	r3, [pc, #76]	; (8006c9c <_vfiprintf_r+0x228>)
 8006c50:	a904      	add	r1, sp, #16
 8006c52:	4630      	mov	r0, r6
 8006c54:	f7fe f842 	bl	8004cdc <_printf_float>
 8006c58:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006c5c:	4681      	mov	r9, r0
 8006c5e:	d1d5      	bne.n	8006c0c <_vfiprintf_r+0x198>
 8006c60:	89a3      	ldrh	r3, [r4, #12]
 8006c62:	065b      	lsls	r3, r3, #25
 8006c64:	f53f af7e 	bmi.w	8006b64 <_vfiprintf_r+0xf0>
 8006c68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c6a:	e77d      	b.n	8006b68 <_vfiprintf_r+0xf4>
 8006c6c:	ab03      	add	r3, sp, #12
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	4622      	mov	r2, r4
 8006c72:	4b0a      	ldr	r3, [pc, #40]	; (8006c9c <_vfiprintf_r+0x228>)
 8006c74:	a904      	add	r1, sp, #16
 8006c76:	4630      	mov	r0, r6
 8006c78:	f7fe fae6 	bl	8005248 <_printf_i>
 8006c7c:	e7ec      	b.n	8006c58 <_vfiprintf_r+0x1e4>
 8006c7e:	bf00      	nop
 8006c80:	080072cc 	.word	0x080072cc
 8006c84:	0800740c 	.word	0x0800740c
 8006c88:	080072ec 	.word	0x080072ec
 8006c8c:	080072ac 	.word	0x080072ac
 8006c90:	08007412 	.word	0x08007412
 8006c94:	08007416 	.word	0x08007416
 8006c98:	08004cdd 	.word	0x08004cdd
 8006c9c:	08006a4f 	.word	0x08006a4f

08006ca0 <_sbrk_r>:
 8006ca0:	b538      	push	{r3, r4, r5, lr}
 8006ca2:	4c06      	ldr	r4, [pc, #24]	; (8006cbc <_sbrk_r+0x1c>)
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	4608      	mov	r0, r1
 8006caa:	6023      	str	r3, [r4, #0]
 8006cac:	f7fa fdf4 	bl	8001898 <_sbrk>
 8006cb0:	1c43      	adds	r3, r0, #1
 8006cb2:	d102      	bne.n	8006cba <_sbrk_r+0x1a>
 8006cb4:	6823      	ldr	r3, [r4, #0]
 8006cb6:	b103      	cbz	r3, 8006cba <_sbrk_r+0x1a>
 8006cb8:	602b      	str	r3, [r5, #0]
 8006cba:	bd38      	pop	{r3, r4, r5, pc}
 8006cbc:	20000304 	.word	0x20000304

08006cc0 <__sread>:
 8006cc0:	b510      	push	{r4, lr}
 8006cc2:	460c      	mov	r4, r1
 8006cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cc8:	f000 fa5a 	bl	8007180 <_read_r>
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	bfab      	itete	ge
 8006cd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cd2:	89a3      	ldrhlt	r3, [r4, #12]
 8006cd4:	181b      	addge	r3, r3, r0
 8006cd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cda:	bfac      	ite	ge
 8006cdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cde:	81a3      	strhlt	r3, [r4, #12]
 8006ce0:	bd10      	pop	{r4, pc}

08006ce2 <__swrite>:
 8006ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce6:	461f      	mov	r7, r3
 8006ce8:	898b      	ldrh	r3, [r1, #12]
 8006cea:	05db      	lsls	r3, r3, #23
 8006cec:	4605      	mov	r5, r0
 8006cee:	460c      	mov	r4, r1
 8006cf0:	4616      	mov	r6, r2
 8006cf2:	d505      	bpl.n	8006d00 <__swrite+0x1e>
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cfc:	f000 f9b6 	bl	800706c <_lseek_r>
 8006d00:	89a3      	ldrh	r3, [r4, #12]
 8006d02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d0a:	81a3      	strh	r3, [r4, #12]
 8006d0c:	4632      	mov	r2, r6
 8006d0e:	463b      	mov	r3, r7
 8006d10:	4628      	mov	r0, r5
 8006d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d16:	f000 b869 	b.w	8006dec <_write_r>

08006d1a <__sseek>:
 8006d1a:	b510      	push	{r4, lr}
 8006d1c:	460c      	mov	r4, r1
 8006d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d22:	f000 f9a3 	bl	800706c <_lseek_r>
 8006d26:	1c43      	adds	r3, r0, #1
 8006d28:	89a3      	ldrh	r3, [r4, #12]
 8006d2a:	bf15      	itete	ne
 8006d2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d36:	81a3      	strheq	r3, [r4, #12]
 8006d38:	bf18      	it	ne
 8006d3a:	81a3      	strhne	r3, [r4, #12]
 8006d3c:	bd10      	pop	{r4, pc}

08006d3e <__sclose>:
 8006d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d42:	f000 b8d3 	b.w	8006eec <_close_r>
	...

08006d48 <__swbuf_r>:
 8006d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d4a:	460e      	mov	r6, r1
 8006d4c:	4614      	mov	r4, r2
 8006d4e:	4605      	mov	r5, r0
 8006d50:	b118      	cbz	r0, 8006d5a <__swbuf_r+0x12>
 8006d52:	6983      	ldr	r3, [r0, #24]
 8006d54:	b90b      	cbnz	r3, 8006d5a <__swbuf_r+0x12>
 8006d56:	f7ff fa27 	bl	80061a8 <__sinit>
 8006d5a:	4b21      	ldr	r3, [pc, #132]	; (8006de0 <__swbuf_r+0x98>)
 8006d5c:	429c      	cmp	r4, r3
 8006d5e:	d12a      	bne.n	8006db6 <__swbuf_r+0x6e>
 8006d60:	686c      	ldr	r4, [r5, #4]
 8006d62:	69a3      	ldr	r3, [r4, #24]
 8006d64:	60a3      	str	r3, [r4, #8]
 8006d66:	89a3      	ldrh	r3, [r4, #12]
 8006d68:	071a      	lsls	r2, r3, #28
 8006d6a:	d52e      	bpl.n	8006dca <__swbuf_r+0x82>
 8006d6c:	6923      	ldr	r3, [r4, #16]
 8006d6e:	b363      	cbz	r3, 8006dca <__swbuf_r+0x82>
 8006d70:	6923      	ldr	r3, [r4, #16]
 8006d72:	6820      	ldr	r0, [r4, #0]
 8006d74:	1ac0      	subs	r0, r0, r3
 8006d76:	6963      	ldr	r3, [r4, #20]
 8006d78:	b2f6      	uxtb	r6, r6
 8006d7a:	4283      	cmp	r3, r0
 8006d7c:	4637      	mov	r7, r6
 8006d7e:	dc04      	bgt.n	8006d8a <__swbuf_r+0x42>
 8006d80:	4621      	mov	r1, r4
 8006d82:	4628      	mov	r0, r5
 8006d84:	f000 f948 	bl	8007018 <_fflush_r>
 8006d88:	bb28      	cbnz	r0, 8006dd6 <__swbuf_r+0x8e>
 8006d8a:	68a3      	ldr	r3, [r4, #8]
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	60a3      	str	r3, [r4, #8]
 8006d90:	6823      	ldr	r3, [r4, #0]
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	6022      	str	r2, [r4, #0]
 8006d96:	701e      	strb	r6, [r3, #0]
 8006d98:	6963      	ldr	r3, [r4, #20]
 8006d9a:	3001      	adds	r0, #1
 8006d9c:	4283      	cmp	r3, r0
 8006d9e:	d004      	beq.n	8006daa <__swbuf_r+0x62>
 8006da0:	89a3      	ldrh	r3, [r4, #12]
 8006da2:	07db      	lsls	r3, r3, #31
 8006da4:	d519      	bpl.n	8006dda <__swbuf_r+0x92>
 8006da6:	2e0a      	cmp	r6, #10
 8006da8:	d117      	bne.n	8006dda <__swbuf_r+0x92>
 8006daa:	4621      	mov	r1, r4
 8006dac:	4628      	mov	r0, r5
 8006dae:	f000 f933 	bl	8007018 <_fflush_r>
 8006db2:	b190      	cbz	r0, 8006dda <__swbuf_r+0x92>
 8006db4:	e00f      	b.n	8006dd6 <__swbuf_r+0x8e>
 8006db6:	4b0b      	ldr	r3, [pc, #44]	; (8006de4 <__swbuf_r+0x9c>)
 8006db8:	429c      	cmp	r4, r3
 8006dba:	d101      	bne.n	8006dc0 <__swbuf_r+0x78>
 8006dbc:	68ac      	ldr	r4, [r5, #8]
 8006dbe:	e7d0      	b.n	8006d62 <__swbuf_r+0x1a>
 8006dc0:	4b09      	ldr	r3, [pc, #36]	; (8006de8 <__swbuf_r+0xa0>)
 8006dc2:	429c      	cmp	r4, r3
 8006dc4:	bf08      	it	eq
 8006dc6:	68ec      	ldreq	r4, [r5, #12]
 8006dc8:	e7cb      	b.n	8006d62 <__swbuf_r+0x1a>
 8006dca:	4621      	mov	r1, r4
 8006dcc:	4628      	mov	r0, r5
 8006dce:	f000 f81f 	bl	8006e10 <__swsetup_r>
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	d0cc      	beq.n	8006d70 <__swbuf_r+0x28>
 8006dd6:	f04f 37ff 	mov.w	r7, #4294967295
 8006dda:	4638      	mov	r0, r7
 8006ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dde:	bf00      	nop
 8006de0:	080072cc 	.word	0x080072cc
 8006de4:	080072ec 	.word	0x080072ec
 8006de8:	080072ac 	.word	0x080072ac

08006dec <_write_r>:
 8006dec:	b538      	push	{r3, r4, r5, lr}
 8006dee:	4c07      	ldr	r4, [pc, #28]	; (8006e0c <_write_r+0x20>)
 8006df0:	4605      	mov	r5, r0
 8006df2:	4608      	mov	r0, r1
 8006df4:	4611      	mov	r1, r2
 8006df6:	2200      	movs	r2, #0
 8006df8:	6022      	str	r2, [r4, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f7fa fcfb 	bl	80017f6 <_write>
 8006e00:	1c43      	adds	r3, r0, #1
 8006e02:	d102      	bne.n	8006e0a <_write_r+0x1e>
 8006e04:	6823      	ldr	r3, [r4, #0]
 8006e06:	b103      	cbz	r3, 8006e0a <_write_r+0x1e>
 8006e08:	602b      	str	r3, [r5, #0]
 8006e0a:	bd38      	pop	{r3, r4, r5, pc}
 8006e0c:	20000304 	.word	0x20000304

08006e10 <__swsetup_r>:
 8006e10:	4b32      	ldr	r3, [pc, #200]	; (8006edc <__swsetup_r+0xcc>)
 8006e12:	b570      	push	{r4, r5, r6, lr}
 8006e14:	681d      	ldr	r5, [r3, #0]
 8006e16:	4606      	mov	r6, r0
 8006e18:	460c      	mov	r4, r1
 8006e1a:	b125      	cbz	r5, 8006e26 <__swsetup_r+0x16>
 8006e1c:	69ab      	ldr	r3, [r5, #24]
 8006e1e:	b913      	cbnz	r3, 8006e26 <__swsetup_r+0x16>
 8006e20:	4628      	mov	r0, r5
 8006e22:	f7ff f9c1 	bl	80061a8 <__sinit>
 8006e26:	4b2e      	ldr	r3, [pc, #184]	; (8006ee0 <__swsetup_r+0xd0>)
 8006e28:	429c      	cmp	r4, r3
 8006e2a:	d10f      	bne.n	8006e4c <__swsetup_r+0x3c>
 8006e2c:	686c      	ldr	r4, [r5, #4]
 8006e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	0715      	lsls	r5, r2, #28
 8006e36:	d42c      	bmi.n	8006e92 <__swsetup_r+0x82>
 8006e38:	06d0      	lsls	r0, r2, #27
 8006e3a:	d411      	bmi.n	8006e60 <__swsetup_r+0x50>
 8006e3c:	2209      	movs	r2, #9
 8006e3e:	6032      	str	r2, [r6, #0]
 8006e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e44:	81a3      	strh	r3, [r4, #12]
 8006e46:	f04f 30ff 	mov.w	r0, #4294967295
 8006e4a:	e03e      	b.n	8006eca <__swsetup_r+0xba>
 8006e4c:	4b25      	ldr	r3, [pc, #148]	; (8006ee4 <__swsetup_r+0xd4>)
 8006e4e:	429c      	cmp	r4, r3
 8006e50:	d101      	bne.n	8006e56 <__swsetup_r+0x46>
 8006e52:	68ac      	ldr	r4, [r5, #8]
 8006e54:	e7eb      	b.n	8006e2e <__swsetup_r+0x1e>
 8006e56:	4b24      	ldr	r3, [pc, #144]	; (8006ee8 <__swsetup_r+0xd8>)
 8006e58:	429c      	cmp	r4, r3
 8006e5a:	bf08      	it	eq
 8006e5c:	68ec      	ldreq	r4, [r5, #12]
 8006e5e:	e7e6      	b.n	8006e2e <__swsetup_r+0x1e>
 8006e60:	0751      	lsls	r1, r2, #29
 8006e62:	d512      	bpl.n	8006e8a <__swsetup_r+0x7a>
 8006e64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e66:	b141      	cbz	r1, 8006e7a <__swsetup_r+0x6a>
 8006e68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e6c:	4299      	cmp	r1, r3
 8006e6e:	d002      	beq.n	8006e76 <__swsetup_r+0x66>
 8006e70:	4630      	mov	r0, r6
 8006e72:	f7ff fd2d 	bl	80068d0 <_free_r>
 8006e76:	2300      	movs	r3, #0
 8006e78:	6363      	str	r3, [r4, #52]	; 0x34
 8006e7a:	89a3      	ldrh	r3, [r4, #12]
 8006e7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e80:	81a3      	strh	r3, [r4, #12]
 8006e82:	2300      	movs	r3, #0
 8006e84:	6063      	str	r3, [r4, #4]
 8006e86:	6923      	ldr	r3, [r4, #16]
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	89a3      	ldrh	r3, [r4, #12]
 8006e8c:	f043 0308 	orr.w	r3, r3, #8
 8006e90:	81a3      	strh	r3, [r4, #12]
 8006e92:	6923      	ldr	r3, [r4, #16]
 8006e94:	b94b      	cbnz	r3, 8006eaa <__swsetup_r+0x9a>
 8006e96:	89a3      	ldrh	r3, [r4, #12]
 8006e98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ea0:	d003      	beq.n	8006eaa <__swsetup_r+0x9a>
 8006ea2:	4621      	mov	r1, r4
 8006ea4:	4630      	mov	r0, r6
 8006ea6:	f000 f917 	bl	80070d8 <__smakebuf_r>
 8006eaa:	89a2      	ldrh	r2, [r4, #12]
 8006eac:	f012 0301 	ands.w	r3, r2, #1
 8006eb0:	d00c      	beq.n	8006ecc <__swsetup_r+0xbc>
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	60a3      	str	r3, [r4, #8]
 8006eb6:	6963      	ldr	r3, [r4, #20]
 8006eb8:	425b      	negs	r3, r3
 8006eba:	61a3      	str	r3, [r4, #24]
 8006ebc:	6923      	ldr	r3, [r4, #16]
 8006ebe:	b953      	cbnz	r3, 8006ed6 <__swsetup_r+0xc6>
 8006ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ec4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006ec8:	d1ba      	bne.n	8006e40 <__swsetup_r+0x30>
 8006eca:	bd70      	pop	{r4, r5, r6, pc}
 8006ecc:	0792      	lsls	r2, r2, #30
 8006ece:	bf58      	it	pl
 8006ed0:	6963      	ldrpl	r3, [r4, #20]
 8006ed2:	60a3      	str	r3, [r4, #8]
 8006ed4:	e7f2      	b.n	8006ebc <__swsetup_r+0xac>
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	e7f7      	b.n	8006eca <__swsetup_r+0xba>
 8006eda:	bf00      	nop
 8006edc:	2000000c 	.word	0x2000000c
 8006ee0:	080072cc 	.word	0x080072cc
 8006ee4:	080072ec 	.word	0x080072ec
 8006ee8:	080072ac 	.word	0x080072ac

08006eec <_close_r>:
 8006eec:	b538      	push	{r3, r4, r5, lr}
 8006eee:	4c06      	ldr	r4, [pc, #24]	; (8006f08 <_close_r+0x1c>)
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	4605      	mov	r5, r0
 8006ef4:	4608      	mov	r0, r1
 8006ef6:	6023      	str	r3, [r4, #0]
 8006ef8:	f7fa fc99 	bl	800182e <_close>
 8006efc:	1c43      	adds	r3, r0, #1
 8006efe:	d102      	bne.n	8006f06 <_close_r+0x1a>
 8006f00:	6823      	ldr	r3, [r4, #0]
 8006f02:	b103      	cbz	r3, 8006f06 <_close_r+0x1a>
 8006f04:	602b      	str	r3, [r5, #0]
 8006f06:	bd38      	pop	{r3, r4, r5, pc}
 8006f08:	20000304 	.word	0x20000304

08006f0c <__sflush_r>:
 8006f0c:	898a      	ldrh	r2, [r1, #12]
 8006f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f12:	4605      	mov	r5, r0
 8006f14:	0710      	lsls	r0, r2, #28
 8006f16:	460c      	mov	r4, r1
 8006f18:	d458      	bmi.n	8006fcc <__sflush_r+0xc0>
 8006f1a:	684b      	ldr	r3, [r1, #4]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	dc05      	bgt.n	8006f2c <__sflush_r+0x20>
 8006f20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	dc02      	bgt.n	8006f2c <__sflush_r+0x20>
 8006f26:	2000      	movs	r0, #0
 8006f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f2e:	2e00      	cmp	r6, #0
 8006f30:	d0f9      	beq.n	8006f26 <__sflush_r+0x1a>
 8006f32:	2300      	movs	r3, #0
 8006f34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f38:	682f      	ldr	r7, [r5, #0]
 8006f3a:	6a21      	ldr	r1, [r4, #32]
 8006f3c:	602b      	str	r3, [r5, #0]
 8006f3e:	d032      	beq.n	8006fa6 <__sflush_r+0x9a>
 8006f40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f42:	89a3      	ldrh	r3, [r4, #12]
 8006f44:	075a      	lsls	r2, r3, #29
 8006f46:	d505      	bpl.n	8006f54 <__sflush_r+0x48>
 8006f48:	6863      	ldr	r3, [r4, #4]
 8006f4a:	1ac0      	subs	r0, r0, r3
 8006f4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f4e:	b10b      	cbz	r3, 8006f54 <__sflush_r+0x48>
 8006f50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f52:	1ac0      	subs	r0, r0, r3
 8006f54:	2300      	movs	r3, #0
 8006f56:	4602      	mov	r2, r0
 8006f58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f5a:	6a21      	ldr	r1, [r4, #32]
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	47b0      	blx	r6
 8006f60:	1c43      	adds	r3, r0, #1
 8006f62:	89a3      	ldrh	r3, [r4, #12]
 8006f64:	d106      	bne.n	8006f74 <__sflush_r+0x68>
 8006f66:	6829      	ldr	r1, [r5, #0]
 8006f68:	291d      	cmp	r1, #29
 8006f6a:	d848      	bhi.n	8006ffe <__sflush_r+0xf2>
 8006f6c:	4a29      	ldr	r2, [pc, #164]	; (8007014 <__sflush_r+0x108>)
 8006f6e:	40ca      	lsrs	r2, r1
 8006f70:	07d6      	lsls	r6, r2, #31
 8006f72:	d544      	bpl.n	8006ffe <__sflush_r+0xf2>
 8006f74:	2200      	movs	r2, #0
 8006f76:	6062      	str	r2, [r4, #4]
 8006f78:	04d9      	lsls	r1, r3, #19
 8006f7a:	6922      	ldr	r2, [r4, #16]
 8006f7c:	6022      	str	r2, [r4, #0]
 8006f7e:	d504      	bpl.n	8006f8a <__sflush_r+0x7e>
 8006f80:	1c42      	adds	r2, r0, #1
 8006f82:	d101      	bne.n	8006f88 <__sflush_r+0x7c>
 8006f84:	682b      	ldr	r3, [r5, #0]
 8006f86:	b903      	cbnz	r3, 8006f8a <__sflush_r+0x7e>
 8006f88:	6560      	str	r0, [r4, #84]	; 0x54
 8006f8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f8c:	602f      	str	r7, [r5, #0]
 8006f8e:	2900      	cmp	r1, #0
 8006f90:	d0c9      	beq.n	8006f26 <__sflush_r+0x1a>
 8006f92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f96:	4299      	cmp	r1, r3
 8006f98:	d002      	beq.n	8006fa0 <__sflush_r+0x94>
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	f7ff fc98 	bl	80068d0 <_free_r>
 8006fa0:	2000      	movs	r0, #0
 8006fa2:	6360      	str	r0, [r4, #52]	; 0x34
 8006fa4:	e7c0      	b.n	8006f28 <__sflush_r+0x1c>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	4628      	mov	r0, r5
 8006faa:	47b0      	blx	r6
 8006fac:	1c41      	adds	r1, r0, #1
 8006fae:	d1c8      	bne.n	8006f42 <__sflush_r+0x36>
 8006fb0:	682b      	ldr	r3, [r5, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d0c5      	beq.n	8006f42 <__sflush_r+0x36>
 8006fb6:	2b1d      	cmp	r3, #29
 8006fb8:	d001      	beq.n	8006fbe <__sflush_r+0xb2>
 8006fba:	2b16      	cmp	r3, #22
 8006fbc:	d101      	bne.n	8006fc2 <__sflush_r+0xb6>
 8006fbe:	602f      	str	r7, [r5, #0]
 8006fc0:	e7b1      	b.n	8006f26 <__sflush_r+0x1a>
 8006fc2:	89a3      	ldrh	r3, [r4, #12]
 8006fc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fc8:	81a3      	strh	r3, [r4, #12]
 8006fca:	e7ad      	b.n	8006f28 <__sflush_r+0x1c>
 8006fcc:	690f      	ldr	r7, [r1, #16]
 8006fce:	2f00      	cmp	r7, #0
 8006fd0:	d0a9      	beq.n	8006f26 <__sflush_r+0x1a>
 8006fd2:	0793      	lsls	r3, r2, #30
 8006fd4:	680e      	ldr	r6, [r1, #0]
 8006fd6:	bf08      	it	eq
 8006fd8:	694b      	ldreq	r3, [r1, #20]
 8006fda:	600f      	str	r7, [r1, #0]
 8006fdc:	bf18      	it	ne
 8006fde:	2300      	movne	r3, #0
 8006fe0:	eba6 0807 	sub.w	r8, r6, r7
 8006fe4:	608b      	str	r3, [r1, #8]
 8006fe6:	f1b8 0f00 	cmp.w	r8, #0
 8006fea:	dd9c      	ble.n	8006f26 <__sflush_r+0x1a>
 8006fec:	4643      	mov	r3, r8
 8006fee:	463a      	mov	r2, r7
 8006ff0:	6a21      	ldr	r1, [r4, #32]
 8006ff2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	47b0      	blx	r6
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	dc06      	bgt.n	800700a <__sflush_r+0xfe>
 8006ffc:	89a3      	ldrh	r3, [r4, #12]
 8006ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007002:	81a3      	strh	r3, [r4, #12]
 8007004:	f04f 30ff 	mov.w	r0, #4294967295
 8007008:	e78e      	b.n	8006f28 <__sflush_r+0x1c>
 800700a:	4407      	add	r7, r0
 800700c:	eba8 0800 	sub.w	r8, r8, r0
 8007010:	e7e9      	b.n	8006fe6 <__sflush_r+0xda>
 8007012:	bf00      	nop
 8007014:	20400001 	.word	0x20400001

08007018 <_fflush_r>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	690b      	ldr	r3, [r1, #16]
 800701c:	4605      	mov	r5, r0
 800701e:	460c      	mov	r4, r1
 8007020:	b1db      	cbz	r3, 800705a <_fflush_r+0x42>
 8007022:	b118      	cbz	r0, 800702c <_fflush_r+0x14>
 8007024:	6983      	ldr	r3, [r0, #24]
 8007026:	b90b      	cbnz	r3, 800702c <_fflush_r+0x14>
 8007028:	f7ff f8be 	bl	80061a8 <__sinit>
 800702c:	4b0c      	ldr	r3, [pc, #48]	; (8007060 <_fflush_r+0x48>)
 800702e:	429c      	cmp	r4, r3
 8007030:	d109      	bne.n	8007046 <_fflush_r+0x2e>
 8007032:	686c      	ldr	r4, [r5, #4]
 8007034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007038:	b17b      	cbz	r3, 800705a <_fflush_r+0x42>
 800703a:	4621      	mov	r1, r4
 800703c:	4628      	mov	r0, r5
 800703e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007042:	f7ff bf63 	b.w	8006f0c <__sflush_r>
 8007046:	4b07      	ldr	r3, [pc, #28]	; (8007064 <_fflush_r+0x4c>)
 8007048:	429c      	cmp	r4, r3
 800704a:	d101      	bne.n	8007050 <_fflush_r+0x38>
 800704c:	68ac      	ldr	r4, [r5, #8]
 800704e:	e7f1      	b.n	8007034 <_fflush_r+0x1c>
 8007050:	4b05      	ldr	r3, [pc, #20]	; (8007068 <_fflush_r+0x50>)
 8007052:	429c      	cmp	r4, r3
 8007054:	bf08      	it	eq
 8007056:	68ec      	ldreq	r4, [r5, #12]
 8007058:	e7ec      	b.n	8007034 <_fflush_r+0x1c>
 800705a:	2000      	movs	r0, #0
 800705c:	bd38      	pop	{r3, r4, r5, pc}
 800705e:	bf00      	nop
 8007060:	080072cc 	.word	0x080072cc
 8007064:	080072ec 	.word	0x080072ec
 8007068:	080072ac 	.word	0x080072ac

0800706c <_lseek_r>:
 800706c:	b538      	push	{r3, r4, r5, lr}
 800706e:	4c07      	ldr	r4, [pc, #28]	; (800708c <_lseek_r+0x20>)
 8007070:	4605      	mov	r5, r0
 8007072:	4608      	mov	r0, r1
 8007074:	4611      	mov	r1, r2
 8007076:	2200      	movs	r2, #0
 8007078:	6022      	str	r2, [r4, #0]
 800707a:	461a      	mov	r2, r3
 800707c:	f7fa fbfe 	bl	800187c <_lseek>
 8007080:	1c43      	adds	r3, r0, #1
 8007082:	d102      	bne.n	800708a <_lseek_r+0x1e>
 8007084:	6823      	ldr	r3, [r4, #0]
 8007086:	b103      	cbz	r3, 800708a <_lseek_r+0x1e>
 8007088:	602b      	str	r3, [r5, #0]
 800708a:	bd38      	pop	{r3, r4, r5, pc}
 800708c:	20000304 	.word	0x20000304

08007090 <__swhatbuf_r>:
 8007090:	b570      	push	{r4, r5, r6, lr}
 8007092:	460e      	mov	r6, r1
 8007094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007098:	2900      	cmp	r1, #0
 800709a:	b096      	sub	sp, #88	; 0x58
 800709c:	4614      	mov	r4, r2
 800709e:	461d      	mov	r5, r3
 80070a0:	da07      	bge.n	80070b2 <__swhatbuf_r+0x22>
 80070a2:	2300      	movs	r3, #0
 80070a4:	602b      	str	r3, [r5, #0]
 80070a6:	89b3      	ldrh	r3, [r6, #12]
 80070a8:	061a      	lsls	r2, r3, #24
 80070aa:	d410      	bmi.n	80070ce <__swhatbuf_r+0x3e>
 80070ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070b0:	e00e      	b.n	80070d0 <__swhatbuf_r+0x40>
 80070b2:	466a      	mov	r2, sp
 80070b4:	f000 f884 	bl	80071c0 <_fstat_r>
 80070b8:	2800      	cmp	r0, #0
 80070ba:	dbf2      	blt.n	80070a2 <__swhatbuf_r+0x12>
 80070bc:	9a01      	ldr	r2, [sp, #4]
 80070be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80070c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070c6:	425a      	negs	r2, r3
 80070c8:	415a      	adcs	r2, r3
 80070ca:	602a      	str	r2, [r5, #0]
 80070cc:	e7ee      	b.n	80070ac <__swhatbuf_r+0x1c>
 80070ce:	2340      	movs	r3, #64	; 0x40
 80070d0:	2000      	movs	r0, #0
 80070d2:	6023      	str	r3, [r4, #0]
 80070d4:	b016      	add	sp, #88	; 0x58
 80070d6:	bd70      	pop	{r4, r5, r6, pc}

080070d8 <__smakebuf_r>:
 80070d8:	898b      	ldrh	r3, [r1, #12]
 80070da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070dc:	079d      	lsls	r5, r3, #30
 80070de:	4606      	mov	r6, r0
 80070e0:	460c      	mov	r4, r1
 80070e2:	d507      	bpl.n	80070f4 <__smakebuf_r+0x1c>
 80070e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070e8:	6023      	str	r3, [r4, #0]
 80070ea:	6123      	str	r3, [r4, #16]
 80070ec:	2301      	movs	r3, #1
 80070ee:	6163      	str	r3, [r4, #20]
 80070f0:	b002      	add	sp, #8
 80070f2:	bd70      	pop	{r4, r5, r6, pc}
 80070f4:	ab01      	add	r3, sp, #4
 80070f6:	466a      	mov	r2, sp
 80070f8:	f7ff ffca 	bl	8007090 <__swhatbuf_r>
 80070fc:	9900      	ldr	r1, [sp, #0]
 80070fe:	4605      	mov	r5, r0
 8007100:	4630      	mov	r0, r6
 8007102:	f7ff fc33 	bl	800696c <_malloc_r>
 8007106:	b948      	cbnz	r0, 800711c <__smakebuf_r+0x44>
 8007108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800710c:	059a      	lsls	r2, r3, #22
 800710e:	d4ef      	bmi.n	80070f0 <__smakebuf_r+0x18>
 8007110:	f023 0303 	bic.w	r3, r3, #3
 8007114:	f043 0302 	orr.w	r3, r3, #2
 8007118:	81a3      	strh	r3, [r4, #12]
 800711a:	e7e3      	b.n	80070e4 <__smakebuf_r+0xc>
 800711c:	4b0d      	ldr	r3, [pc, #52]	; (8007154 <__smakebuf_r+0x7c>)
 800711e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007120:	89a3      	ldrh	r3, [r4, #12]
 8007122:	6020      	str	r0, [r4, #0]
 8007124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007128:	81a3      	strh	r3, [r4, #12]
 800712a:	9b00      	ldr	r3, [sp, #0]
 800712c:	6163      	str	r3, [r4, #20]
 800712e:	9b01      	ldr	r3, [sp, #4]
 8007130:	6120      	str	r0, [r4, #16]
 8007132:	b15b      	cbz	r3, 800714c <__smakebuf_r+0x74>
 8007134:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007138:	4630      	mov	r0, r6
 800713a:	f000 f853 	bl	80071e4 <_isatty_r>
 800713e:	b128      	cbz	r0, 800714c <__smakebuf_r+0x74>
 8007140:	89a3      	ldrh	r3, [r4, #12]
 8007142:	f023 0303 	bic.w	r3, r3, #3
 8007146:	f043 0301 	orr.w	r3, r3, #1
 800714a:	81a3      	strh	r3, [r4, #12]
 800714c:	89a3      	ldrh	r3, [r4, #12]
 800714e:	431d      	orrs	r5, r3
 8007150:	81a5      	strh	r5, [r4, #12]
 8007152:	e7cd      	b.n	80070f0 <__smakebuf_r+0x18>
 8007154:	08006171 	.word	0x08006171

08007158 <__ascii_mbtowc>:
 8007158:	b082      	sub	sp, #8
 800715a:	b901      	cbnz	r1, 800715e <__ascii_mbtowc+0x6>
 800715c:	a901      	add	r1, sp, #4
 800715e:	b142      	cbz	r2, 8007172 <__ascii_mbtowc+0x1a>
 8007160:	b14b      	cbz	r3, 8007176 <__ascii_mbtowc+0x1e>
 8007162:	7813      	ldrb	r3, [r2, #0]
 8007164:	600b      	str	r3, [r1, #0]
 8007166:	7812      	ldrb	r2, [r2, #0]
 8007168:	1c10      	adds	r0, r2, #0
 800716a:	bf18      	it	ne
 800716c:	2001      	movne	r0, #1
 800716e:	b002      	add	sp, #8
 8007170:	4770      	bx	lr
 8007172:	4610      	mov	r0, r2
 8007174:	e7fb      	b.n	800716e <__ascii_mbtowc+0x16>
 8007176:	f06f 0001 	mvn.w	r0, #1
 800717a:	e7f8      	b.n	800716e <__ascii_mbtowc+0x16>

0800717c <__malloc_lock>:
 800717c:	4770      	bx	lr

0800717e <__malloc_unlock>:
 800717e:	4770      	bx	lr

08007180 <_read_r>:
 8007180:	b538      	push	{r3, r4, r5, lr}
 8007182:	4c07      	ldr	r4, [pc, #28]	; (80071a0 <_read_r+0x20>)
 8007184:	4605      	mov	r5, r0
 8007186:	4608      	mov	r0, r1
 8007188:	4611      	mov	r1, r2
 800718a:	2200      	movs	r2, #0
 800718c:	6022      	str	r2, [r4, #0]
 800718e:	461a      	mov	r2, r3
 8007190:	f7fa fb14 	bl	80017bc <_read>
 8007194:	1c43      	adds	r3, r0, #1
 8007196:	d102      	bne.n	800719e <_read_r+0x1e>
 8007198:	6823      	ldr	r3, [r4, #0]
 800719a:	b103      	cbz	r3, 800719e <_read_r+0x1e>
 800719c:	602b      	str	r3, [r5, #0]
 800719e:	bd38      	pop	{r3, r4, r5, pc}
 80071a0:	20000304 	.word	0x20000304

080071a4 <__ascii_wctomb>:
 80071a4:	b149      	cbz	r1, 80071ba <__ascii_wctomb+0x16>
 80071a6:	2aff      	cmp	r2, #255	; 0xff
 80071a8:	bf85      	ittet	hi
 80071aa:	238a      	movhi	r3, #138	; 0x8a
 80071ac:	6003      	strhi	r3, [r0, #0]
 80071ae:	700a      	strbls	r2, [r1, #0]
 80071b0:	f04f 30ff 	movhi.w	r0, #4294967295
 80071b4:	bf98      	it	ls
 80071b6:	2001      	movls	r0, #1
 80071b8:	4770      	bx	lr
 80071ba:	4608      	mov	r0, r1
 80071bc:	4770      	bx	lr
	...

080071c0 <_fstat_r>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	4c07      	ldr	r4, [pc, #28]	; (80071e0 <_fstat_r+0x20>)
 80071c4:	2300      	movs	r3, #0
 80071c6:	4605      	mov	r5, r0
 80071c8:	4608      	mov	r0, r1
 80071ca:	4611      	mov	r1, r2
 80071cc:	6023      	str	r3, [r4, #0]
 80071ce:	f7fa fb3a 	bl	8001846 <_fstat>
 80071d2:	1c43      	adds	r3, r0, #1
 80071d4:	d102      	bne.n	80071dc <_fstat_r+0x1c>
 80071d6:	6823      	ldr	r3, [r4, #0]
 80071d8:	b103      	cbz	r3, 80071dc <_fstat_r+0x1c>
 80071da:	602b      	str	r3, [r5, #0]
 80071dc:	bd38      	pop	{r3, r4, r5, pc}
 80071de:	bf00      	nop
 80071e0:	20000304 	.word	0x20000304

080071e4 <_isatty_r>:
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	4c06      	ldr	r4, [pc, #24]	; (8007200 <_isatty_r+0x1c>)
 80071e8:	2300      	movs	r3, #0
 80071ea:	4605      	mov	r5, r0
 80071ec:	4608      	mov	r0, r1
 80071ee:	6023      	str	r3, [r4, #0]
 80071f0:	f7fa fb39 	bl	8001866 <_isatty>
 80071f4:	1c43      	adds	r3, r0, #1
 80071f6:	d102      	bne.n	80071fe <_isatty_r+0x1a>
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	b103      	cbz	r3, 80071fe <_isatty_r+0x1a>
 80071fc:	602b      	str	r3, [r5, #0]
 80071fe:	bd38      	pop	{r3, r4, r5, pc}
 8007200:	20000304 	.word	0x20000304

08007204 <_init>:
 8007204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007206:	bf00      	nop
 8007208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800720a:	bc08      	pop	{r3}
 800720c:	469e      	mov	lr, r3
 800720e:	4770      	bx	lr

08007210 <_fini>:
 8007210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007212:	bf00      	nop
 8007214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007216:	bc08      	pop	{r3}
 8007218:	469e      	mov	lr, r3
 800721a:	4770      	bx	lr
